#+title:Column and row names

#+TODO: DIFFERENT | SAME

#+tblname: C
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

* DIFFERENT hlines shall be omitted by default

The difference here is that Eric's code maintains an hline, whereas I
get rid of all hlines.

#+begin_src python :var tab=C
return tab
#+end_src

#+results:
| a | b | c |
| d | e | f |
| g | h | i |

dan:
| a | b | c |
| d | e | f |
| g | h | i |

* DIFFERENT but not for emacs-lisp, which knows how to deal with them

  Here, Eric's code gets rid of the second hline, whereas for elisp by
  default leave all hlines alone.

#+begin_src emacs-lisp :var tab=C
tab
#+end_src

#+results:
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

dan:
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

* SAME :colnames says "The first row is not genuine table content"

We are the same here.
  
#+begin_src python :var tab=C :colnames yes
return [[val + '*' for val in row] for row in tab]
#+end_src

#+results:
| a  | b  | c  |
|----+----+----|
| d* | e* | f* |
| g* | h* | i* |


dan:
| a  | b  | c  |
|----+----+----|
| d* | e* | f* |
| g* | h* | i* |

* DIFFERENT :rownames says "The first column is not genuine table content"

The differences here are that Eric's code 
- leaves in the first hline although :colnames not supplied
- does not operate on the first row even though :colnames yes is not supplied

#+begin_src python :var tab=C :rownames yes
return [[val + '*' for val in row] for row in tab]
#+end_src

#+results:
| a | b  | c  |
|---+----+----|
| d | e* | f* |
| g | h* | i* |


dan:
| a | b* | c* |
| d | e* | f* |
| g | h* | i* |

*** Additionally
    I am surprised that the second hline is deleted here, although :hlines no is provided.
#+begin_src python :var tab=C :rownames yes :hlines no
return [[val + '*' for val in row] for row in tab]
#+end_src

#+results:
| a | b  | c  |
|---+----+----|
| d | e* | f* |
| g | h* | i* |
    


* DIFFERENT :rownames and :colnames can be used together

Almost the same here. I made the decision to blank out the top left cell
when :rownames and :colnames are both supplied, because it is hard to
know how to interpret such a cell (incidentally, this is the behaviour
we get out of R).

#+begin_src python :var tab=C :colnames yes :rownames yes
return [[val + '*' for val in row] for row in tab]
#+end_src

#+results:
| a | b  | c  |
|---+----+----|
| d | e* | f* |
| g | h* | i* |

dan:
|   | b  | c  |
|---+----+----|
| d | e* | f* |
| g | h* | i* |

* DIFFERENT Some languages can *use* the row/col names

Eric's code errors out in R here.

#+begin_src R :var tab=C :colnames yes
tab[,"b",drop=FALSE]
#+end_src

#+results:
Error in `[.data.frame`(tab, , "b", drop = FALSE) : 
  undefined columns selected
Calls: write.table ... is.data.frame -> inherits -> main -> [ -> [.data.frame
Execution halted

dan:
| b |
|---|
| e |
| h |

* R with rownames


#+begin_src R :var tab=C :rownames yes
tab["d",,drop=FALSE]
#+end_src

#+results:
| nil | nil |

dan:
| d | e | f |

#+begin_src R :var tab=C :colnames yes :rownames yes
tab["d","b",drop=FALSE]
#+end_src

#+results:
Error in `[.data.frame`(tab, "d", "b", drop = FALSE) : 
  undefined columns selected
Calls: write.table ... is.data.frame -> inherits -> main -> [ -> [.data.frame
Execution halted


dan:
|   | b |
|---+---|
| d | e |

* DIFFERENT In such languages, :rownames/:colnames force row/col names in output

Here the difference is simply because the :rownames patch for R hasn't
been applied.

#+begin_src R :rownames yes :colnames yes :hlines no
t(matrix(letters[1:9], 3, 3))
#+end_src

#+results:
| V1 | V2 | V3 |
|----+----+----|
| a  | b  | c  |
| d  | e  | f  |
| g  | h  | i  |

dan:
|   | V1 | V2 | V3 |
|---+----+----+----|
| 1 | a  | b  | c  |
| 2 | d  | e  | f  |
| 3 | g  | h  | i  |



* Etc
#+begin_src R :var tab=C :rownames yes :colnames yes
apply(tab, 2, toupper)
#+end_src

:
|   | b | c |
|---+---+---|
| d | E | F |
| g | H | I |

#+begin_src R :var tab=C :rownames yes
apply(tab, 2, toupper)
#+end_src

:
| a | B | C |
| d | E | F |
| g | H | I |




#+TODO: DIFFERENT | SAME


* Email
Qualifications to email:
- Don't drop hlines for elisp
- What about if >1 table passed in?
  - :colnames yes no yes?

The question is: how do we map between org tables with hline separators
and tabular data structures in babel languages (some of which have
internal concepts of "column names" and "row names")? In particular, one
might commonly use an hline in org to form "column names":

| column | names    |
|--------+----------|
| table  | contents |

*** Example tables
#+tblname: A
| a | b | c |
| d | e | f |
| g | h | i |

#+tblname: B
| a | b | c |
|---+---+---|
| d | e | f |
| g | h | i |

#+tblname: C
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+tblname: D
|---+---+---|
| a | b | c |
|---+---+---|
| d | e | f |
| g | h | i |

*** Proposed new rules
- Terminology ::

  - Table B above has "column names" and therefore one "hline". Table
    A has neither. Table C has "column names" and two "hlines".

  - For the purposes of this discussion, there are no such things as
    "row names" in an Org table.

- What will we do with hlines ::

  Currently, all languages other than R fail with hlines present.

  New behaviour: by default all languages will *drop all hlines* from
  tables in input. We shall make no attempt to reinstate hlines in the
  output[1] *Do we want some way for the user to control hlines in the
  output?*
  
  This means that if a table has column names, those column names will
  be passed to the language as an ordinary first row of the table.

  This example shows loss of all hlines by default:

#+begin_src python :var tab=C :rownames yes
return tab
#+end_src

#+results:
| b | c |
| e | f |
| h | i |

Intended results
| a | b | c |
| d | e | f |
| g | h | i |

  
- :colnames header argument ::
  
  This argument will be used to say: "The first row of this input
  table contains column names." There are two cases:

  In both cases, to start off with we *drop all hlines* and *omit the
  first row*. Therefore, row i in the org table will be row i-1 in the
  language. The difference is:

  1. Language does not support column names for tabular data
     structures (most languages)

     When we output a table we reinstate the first row as column names
     with an hline, *if* the output number of columns is the same as
     the input. *Do you agree?*

  2. Language supports column names (R)
  
     The input R object is created with the first row as column names,
     and the column names of the output object are exported back to
     org, and an hline is reinstated.

This example shows preservation of colnames and loss of second hline:

#+begin_src python :var tab=C :colnames yes
tab
#+end_src

#+results:
| a | b | c |
|---+---+---|
| d | e | f |
| g | h | i |

- :rownames header argument ::
  
  This is analogous to :colnames
  
  This argument will be used to say: "The first column of this input
  table contains row names." There are two cases. In both cases we
  *omit the first column*, therefore column j in the org table will be
  column j-1 in the language.
  
  1. Language does not support row names for tabular data structures
     (most languages)

     We attempt to *reinstate row names* if number of output rows is
     the same as input.

  2. Language supports rownames (R)
     
     The first column is used as the object rownames. The output
     object rownames are exported to Org and become the first column
     of the output org table.

     This is largely implemented already by a patch by Julien Barnier.

*** Footnotes

[1] Because the output table is not necessarily "the same table" as
the input table.

* R behaviour

- Default ::

  Currently, if a table has colnames they are silently dropped:

#+begin_src R :var tab=B
  tab
#+end_src

#+results:
| row1 | 11 | 12 |
| row2 | 21 | 22 |
    
This will change so that the table will be come back as the original,
but minus the hline.



* Current behaviour
*** OK Simple identity
#+begin_src R :var tab=B :colnames yes
  tab
#+end_src

#+results:
| X    | col1 | col2 |
|------+------+------|
| row1 |   11 |   12 |
| row2 |   21 |   22 |

*** OK Use org header line
#+begin_src R :var tab=B :colnames yes
tab
#+end_src

The X comes from R providing a default name for a missing column name

#+results:
| X    | col1 | col2 |
|------+------+------|
| row1 |   11 |   12 |
| row2 |   21 |   22 |

*** Create rownames in R
***** Simple
#+begin_src R :var tab=B
array(1:9, dim=c(3,3), dimnames=list(letters[1:3], letters[1:3]))
#+end_src

#+results:
| 1 | 4 | 7 |
| 2 | 5 | 8 |
| 3 | 6 | 9 |

***** OK With colnames
      
#+begin_src R :var tab=B :colnames yes
array(1:9, dim=c(3,3), dimnames=list(letters[1:3], letters[1:3]))
#+end_src

#+results:
| a | b | c |
|---+---+---|
| 1 | 4 | 7 |
| 2 | 5 | 8 |
| 3 | 6 | 9 |

* New behaviour
*** OK Simple identity
#+begin_src R :var tab=A
tab
#+end_src

#+results:
| row1 | 11 | 12 |
| row2 | 21 | 22 |

*** TODO Use org header line
    Header line from org table is not used.
#+begin_src R :var tab=B :colnames yes
tab
#+end_src

#+results:
| row1 | 11 | 12 |
|------+----+----|
| row2 | 21 | 22 |

*** OK Use org header line with 'rownames yes'
#+begin_src R :var tab=B :colnames yes :rownames yes
tab
#+end_src

#+results:
| X    | col1 | col2 |
|------+------+------|
| row1 |   11 |   12 |
| row2 |   21 |   22 |

*** TODO Create rownames in R
***** Simple
#+begin_src R :var tab=B
array(1:9, dim=c(3,3), dimnames=list(letters[1:3], letters[1:3]))
#+end_src

#+results:
| 1 | 4 | 7 |
| 2 | 5 | 8 |
| 3 | 6 | 9 |

***** TODO With colnames
      Inappropriate colnames
#+begin_src R :var tab=B :colnames yes
array(1:9, dim=c(3,3), dimnames=list(letters[1:3], letters[1:3]))
#+end_src

#+results:
| 1 | 4 | 7 |
|---+---+---|
| 2 | 5 | 8 |
| 3 | 6 | 9 |

***** TODO With rownames
      Gets colnames but not rownames

#+begin_src R :var tab=B :rownames yes
array(1:9, dim=c(3,3), dimnames=list(letters[1:3], letters[1:3]))
#+end_src

#+results:
| a | b | c |
| 1 | 4 | 7 |
| 2 | 5 | 8 |
| 3 | 6 | 9 |

***** TODO With colnames and rownames
      Doesn't get rownames (?)
#+begin_src R :var tab=B :colnames yes :rownames yes
array(1:9, dim=c(3,3), dimnames=list(letters[1:3], letters[1:3]))
#+end_src

#+results:
| a | b | c |
|---+---+---|
| 1 | 4 | 7 |
| 2 | 5 | 8 |
| 3 | 6 | 9 |

* Org config


