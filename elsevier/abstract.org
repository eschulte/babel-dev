#+TITLE: A Multi-Language Environment for Authoring and Evaluating Executable Papers
#+AUTHOR: Eric Schulte, Dan Davison, Thomas Dye, Carsten Dominik
#+OPTIONS: ^:nil toc:nil H:4 num:nil

* Abstract
We present a new computing environment for authoring mixed natural and
computer language documents. In this environment a single
hierarchically-organized plain text source file may contain a variety
of elements such as code in arbitrary programming languages, raw data,
links to external resources, project management data, working notes,
and text for publication. Code fragments may be executed in situ with
graphical, numerical and text output captured or linked in the
file. Export to LaTeX, HTML, LaTeX Beamer, DocBook and other formats
permits working reports, presentations and manuscripts for publication
to be generated from the file. In addition, functioning pure code
files can be automatically extracted from the file. This environment
is implemented as an extension to the Emacs text editor and provides a
rich set of features for authoring both prose and code, as well as
sophisticated project management capabilities. The practicality and
usability of this environment is evinced by its large and increasing
user base including both researchers and software developers.

The source for this document is a plain text org-mode document. The
embedded source code is evaluated, and the pdf is created by opening
the source document in Emacs and executing the function
`org-export-as-pdf'.

The technology described in this paper already exists in a mature
form, is included as part of GNU Emacs, and is fully described at the
following locations:
- http://orgmode.org/
- http://orgmode.org/manual/index.html
- http://orgmode.org/manual/Working-With-Source-Code.html

** Capabilities
As a technology for reproducible academic research via executable
papers, Org-mode solves the following problems, posed on the Elsevier
Executable Paper Grand Challenge Website
(http://www.executablepapers.com/about-challenge.html):

*** Executability
    #+begin_quote
    How to make equations, tables and graphs interactive in such a way
    that reviewers and readers can check, manipulate and explore the
    result space? How to make the components of the experiment that
    generates these elements available to the reader so the experiment
    can be repeated and manipulated?
    #+end_quote

    Over the last two years, precisely these features have been added
    to Org-mode (which was originally a document authoring, note-taking
    and project-management environment). See
    - http://orgmode.org/manual/Working-With-Source-Code.html
    - http://orgmode.org/worg/org-contrib/babel/

*** Short and long-term compatibility
    #+begin_quote
    How can we develop a model for executable files that is compatible
    with the user’s operating system and architecture and adaptable to
    future systems?
    #+end_quote

    Org-mode files are plain text, the optimum solution for long-term
    compatibility. The Org-mode software is an extension to Emacs, which
    is one of the most widely ported pieces of software ever developed.
    
*** Validation
    #+begin_quote
    How do we validate data and code, and decrease the reviewer’s
    workload? How can validation of this information be made easy for
    the reviewer?
    #+end_quote

    Both data and executable source code may be embedded in Org-mode
    documents in special blocks offset using a natural plain text
    syntax.  These blocks can be accessed programatically, and a
    number of functions are provided for evaluating all or part of the
    source code embedded in an Org-mode document.

    Using this syntax Org-mode provides for all code and data used in
    the generation of results, figures and tables to be packaged as
    part of the distributed work of research, enabling readers to
    re-run all computation/analysis presented in the paper and to
    inspect the source code and mathematical analysis responsible for
    the results.

    Importantly Org-mode is open-source under the GNU General Public
    License and its copyright is owned by the Free Software Foundation
    ensuring that every aspect Org-mode's evaluation system will
    remain open for inspection and verification.

*** Copyright/licensing
    Org-mode is Free and Open Source software. As long as a clear
    distinction exists between what is a client project, and what is
    Org-mode, there are no restrictions on the patent and IP protection
    of the client project.

*** Systems
    #+begin_quote
    How do we convey work done on large-scale computers, which are
    possibly only available to a small portion of the author/reader
    community?
    #+end_quote

    The computations defined in the executable paper may be executed on
    the local machine, or on any machine which can be accessed over the
    network. The results of remote computations are retrieved over the
    network and stored in the local document as normal. See

    - http://orgmode.org/org.html#dir

*** Size
    #+begin_quote
    Data for the executable paper may be maintained in the plain text
    Org-mode document itself, or alternatively may be maintained in
    dedicated external data stores.
    #+end_quote

*** Provenance
    #+begin_quote
    How to support registering and tracking of actions
    taken on the ‘executable paper?’
    #+end_quote

    In addition to its facilities for reproducible research, Org-mode
    already provides an extremely sophisticated task-management
    framework. Indeed, that was its primary purpose. See
    - http://orgmode.org/manual/TODO-Items.html
    - http://orgmode.org/manual/Dates-and-Times.html
    - http://orgmode.org/manual/Agenda-Views.html

    The project-management features are written in Emacs-lisp and may be
    extended and customized arbitrarily by means of additional
    Emacs-lisp.

** Design of Org-mode
At the core of Org-mode is the Emacs text editor and Emacs Lisp, a
dialect of Lisp that supports the editing of text documents. The Emacs
editor has been under development since the mid 1970s and is currently
at version 23.  Org-mode extends Emacs with a simple and powerful
markup language that turns it into a language for creating, parsing,
and interacting with hierarchically-organized text documents.  Its
rich feature set includes text structuring, project management, and a
publishing system that can export to a variety of formats.  Source
code and data are located in active blocks, distinct from text
sections, where "active" here means that code and data blocks can be
/evaluated/ to return their contents or their computational results.
The results of code block evaluation can be written to a named data
block in the document, where it can be referred to by other code
blocks, any one of which can be written in a different computing
language.  In this way, an Org-mode buffer becomes a place where
different computer languages communicate with one another.  Like
Emacs, Org-mode is extensible: support for new languages can be added
by the user in a modular fashion through the definition of a small
number of Emacs Lisp functions.

** Example: Reproducible research --- live climate data
To illustrate the use of Org-mode for reproducible academic research,
we include the following example of performing analysis of climate data.

By referencing external data, a work of Reproducible Research can
remain up-to-date long after its initial composition and publication.
This example demonstrates the ability of code blocks in an Org-mode
document to reference external data, to construct and use local stores
of data outside the document, and to maintain persistent state in
external sessions, all in an automated fashion. This allows each
reader to recreate the document with up-to-date data, and to
populate a full local workspace with the data used in the document.

This example references climate change data from the US National
Oceanic and Atmospheric Administration (NOAA). The data set is
relatively large (hundreds of thousands of rows). Accordingly, this
example demonstrates a particular style of working with executable
code blocks in Org-mode: instead of transferring large amounts of data
between blocks via Org-mode tables and Emacs Lisp, we use temporary
plain text files on disk and a dedicated external database. The
example is implemented with command-line tools commonly available on
Unix-like systems, the sqlite database, and R. These software tools
were chosen to illustrate the use of popular data processing tools
from within Org-mode.

The first two code blocks fetch and parse data from NOAA using
standard command-line tools.

#+source: raw-temps
#+headers: :results output :file raw-temps.csv
#+begin_src sh :exports code
  curl ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/v2/v2.mean_adj.Z \
      |gunzip \
      |perl -pe 's/-9999/ NA/g' \
      |perl -pe 's/^([0-9]{3})([0-9]{8})([0-9])/$1 $2 $3 /' \
      |perl -pe 's/ +/,/g'
#+end_src

#+source: country-codes
#+headers: :results output :file country-codes.csv
#+begin_src sh :exports code
  curl ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/v2/v2.slp.country.codes \
      |perl -pe 's/ *$//' \
      |perl -pe 's/ +/,/'
#+end_src

Next, the output of the first two blocks is used to create a local
database of the combined climate data.  In the case of very large data
sets it may be preferable to use an external store like a database
rather than storing the data as plain text in the Org-mode buffer.

#+headers: :var raw-temps-file=raw-temps :var codes-file=country-codes
#+begin_src sqlite :db climate.sqlite :exports code :results silent
  drop table if exists temps;
  create table temps (country,station,replicate,year,jan,feb,
         mar,apr,may,jun,jul,aug,sep,oct,nov,dec);
  drop table if exists countries;
  create table countries (code, name);
  .separator ","
  .import $raw-temps-file temps
  .import $codes-file countries
#+end_src

The =R-init= code block reads a subset of the data from the sqlite
database and splits the data into a separate time series for each
weather station, in an ESS R session named =*R-climate*=. The
variables persist in the =*R-climate*= session after the code block
exits, so they can be manipulated by other R code blocks that use the
=*R-climate*= session.

#+source: R-init
#+headers: :var dbname="climate.sqlite"
#+begin_src R :session *R-climate* :exports code :results silent
    library("RSQLite")
    con <- dbConnect(dbDriver("SQLite"), dbname=dbname)
    query <- paste("SELECT temps.station, temps.year, temps.jul", 
                   "FROM temps, countries",
                   "WHERE countries.code=temps.country",
                   "AND countries.name='UNITED STATES OF AMERICA'",
                   "AND temps.replicate='0'",
                   "ORDER BY year;")
    temps <- dbGetQuery(con, query)
    temps$year <- as.integer(temps$year)
    temps$jul <- as.numeric(temps$jul)/10
    temps.by.station <- split(temps, temps$station, drop=TRUE)
#+end_src

Finally the persistent variables in the =*R-climate*= session are used
to generate figures from the climate data. Here we fit a straight line
to the July temperatures at each station which has measurements
spanning the period 1880-1980, and plot a histogram of the fitted
slope parameters. The figure is written to a pdf file for
incorporation into the exported document.

#+srcname: R-graph
#+headers: :results graphics :file temp-trends.pdf
#+begin_src R :session *R-climate* :exports both
  include.station <- function(station)
      station$year[1] <= 1880 && station$year[nrow(station)] >= 1980
  fit.slope <- function(station)
      with(station, coefficients(lm(jul ~ year))["year"])
  included <- sapply(temps.by.station, include.station)
  slopes <- sapply(temps.by.station[included], fit.slope)
  hist(slopes)
#+end_src

#+Caption: Temperature trends between 1880 and the present at weather stations in the USA. \label{fig:climate-trend}
#+ATTR_LaTeX: width=0.6\linewidth placement={t!}
#+results: R-graph
[[file:temp-trends.pdf]]

** Discussion

Org-mode has several features that make it a potentially useful tool
for a community of researchers and developers.  These include:

- Open source :: Org-mode is open source software.  Its inner workings
     are publicly visible, and its copyright is owned by the Free
     Software Foundation fsf.  This ensures that Org-mode and any work
     deriving from Org-mode will always be fully open to public
     scrutiny and modification.  These are essential qualities for
     software tools used for reproducible research.  The transparency
     required for computational results to be accepted by the
     scientific community can only be achieved when the workings of
     each tool in the scientist's tool chain is open to inspection and
     verification.

- Widely available :: Software used in reproducible research should be
     readily available and easily installed by readers.  Org-mode is
     freely available and, as of the next major release of Emacs
     (version 24), Org-mode including all of the facilities discussed
     herein will be included in the Emacs core.  Emacs is one of the
     most widely ported software applications, making possible the
     installation and use of Org-mode on a wide variety of user
     systems.

- Active community :: The Org-mode community provides ready
     support to both novice users with basic questions and to
     developers seeking to extend Org-mode.  The development of
     Org-mode would not have been possible without the attention and
     effort of this community.

- General and extensible :: A main design goal of Org-mode's support
     for working with source code was generality.  As a result, it
     displays no reproducible research or literate programming bias,
     supports arbitrary programming languages, and exports to a wide
     variety of file types, including ASCII, LaTeX, HTML, and DocBook.
     Researchers and software developers who adopt Org-mode can be
     confident that it will be able to adapt to new languages or modes
     of development.

- Integration :: Org-mode leverages the sophisticated editing modes
     available in Emacs for both natural and computational languages.


Literate programming and reproducible research systems are typically
prescriptive and difficult to use, and this cost of adoption has kept
them from spreading more widely through the computing community.
Org-mode enables users to progress gradually from simple text editing
to sophisticated data processing and code evaluation, thereby lowering
the adoption cost of these techniques.  By consolidating all code,
data, and text of research and development projects, Org-mode increases
the likelihood of their retention.  We believe that with its ease of
adoption, familiar environment, and universal applicability across
programming languages, Org-mode represents a qualitative advance in
literate programming and reproducible research tools.

Org-mode has the potential to advance the expectation that all
computational projects include /both/ code and prose; the arguments
that Knuth advanced in the early 1980s for literate programming are no
less valid today, and the pervasive use of computational tools in
scientific research makes reproducible research practices essential to
the peer review process.  Org-mode provides researchers and software
developers with a powerful tool to communicate their work and make it
more accessible.

#+begin_LaTeX
    \bibliography{babel}
#+end_LaTeX
