#+TITLE: Org-babel /DRAFT/
#+OPTIONS: ^:nil toc:nil num:nil
#+STARTUP: oddeven hideblocks
#+begin_latex 
\definecolor{strings}{RGB}{60,179,113}
\lstset{
  keywordstyle=\color{blue},
  commentstyle=\color{red},
  stringstyle=\color{strings}
}
\hypersetup{
  linkcolor=blue,
  pdfborder={0 0 0 0}
}
#+end_latex

#+LaTeX: \begin{abstract}
We present a new computing environment for the authoring of both prose
and source code. In this environment a single hierarchically-organized
plain text source file may contain a variety of elements such as
source code in arbitrary programming languages, raw data, links to
images and other files, project management data, working notes, and
text for publication. Source code fragments may be executed in situ
with graphical and text output captured in, or linked to from, the
source file. Export to LaTeX, HTML, Beamer and other formats permits
working reports, presentations and manuscripts for publication to be
generated from the source file. In addition, source code extraction
(tangling) permits functioning pure code files to be extracted from
the file. This framework is implemented as an extension to the Emacs
text editor and provides a very rich set of features for working with
the source file, including natural environments for authoring both
prose and code, as well as sophisticated project management
capabilities.
#+LaTeX: \end{abstract}

* Introduction
In this paper we present Org-babel -- a tool for /computational
communication/.  First explicit definition of some terms which will be
used below.
- code (or source code) :: will refer to the text written in a
     programming language intended for use by a computer.
- prose :: will refer to text written in a natural language
     (e.g. English) intended for use by a person.
- computational communication :: will refer to communication in which
     the subject is computational objects or results.  This type of
     communication is unique in that it must consist of mutually
     supportive sections of both prose and code.  Computational
     communication takes place between people, people and computers,
     or the same person at different points in time.

There are a variety of setting in which successful computation
communication is paramount
- *Scientific research* increasingly involves the use of computational
  tools the inclusion of which is vital to successful conveyance of
  and verification of research results.
- In collaborative *software development* the exchange of ideas is
  accomplished through shared code and prose, with the former
  providing for concrete succinct demonstration, and the later higher
  level explanation.
- Without proper *documentation* the usability and future
  extensibility of computational tools is severely compromised.
- In *pedagogical* environments it is important for descriptions of
  algorithms or techniques to go hand-in-hand with concrete
  implementations.

In all of the situations described above prose alone in the absence of
access to code is insufficient as it is
#+begin_quote
[natural language is] not conducive to succinct, exact expression and
the audience is separated from the actions and details of the
algorithm and often forced to make assumptions about the precise
computational details

-- Robert Gentleman and Duncan Temple Lang
#+end_quote

Similarly distribution of code without expository prose is not a
sufficient medium for communication between people.
#+begin_quote 
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.
  
-- Donald Knuth
#+end_quote

Portions of the /computational communication/ problem have been
identified and addressed under a variety of names such as Literate
Programming~\cite{web} which adds prose to the source code
implementing software projects, or Reproducible
Research~\cite{compendium} which adds executable code to the
publications focused on computational results or analysis.  Org-babel
provides a unified environment supporting all manner of the authoring
and use of combined prose and code.

|       | prose                        | code                            |
|-------+------------------------------+---------------------------------|
| write | natural document authoring   | natural code authoring through  |
|       | environment through Org-mode | Emacs major modes               |
|-------+------------------------------+---------------------------------|
| use   | automated publishing to      | in-situ interactive execution   |
|       | a variety of document        | as well as the tangling of code |
|       | and slideshow formats        | for external use                |
|-------+------------------------------+---------------------------------|

Org-babel provides a consistent environment in which the entire life
cycle of a research or development project can take place.  With the
data, code and text of a project stored in a single location which can
be exported to a variety of formats the future reproducibility of the
work is ensured, and the practices of Reproducible Research and
Literate Programming are encouraged by greatly reducing the burden on
the author.

The name "Org-babel" is a pair of literary references indicating both
the nature of the problem in the "Tower of Babel"
#+begin_quote Genesis-11
The LORD said, “If as one people speaking the same language they have
begun to do this, then nothing they plan to do will be impossible for
them.  Come, let us go down and confuse their language so they will
not understand each other.”
#+end_quote
and the solution in the "Babel Fish".
#+begin_quote The-Hitchhiker's-Guide-to-the-Galaxy
The Babel Fish is small, yellow, and simultaneously translates from
one spoken language to another
#+end_quote

In the remainder of this paper

* Background
** Existing Tools
Each of the tools listed below addresses a particular view of
requirement for unified authoring and publication of code and prose.

*** Web
Literate Programming~\cite{web} is the practice of writing computer
programs in such a way that the main objective is to explain to a
human reader what the program is intended to do.  Literate programming
consists of embedding code inside of a prose document written in the
TeX document authoring syntax.  Programs written in this manner can be
- tangled :: resulting in a code file suitable for use by a computer
- woven :: resulting in a text document suitable for use by a person

The Web family of tools enables Literate Programming.  The initial
=WEB= tool only worked with the Pascal programming language.  Newer
versions such as =Noweb= can handle arbitrary programming languages.
Web tools enable the /authoring/ of both prose and code, but provide
no facilities for the execution of code from within documents.

*** Automatic Documentation (Comment Extraction)
Comment extraction tools are a lighter weight alternative to literate
programming.  Comment extraction tools can be used to extract
documentation from comments embedded in pure code documents.  Most
major modern programming languages are supported by a comment
extraction tool.

Although comment-extraction is much less flexible than literate
programming it is much more widely used.  This is largely due to the
fact that it requires no changes to the programmers editing
environment and can be used directly from inside of source code files.

*** Sweave
Like Web documents Sweave documents consist of code embedded into TeX
documents~\cite{sweave}.  Sweave only supports the R statistical
programming language.  The code in Sweave documents is executed during
publishing the output of which can be used as figures or data in the
report.  As such Sweave enables "dynamic reports" which can be updated
automatically if the data or analysis change.

*** Field
Field [fn:: http://openendedgroup.com/field/] is a text editor based
on research started at the MIT media lab [fn::
http://www.media.mit.edu/].  Field allows code from multiple
programming languages to be intermingled in the same document.  These
code snippets can then share data between themselves.

Currently Field does not support exporting to human-readable
documents, and Field only supports languages which run on the JVM.

** Compendium

* Org-babel
Org-babel extends Org-mode [fn:: http://orgmode.org] a Major mode of
the Emacs text editor [fn:: http://www.gnu.org/software/emacs/] with
the ability to execute and selectively export embedded source code
blocks.  The results of code execution -- text, tables and graphics --
can be used as input to other source code blocks or integrated into
the powerful publishing facilities of Org-mode.

Org-babel provides a single environment supporting
- prose document authoring -- with export to HTML, LaTeX, plain text,
  and LaTeX beamer
- the authoring of source code
- the interactive and automatic execution of source code with control
  over the flow of data into and out of the source code blocks
- the storage and analysis of raw data in both spreadsheet and
  notebook fashion
- sophisticated organizational and task management facilities

The core of Org-babel is language agnostic and can easily be extended
to provide support for new programming languages.  Org-babel currently
supports over 20 programming languages.

The majority of the features above are provided directly by the
Org-mode project which Org-babel extends.  As such the following
description of Org-babel will begin with a description of Org-mode.

** Org-mode
Thank you Carsten!

- readable markup language
- export targets (html, latex, beamer, ascii)
- project/task management
- editable source code
- spreadsheets
- more?

** Design and Implementation
*** org-mode
- parsimonious markup
- multi-target export
- in-document spreadsheet
- blocks

*** document as execution environment
- extension of the spreadsheet idea
- activates data in
  - tables
  - blocks

*** functional code blocks
in-document blocks of code
- are callable
- accept arguments
- execute in environment of the document
- results can be inserted into document

*** block organization
- noweb references
- can call other code blocks -- chaining

*** export
- tangling
- actions on export

*** language support
- currently supports over 20 languages
- number of supported languages are growing, and it's easy enough to
  add new ones that most language support at this point is user
  submitted

** Applications and Examples
- simple example with multi-language block chaining and producing a
  figure
- example with tangling
- pointer to foo.Rnw and foo.org
- look at uses for some more ideas

* Discussion and Conclusion
Given the comfortable environment of Emacs and Org-mode, Org-babel
provides an environment for the co-mingling of code, data, and prose
in such a way that a critical mas has been reached -- "It's actually
comfortable enough for real people to want to use it to do real
work!".

As such we believe it is a great step forward for the RR and LP camps,
and has the potential to significantly increase the widespread
acceptance of these approaches to doing scientific work and
development.  It is the authors ultimate hope that this work will
ultimately help to increase communication and help developers and
scientists to make their work more accessible.

#+begin_LaTeX
  \bibliographystyle{abbrv}
  \small
  \bibliography{babel}
#+end_LaTeX
