# -*- mode: org, org-export-latex-listings: t org-export-latex-image-default-option: "width=0.4\\textwidth" -*-
#+TITLE: Babel /DRAFT/
#+AUTHOR: Eric Schulte \and Dan Davison \and Carsten Dominik \and Thomas Dye
#+OPTIONS: ^:nil toc:nil H:4
#+STARTUP: oddeven
#+STYLE: <link rel="stylesheet" href="http://cs.unm.edu/~eschulte/classes/emacs.css" type="text/css"/>  
#+LATEX_HEADER: \usepackage{attrib}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usepackage{listings}
#+LaTeX_CLASS: twocolumn
#+begin_latex
  \lstdefinelanguage{org}
  {
    morekeywords={:results, :session, :var, :noweb, :exports},
    sensitive=false,
    morecomment=[l]{\#},
    morestring=[b]",
  }
  \lstdefinelanguage{dot}
  {
    morekeywords={graph},
    sensitive=false,
  }
  \hypersetup{
    linkcolor=blue,
    pdfborder={0 0 0 0}
  }
  \renewcommand\t[1]{{\tt #1}}
  \newcommand\ATCES{{\sf atce/r}}
  \newcommand\lt[1]{{\lstinline+#1+}}
  \definecolor{dkgreen}{rgb}{0,0.5,0}
  \definecolor{dkred}{rgb}{0.5,0,0}
  \definecolor{gray}{rgb}{0.5,0.5,0.5}
  \lstset{basicstyle=\ttfamily\bfseries\scriptsize,
    morekeywords={virtualinvoke,fucompp,fnstsw,fldl,fstpl,movl},
    keywordstyle=\color{blue},
    ndkeywordstyle=\color{red},
    commentstyle=\color{dkred},
    stringstyle=\color{dkgreen},
    numbers=left,
    numberstyle=\ttfamily\footnotesize\color{gray},
    stepnumber=1,
    numbersep=10pt,
    backgroundcolor=\color{white},
    tabsize=4,
    showspaces=false,
    showstringspaces=false,
    xleftmargin=.23in
  }
#+end_latex

#+LaTeX: \begin{abstract}
We present a new computing environment for authoring mixed natural and
computer language documents. In this environment a single
hierarchically-organized plain text source file may contain a variety
of elements such as code in arbitrary programming languages, raw data,
links to external resources, project management data, working notes,
and text for publication. Code fragments may be executed in situ with
graphical, numerical and text output captured in, or linked to, the file. Export
to LaTeX, HTML, LaTeX Beamer, DocBook and other formats permits working
reports, presentations and manuscripts for publication to be generated
from the file. In addition, code extraction (tangling) permits
functioning pure code files to be extracted from the file. This
environment is implemented as an extension to the Emacs text editor
and provides a rich set of features for authoring both prose and code,
as well as sophisticated project management capabilities.
#+LaTeX: \end{abstract}

* Introduction
There are a variety of settings in which it is desirable to mix prose
and code in a single container.
- /Scientific research/ increasingly involves the use of computational
  tools. Successful communication and verification of research results
  requires that this code is distributed together with results and
  explanatory prose.
- In /software development/ the exchange of ideas is accomplished
  through both shared code and prose; code provides 
  concrete and succinct description and prose provides higher level
  explanation.  Without proper documentation the usability and future
  extensibility of computational tools are severely compromised.
- In /pedagogical/ environments it is important for descriptions of
  algorithms or techniques to go hand-in-hand with concrete
  implementations.  These environments range from in-class
  presentations with accompanying algorithmic implementations, to
  online tutorials or experiential blogs with accompanying
  instructions.

In each of the situations described above, prose alone in the absence of
code is typically insufficient.  Similarly, distribution of code
without expository prose is a less than ideal medium for communication
between people. In this paper we describe Babel, which provides a
unified environment that supports many different approaches to
composition and application of combined prose and code (Table
\ref{grid}).  Babel is implemented as part of the Org-mode plain text
markup language, which provides the high level structure of Babel
documents.  Babel and Org-mode are 
designed for ease of use and adoption.  The Babel environment aims to
be a general solution for authoring projects with mixed computational
and natural languages.  It supports multiple languages, export
targets, and work flows.

#+LaTeX: \begin{table*}
#+ATTR_LaTeX: align=r|c|c|
|             | prose                   | code                            |
|-------------+-------------------------+---------------------------------|
|             | natural document        | natural code authoring          |
| composition | authoring environment   | through Emacs                   |
|             | through Org-mode        | major modes                     |
|-------------+-------------------------+---------------------------------|
|             | automated publishing to | in-situ interactive execution   |
| application | a variety of document   | as well as the tangling of code |
|             | and slideshow formats   | for external use                |
|-------------+-------------------------+---------------------------------|
#+LaTeX: \caption{Babel enables both the application and composition of code and prose.}
#+LaTeX: \label{grid}
#+LaTeX: \end{table*}

# With Babel the entire life cycle of a research or development
# project can take place within a single document.  With the data,
# code and text of a project stored in a single location which can be
# exported to a variety of formats, the future reproducibility of the
# work is ensured, and the practices of Reproducible Research and
# Literate Programming are encouraged by greatly reducing the burden
# on the author.
# 
# I didn't quite understand the last part of the preceding sentence (Dan)
Here we review existing approaches to the combined authoring of prose
and code, including software tools designed to address one or more of
the use cases for mixed natural and computer language documents
(Section \ref{background}).  We then describe the design of Babel
(Section \ref{design}) and Org-mode (Section \ref{org-mode}), and
# This is the first mention of "Org-mode". Needs some prior
# introductory sentence.
demonstrate their usage through two short examples (Section
\ref{examples}).  We conclude with a discussion of why we believe
Babel constitutes a uniquely productive environment for authoring
mixed prose and code projects (Section \ref{points-for}), as well as
some limits of the current implementation and directions for future
work (Section \ref{future-work}).

* Background
  :PROPERTIES:
  :CUSTOM_ID: background
  :END:
The combined authoring of prose and code has historically been
approached from two different standpoints.

- Literate Programming :: enhances traditional software development by
     embedding code in explanatory essays and encourages treating the
     act of development as one of communication with future
     maintainers.

- Reproducible Research :: embeds executable code in publications of
     scholarly work, with the aim of allowing the analysis described
     in the paper to be re-run by readers.

We discuss each of these approaches in turn including a review of
existing software tools that support each technique.

** Literate Programming
#+begin_quote
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.

\attrib{Donald E. Knuth}
#+end_quote

The technique of /literate programming/ was introduced by Donald Knuth
\cite{web} in the early 1980's, not long after he created the TeX
typesetting software.  The goals of literate programming are to
encourage the author of a computational work to approach the project
"as an essayist, whose main concern is with exposition and excellence
of style." 
# need citation with page number

Accordingly, the input files for literate programming tools mix
sections of computer code with sections of natural language typically
marked up in TeX or LaTeX.  The literate programming tool
provides methods to create two types of /view/ into the document;
articles of typset prose and marked-up code blocks intended for human
consumption, and computer readable documents of pure source code.  The
literate programming terms for generating these views are /weaving/
and /tangling/, respectively.  A common feature of literate programming
tools is the ability to organize code blocks differently when
/tangling/ and /weaving/, thereby allowing the programmer to introduce
material to humans in a different order than code is introduced to the
computer.

The original literate programming tool, developed by Knuth, was =WEB=,
which consists of two primary programs, =TANGLE= and =WEAVE=
\cite{web}.  This system supported the Pascal programming language and
produced documents typeset with TeX.  Somewhat later, Knuth and Silvio
Levy produced a C language version, =cWeb=
\cite{knuth94:_cweb_system_struc_docum}.  A modern descendent of these
tools is =noweb= \cite{noweb} which is designed to be language
independent.  Its primary programs, =notangle= and =noweave=, are both
written in =C=.  Documents produced by =noweave= can be typeset with
=TeX=, =LaTeX=, and =troff= or displayed in a web browser as =HTML=.
Software tools such as =WEB=, =cWeb=, and =noweb= enable the
/authoring/ of both prose and code, but do not provide facilities for
the execution of code from within documents.  Instead, code intended
for execution is tangled and the resulting source code files are sent
to a compiler or interpreter.

** Reproducible Research
#+begin_quote
An article about computational science in a scientific publication is
*not* the scholarship itself, it is merely *advertising* of the
scholarship.  The actual scholarship is the complete software
development environment and complete set of instructions which
generated the figures.

\attrib{David L. Donoho}
#+end_quote

A research project typically produces one or more documents that
describe or rely upon:
  - a data collection
  - computations and code used in data analysis or simulation
  - methodological conventions and assumptions
  - decisions among alternate analytic paths

The documents produced by a research project typically stand apart
from the things they describe and rely upon, which makes it difficult
for other researchers to understand fully or to reproduce the results
of the research project.
 
A software solution to this problem was proposed by Gentleman and
Temple Lang \cite{compendium}, who "introduce the concept of a
/compendium/ as both a container for the different elements that make
up the document and its computations (i.e. text, code, data, ...), and
as a means for distributing, managing and updating the collection."

They summarize the uses and implications of a compendium:

  - it encapsulates the actual work of the author, not just an
    abridged version suitable for publication; 

  - it can display different levels of detail in /derived documents/; 

  - the computations included in it can be re-run by an interested
    reader, potentially with different inputs;

  - it contains explicit computational details that make it easier for
    an interested reader to adapt and extend the methods;

  - it enables programmatic construction of plots and tables; 

  - its components can be treated as data or inputs to software and
    manipulated programmatically in ways perhaps not envisioned by
    the author.

/Reproducible research/ thus approaches mixed natural and
computational language documents from a different direction than
literate programming.  Rather than adding prose to computational
projects, reproducible research seeks to augment publications of
scientific research with the computer code used during conduct of the
research.  Where literate programming tangles embedded code into an
external file used as input to a compiler or an interpreter, code
embedded in reproducible research is intended to be executed as part
of the document generation process.  In this way the data, analysis,
and figures supporting a publication can be generated from the
publication itself.

# The requirements of a tool supporting reproducible research are
# thoroughly explored by Gentleman and Temple Lang, and presented in the
# concept of a /compendium/ \cite{compendium}.  In their formulation a
# compendium is a container that holds the text, code, and raw data
# constituting a scholarly work.  Compendia are intended to facilitate
# the distribution, management, re-creation, and extension of such
# works.

# A compendium would also support a variety of different /views/, where
# /views/ are static documents automatically generated by /running/ the
# compendium.  Examples of views would be an article submitted for
# publication, or a presentation or lecture based on the work.

Gentleman and Temple Lang propose the adoption of compendia as the
new unit of peer review and distribution of scientific work.

#+begin_quote
The compendium concept, and that of reproducible research, has the
potential to improve the state of publication about computational
science. The tools we have proposed and discussed will allow us to
move from an era of advertisement to one where our scholarship itself
is published. This exposes the computations themselves to the
scientific method and enhances the potential for iterative refinement
and extension.

\attrib{Gentleman and Temple Lang}
#+end_quote

=Sweave= \cite{sweave} is a modern software tool, written in the =R=
statistical programming language \cite{r-software}, that can be used
for reproducible research.  =Sweave= (and the =R= community at large)
inspired the work that led to the /compendium/ idea.  The recent
resurgence in reproducible research owes much to the success of both
=R= and =Sweave=.  =Sweave= documents consist of code blocks of the
=R= statistical programming language embedded into LaTeX documents.
The =R= functions that make up =Sweave= execute the embedded =R= code
and produce a LaTeX document that includes the resulting tables,
graphical figures, and inline results.  If the =Sweave= document is
accompanied by the data files used in the statistical computations
along with any =R= language files that are sourced, then the reader
can trace a result back to the relevant =R= computations and through
to the original data.

# It might be useful to start this section with Lisp and how bottom-up
# programming changes the language to suit the problem.  So emacs
# turned lisp into a language for writing editors, org-mode turned it
# into a language for parsing hierarchical documents, etc., and babel
# turned it into a language for literate programming and reproducible
# research. (no attempt to be precise or exhaustive here).
* Design
  :PROPERTIES:
  :CUSTOM_ID: design
  :END:
At the core of Babel is the Emacs text editor \cite{emacs} and Emacs
Lisp \cite{lewis10:_gnu_emacs_lisp_refer_manual}, a dialect of Lisp
that supports editing text documents.  The Emacs editor has been under
development since the mid 1970s and is currently at version 23.
Org-mode extends Emacs with a simple, yet powerful markup language
that turns it into a language for creating and parsing
hierarchically-organized text documents.  It was originally designed
for keeping notes, maintaining task lists, and planning projects.  Its
rich feature set includes text structuring, project management, and a
publishing system that can export to a variety of formats.  Babel
extends Org-mode by activating sections of Org-mode documents,
effectively distinguishing code and data blocks from text sections.
Activation means that code and data blocks can be /evaluated/ to
return their contents or their computational results.  The results of
code block evaluation can be written to a named data block in the
document, where it can be referred to by other code blocks, any one of
which can be written in a different computing language.  In this way,
an Org-mode buffer becomes a place where different computer languages
communicate with one another.  Like Emacs, Babel is extensible:
support for new languages can be added by the user in a modular fashion through
the definition of a small number of Emacs Lisp functions.
Additionaly, generally useful code or data blocks can be added to a
"Library of Babel", from which they can be called by any Org-mode
document.

In the remainder of this section, we first introduce Org-mode,
focusing on those features that support the literate programming and
reproducible research capabilities of Babel (Section \ref{org-mode}).
We then describe the syntax of code and data blocks (Section
\ref{syntax}), evaluation of code blocks (Section \ref{code-blocks}),
weaving and tangling Org-mode documents (Section \ref{export}), and
Babel's language support facilities (Section \ref{languages}).

** Org-mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

Org-mode is an Emacs extension that organizes note taking, task
management, project planning, documentation and authoring.  Its name
comes from its organizing function and the fact that extensions to
Emacs are often called /modes/.  A mode in Emacs defines the way a
user can edit and interact with certain documents.  Org-mode documents
are plain text files, usually with the file name extension /.org/.
Because Emacs has been ported to a large number of operating systems
Org-mode can be run on a wide variety of devices and its plain text
documents are compatible between arbitrary platforms.

*** Document Structure

The fundamental structure of Org-mode documents is the outline,
conceptualized as a hierarchically ordered series of nodes.  A
document can have a section of text before the first node.  This
section is often used for defining general properties of the document
like a title, and for technical setup.  The first top-level node then
starts an outline structure that extends to the end of the document.
Nodes in the outline are single line headings identified by one or more
asterisks at the beginning of the line.  The number of asterisks
indicates the hierarchical level of the node, e.g.,

#+begin_src org
  ,* First heading
  ,    Some arbitrary text
  ,* Second heading
  ,** A subsection of the second heading
  ,* Third heading
#+end_src

Each heading line, or headline, can be followed by arbitrary text,
giving the document the logical structure of a book or article.  The
hierarchical outline structure can be folded at every node, making it
possible to expose selected sections for quick access or to provide a
structural overview of the document at any level of structure.

*** Metadata on Nodes

One of the primary design goals of Org-mode was to define a system
that combines efficient note-taking and brainstorming with a task
management and project planning system.  A single Org-mode document
can hold both notes and all data necessary to keep track of tasks and
projects associated with the notes.  This is accomplished by assigning
meta-data to outline nodes using a special syntax.  Meta-data for a
node can include a task state, like TODO or DONE, a priority, and one
or more tags, dates, and arbitrary key-value pairs called properties.
In the following example a top-level node is a task with a "to do"
state, a priority of A, and tagged for urgent attention at work.  The
task has been scheduled for August 18th and a property indicates that
it was delegated to Peter.

#+begin_src org :exports code
  ,* TODO [#A] Some task         :@work:urgent:
  ,  SCHEDULED: <2010-08-18 Wed>
  ,  :PROPERTIES:
  ,    :delegated_to: Peter 
  ,  :END:
#+end_src

The task and project management functionality of Org-mode is centered
around the metadata associated with nodes.  Org-mode provides
facilities to create and modify metadata quickly and efficiently.  It
also provides facilities to search, sort, and filter headlines, to
display tabular views of selected headlines, to clock in and out of headlines
defined as tasks, and many other tools.

The outline structure of documents also defines a hierarchy of
metadata.  Tags and properties of a node are inherited by its
sub-nodes and views of the document can be designed that sum or
average the properties inherited by a node.  Code blocks defined and
used by Babel live in this hierarchy of content and metadata, all of which
is accessible to and can be modified by it.

*** Special Document Content

The text following a headline in an Org-mode document can
be structured to represent various types of information,
including vectors, matrices, source code, and arbitrary pieces of
text.  Vector and matrix data are represented as tables where the
columns are marked by vertical bars and rows are optionally separated
by dashed lines as shown in the following example.  The Emacs
calculator, /calc/ ([[David Gillespie 1990,
http://www.gnu.org/software/emacs/calc.html]]), can be used to carry out
computations in tables.  This feature is similar to spreadsheet
applications, but Org-mode uses plain text to represent both data and
formulas.  Babel makes extensive use of Org-mode tables.

#+begin_src org
  ,| Name 1 | Name 2 | ... | Name N |
  ,|--------+--------+-----+--------|
  ,| Value  | ...    | ... | ...    |
  ,| ...    | ...    | ... | ...    |
#+end_src

Source code blocks were added to Org-mode as an aid to creating
technical documentation.  Originally, their sole purpose was to set
verbatim, mono-spaced type when publishing to PDF or HTML.  Code
blocks are marked with either a =#+BEGIN_EXAMPLE ... #+END_EXAMPLE=
pair, or with a =#+BEGIN_SRC ... #+END_SRC= pair.  The latter form
can leverage Emacs source code editing modes to indent and
fontify code examples.  Additional markup is provided with wiki-like
syntax, which can be applied to any piece of text.

** Code and Data Block Extensions
    :PROPERTIES:
    :CUSTOM_ID: code-blocks
    :END:
Babel extends Org-mode with a naming convention that identifies code
or data blocks making them remotely callable.  In addition, the syntax
of Org-mode code blocks is extended to facilitate evaluation.  Babel
writes the results of source code evaluation to the document as
Org-mode constructs, and allows for code and data blocks to interact
through a simple but powerful variable passing system.

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax
    :END:
Babel recognizes Org-mode /tables/, /examples/, and /links/ as data
block content.  Data blocks which are preceded by a line that begins
with =#+results:=, followed by a name unique within the document can
be manipulated by Babel.  All data block types can be named in this
way.
#+begin_src org
  ,#+results: tabular-data
  ,| 1 |  2 |
  ,| 2 |  3 |
  ,| 3 |  5 |
  ,| 4 |  7 |
  ,| 5 | 11 |
  
  ,#+results: scalar-data
  ,: 9
  
  ,#+results: linked-data
  ,[[http://external-data.org]]
#+end_src

Babel marks active code blocks with a =#+srcname:= line, followed by a
name unique within the document.  It also augments Org-mode code
blocks with header aguments that control the way Babel handles
evaluation and export.
#+begin_src org
  ,#+srcname: <name>
  ,#+begin_src <language> <header arguments>
  ,  <body>
  ,#+end_src
#+end_src

*** Evaluation

When a code block is evaluated, the captured output appears by default
in the Org-mode buffer immediately following the code block, e.g.,
#+begin_src org
  ,#+begin_src ruby
  ,  require 'date'
  ,  "This was last evaluated on #{Date.today}"
  ,#+end_src
  
  ,#+results:
  ,: This was last evaluated on 2010-06-25
#+end_src

By default a code block is evaluated in a dedicated system process
which does not persist after evaluation is complete. In addition, for
several languages evaluation may be performed in an interactive
"session" which persists indefinitely. A good example is session-based
evaluation of R code which uses R sessions provided by the Emacs
Speaks Statistics (ESS) project \cite{ess}.  Thus both the Org buffer
and the language-specific session buffers may be used for sharing of
functions and data structures between blocks. ESS successfully
provides a feature-rich environment for development of R code; babel
complements rather than replaces ESS in that code editing and
session-based evaluation in Babel is implemented using ESS.

Adding a =:session= /header argument/ to a block causes Babel to
1) start a persistent process associated with a new Emacs
   buffer;
2) pass the code body to that process; and
3) capture the last value returned by that process.

Session-based evaluation is similar to the approach to evaluation
taken by =Sweave=, in which every code block is evaluated in the same
persistent session.  In Babel, the =:session= header argument takes an
optional name, making it possible to maintain multiple disjoint
sessions.

*** Results
Babel returns the results of code block evaluation as strings,
scalars, Org-mode tables, or Org-mode links.  By default, these are
inserted in the Org-mode buffer as protected text immediately after
the code block.  In practice, the user can control how Babel handles
evaluation results with header arguments.  

At the most basic level, results can be collected from code blocks by
value or as output.  This behavior is controlled by the =:results=
header argument.

- =:results value= :: Specifies that the code block should be treated
     as a function, and the results should be equal to the value of
     the last expression in the block, like the return value of a
     function.  This is the default setting.

- =:results output= :: Specifies that the results should be collected
     from =STDOUT= incrementally, as they are written by the
     application responsible for code execution.

These differences can be demonstrated with the following bit of =perl=
code that yields different results depending on the value of the
=:results= header argument.  Note that the first example uses the
default, =:results value=, and returns a scalar.  In contrast, the
same code yields a string when output is returned.

#+begin_src org
       ,#+begin_src perl
       ,  $x = 8;
       ,  $x = $x + 1;
       ,  print "shouting into the dark!\n";
       ,  $x
       ,#+end_src
       
       ,#+results:
       ,: 9


       ,#+begin_src perl :results output
       ,$x = 8;
       ,$x = $x + 1;
       ,print "shouting into the dark!\n";
       ,$x
       ,#+end_src

       ,#+results:
       ,: shouting into the dark!

#+end_src org

In addition to scalar results, Babel recognizes vector results and
inserts them as tables into the Org-mode buffer as demonstrated in the
following two blocks of Haskell code.

#+begin_src org
  ,#+begin_src haskell
  ,  [1, 2, 3, 4, 5]
  ,#+end_src
  
  ,#+results:
  ,| 1 | 2 | 3 | 4 | 5 |
  
  ,#+begin_src haskell
  ,  zip [1..] (map (\ x -> x + 1) [1, 2, 3])
  ,#+end_src
  
  ,#+results:
  ,| 1 | 2 |
  ,| 2 | 3 |
  ,| 3 | 4 |
#+end_src

When the result of evaluating a code block is a file, such as an
image, the =:file= header argument can be used to provide a path and
name for the file.  Babel saves the results to the named file and
places an Org-mode link to it in the document.  These links are
handled by Org-mode in the usual ways and can be opened from within
the document and included in exports.

Much more information about controlling the evaluation of code and the
handling of code results is available in the Babel documentation.

*** Variables
Babel implements a simple system of passing arguments to code blocks.
The =:var= header argument takes a variable name and a value and
assigns the value to the named variable inside the code block.  Values
can be literal values, such as scalars or strings, references to
named data blocks, Org-mode links, or references to named code blocks.
In addition, arguments can be passed to referenced code blocks using a
traditional function syntax with named arguments.

All values passed to variables are served by the Emacs Lisp
interpreter that is at the core of Emacs.  This argument passing
syntax allows for complex chaining of raw values in a document, and
the results of computations in one computer language can be used as
input to blocks of code in another language, as shown in Section
\ref{examples}.

** Export
    :PROPERTIES:
    :CUSTOM_ID: export
    :END:

Borrowing terms from the Literate Programming community, Babel supports
both /weaving/---the exportation of a mixed code/prose document to a
prose format suitable for reading by a human---and /tangling/--the
exportation of a mixed code/prose document to a pure code file
suitable for execution by a computer.

- weaving :: Org-mode provides a sophisticated and full-featured
     system to export to HTML, LaTeX, and a number of other
     target formats.  Babel adds support for pre-processing code
     blocks as part of the export process.  Using the =:exports=
     header argument, the code of the code block, the results of
     executing the code block, both code and results, or neither can
     be included in the export.

- tangling :: Source code in an Org-mode document can be re-arranged
     on export.  Often, the order in which a computer needs to be
     presented with code differs from the order in which the code may
     be best organized in a document.  Literate programmin systems
     like =noweb= solve this problem using code-block references that
     are expanded as part of the tangle process \cite{noweb}.  Babel
     implements the =noweb= reference system using an identical syntax
     and functionality.

** Language Support
    :PROPERTIES:
    :CUSTOM_ID: languages
    :END:

The core functions of Babel are language agnostic.  The tangling,
source edit, and export features of Babel can be used for any computer
language, even those that are not specifically supported by Babel;
only code evaluation and interaction with live sessions require
language-specific functions.  Support for new languages can be added
by defining a small number of elisp functions named according to
language, following some simple conventions.  Currently, Babel has
support for more than 20 languages.  The ease with which support for
new languages can be added is evidenced by the fact that new language
support is increasingly implemented by Babel users, rather than the
Babel authors.

** Safety Considerations
A reproducible research document, by definition, includes code that
can be evaluated.  This potentially gives malicious hackers direct
access to the reader's computer.  The primary defense in this instance
is for the reader to recognize malicious code and to choose not to run
it.  This can be a difficult task in a reproducible research document
written in a single computer language, such as one written with
Sweave, but the difficulty increases if the document is written in
several computer languages, one or more of which is not understood by
the reader.

Babel has been designed with security measures to protect users from
the accidental or uninformed execution of code.  By default /every/
execution of a code block requires explicit confirmation from the
user.[fn:1]  In addition, it is possible to remove code block evaluation
from the default =C-c C-c= key binding.  This key binding is
ubiquitous in Org-mode, and is typically bound to the function most
likely to be called from a particular context.  An alternative
key binding is present for code block evaluation, namely =C-c C-v
e=.  The three key strokes required for this binding, and the fact
that it is not used elsewhere in Org-mode, provides some degree of
protection against unintended evaluation of code blocks.

* Examples
   :PROPERTIES:
   :CUSTOM_ID: examples
   :END:

TODO: Make it so that all code and results are typeset verbatim, along
with their header arguments and #+begin_src / #+results elements, as
they appear in the Emacs buffer. Show the file link as well as the
graphical output. This TODO applies to the Pascal's Triangle and
Literate Programming examples (the RR example satisfies this
already). (DD)

The following section demonstrates a number of common Babel usage
patterns through short examples.  The first example highlights how
Babel allows data and calculation to flow between tables, code blocks
of multiple languages, and graphical figures.  The second demonstrates
the use of traditional literate programming techniques in Babel.  The
final example demonstrates interaction with external data sources,
including the automated creation and use of local databases from within
Babel documents for long-term persistence of potentially large amounts
of data, and the use of session-based evaluation for short term
persistence of smaller amounts of data.

** Data Flow -- Pascal's Triangle
# I think this is a terrific example (TD)
Pascal's triangle is one name for a geometric arrangement of the
binomial coefficients in a triangle.  The triangle has several
interesting and useful mathematical properties.  This example
constructs and manipulates a Pascal's triangle to illustrate potential
data flows in Babel.  Data are passed from a code block to an Org-mode
table, from an Org-mode table to a code block, from one code block to
another, and from a code block to a graphic figure.  Finally, the
example uses a property of the triangle to test the correctness of the
implementation, using Emacs Lisp code blocks embedded in a tabular
view of the triangle to test whether the property is satisfied.

*** Calculating Pascal's Triangle
The following Emacs Lisp source block calculates and returns the first
five rows of Pascal's triangle.  Babel inserts the value returned by
the Emacs Lisp function into the Org-mode document as a table named
=pascals-triangle=.  This table can be referenced by other code blocks.
#+source: pascals-triangle
#+begin_src emacs-lisp :var n=5 :exports both
  (defun pascals-triangle (n)
    (if (= n 0)
        (list (list 1))
      (let* ((prev-triangle (pascals-triangle
                             (- n 1)))
             (prev-row (car (reverse
                             prev-triangle))))
        (append
         prev-triangle
         (list (map 'list #'+
                    (append prev-row '(0))
                    (append '(0) prev-row)))))))
  
  (pascals-triangle n)
#+end_src

#+Caption: Pascal's Triangle \label{pascals-triangle-tab}
#+results: pascals-triangle
| 1 |   |    |    |   |   |
| 1 | 1 |    |    |   |   |
| 1 | 2 |  1 |    |   |   |
| 1 | 3 |  3 |  1 |   |   |
| 1 | 4 |  6 |  4 | 1 |   |
| 1 | 5 | 10 | 10 | 5 | 1 |

*** Drawing Pascal's Triangle
# I feel like python is more popular than ruby, and would thus be a
# more motivating code for this example block, however I don't know
# *any* python, and after a brief attempted python implementation I
# switched to ruby.

The tabular view of Pascal's triangle can be illustrated using the
=dot= graphing language.  In the following code block the
=pascals-triangle= table (Table \ref{pascals-triangle-tab}) is passed
to a block of code in the =ruby= language through the variable =ps=.
Babel transforms the Org-mode table into a =ruby= array, which the
code block uses to construct strings of =dot= commands.  The strings
of =dot= commands are returned without being inserted into the
Org-mode buffer, as indicated by the =:exports code= header argument.

#+source: ps-to-dot
#+begin_src ruby :var ps=pascals-triangle :exports code
  r_cnt = 0
  c_cnt = 0
  ps.map do |r|
    r_cnt += 1
    c_cnt = 0
    r.select{|x| x.size > 0}.map do |x|
      c_cnt += 1
      # node
      r = ("\t\"#{r_cnt}_#{c_cnt}\" "+
           "[label=\"#{x}\"];")
      # edges
      if (c_cnt > 1)
        r = r+("\"#{r_cnt-1}_#{c_cnt-1}\""+
               "--\"#{r_cnt}_#{c_cnt}\";")
      end
      unless (c_cnt == r_cnt)
        r = r+(" \"#{r_cnt-1}_#{c_cnt}\""+
               "--\"#{r_cnt}_#{c_cnt}\";")
      end
      r
    end.join("\n")
  end.join("\n")
#+end_src

Instead, the value of the output is passed directly into a block of
=dot= code by assigning the name of the =ruby= code block to the
variable =ps-vals=.  Passing the results of one code block to another
in this way is called /chaining/; Babel places no limit on the number
of code blocks that can be chained together.  Evaluation propagates
backwards through chained code blocks.  In this example, the =:file=
header argument causes the code block to save the image resulting from
it's evaluation into a file named =pascals-triangle.pdf=, and inserts
a link to this image into the Org-mode buffer.  This link will then
expand to include the contents of the image upon export -- it is also
possible to view linked images from within an Org-mode buffer.

# This doesn't run for me, I get an empty pdf file (TD)
#
# Fixed I had removed the required :cmdline -Tpdf header argument (Eric)
# Yes, works here, too.  Dot does a nice job.

#+source: ps-to-fig
#+headers: :file pascals-triangle.pdf :cmdline -Tpdf
#+begin_src dot :var ps-vals=ps-to-dot :exports none
  graph {
    $ps-vals
  }
#+end_src

#+results: ps-to-fig
[[file:pascals-triangle.pdf]]

#+begin_src org
  ,#+source: ps-to-fig
  ,#+headers: :file pascals-triangle.pdf :exports none
  ,#+begin_src dot :var ps-vals=ps-to-dot :cmdline -Tpdf
  ,  graph {
  ,    $ps-vals
  ,  }
  ,#+end_src
#+end_src
#+LaTeX: %$

#+Caption: Pascal's Triangle
[[file:pascals-triangle.pdf]]

*** Testing for correctness
Now that Pascal's triangle has been constructed and a graphic
representation prepared, it is worth asking whether the triangle
itself is correct.  Because the sum of successive diagonals of the
triangle yields the Fibonacci series, it is possible to verify that
the triangle is correct.  This can be done in many ways; here, it is
done with a short block of Emacs Lisp code that takes a row of numbers
and a number =n= and returns =pass= if the sum of the numbers in the
row is equal the nth Fibonacci number and returns =fail= otherwise.
With Babel, calls to this code block can be embedded into the tabular
view of Pascal's triangle using spreadsheet style formulas.  When the
spreadsheet is calculated, it returns =pass= for each of the five
diagonals, confirming that the implementation of Pascal's triangle is
correct.

#+source: ps-check
#+begin_src emacs-lisp :var row='(1 2 1) :var n=0
  (defun fib (n)
    (if (<= n 2)
        1
      (+ (fib (- n 1)) (fib (- n 2)))))
  
  (let ((row (if (listp row) row (list row))))
    (if (= (fib n) (reduce #'+ row))
        "pass"
      "fail"))
#+end_src

#+begin_src org
  ,#+Caption: Pascal's Triangle (verified)
  ,#+results: pascals-triangle
  ,| 0 |    1 |    2 |    3 |    4 |    5 |
  ,|---+------+------+------+------+------|
  ,|   | pass | pass | pass | pass | pass |
  ,| 1 |      |      |      |      |      |
  ,| 1 |    1 |      |      |      |      |
  ,| 1 |    2 |    1 |      |      |      |
  ,| 1 |    3 |    3 |    1 |      |      |
  ,| 1 |    4 |    6 |    4 |    1 |      |
  ,| 1 |    5 |   10 |   10 |    5 |    1 |
  ,#+TBLFM: @2$2='(sbe ps-check (row @3$1)...
#+end_src

# I still get these results (TD), not sure why cols 3-5 fail
# I'm running this by placing point in the table and selecting
# Recalculate All from the Tbl/Calculate menu.

# #+Caption: Pascal's Triangle (verified)
#+results: pascals-triangle
| 0 |    1 |    2 |    3 |    4 |    5 |
|---+------+------+------+------+------|
|   | pass | pass | fail | fail | fail |
| 1 |      |      |      |      |      |
| 1 |    1 |      |      |      |      |
| 1 |    2 |    1 |      |      |      |
| 1 |    3 |    3 |    1 |      |      |
| 1 |    4 |    6 |    4 |    1 |      |
| 1 |    5 |   10 |   10 |    5 |    1 |
#+TBLFM: @2$2='(sbe ps-check (row @3$1) (n @-1))::@2$3='(sbe ps-check (row @4$1) (n @-1))::@2$4='(sbe ps-check (row @5$1 @5$3) (n @-1))::@2$5='(sbe ps-check (row @6$1 @5$2) (n @-1))::@2$6='(sbe ps-check (row @7$1 @6$2 @5$3) (n @-1))

** Literate Programming -- Cocktail Sort
Cocktail Sort [fn:2] is a variation of Bubble Sort in which the
direction of array traversal is alternated with each pass.  As a
result of this difference Cocktail Sort is much more efficient than
bubble sort on arrays with small elements located at the end of the
array.

First we define the conditional swapping of adjacent array elements
which are not in sorted order.
#+source: bubble
#+begin_src C
  if ( a[i] > a[i+1] ) {
    int temp = a[i];
    a[i] = a[i+1];
    a[i+1] = temp;
    swapped = 1;
  }
#+end_src

The array is repeatedly traversed in alternating directions swapping
out-of-order elements.  This process continues until no more swaps
have been made and the array is sorted.
#+source: cocktail-sort
#+begin_src C :noweb tangle
  void sort(int *a, unsigned int l)
  {
    int swapped = 0;
    int i;
   
    do {
      for(i=0; i < (l-1); i++) {
        <<bubble>>
      }
      if ( swapped == 0 ) break;
      swapped = 0;
      for(i= l - 2; i >= 0; i--) {
        <<bubble>>
      }
    } while(swapped > 0);
  }  
#+end_src

A =main= method can be used to call this sorting algorithm from the
command line and print the results.
#+source: main
#+begin_src C
  int main(int argc, char *argv[]) {
    int lst[argc-1];
    int i;
    for(i=1;i<argc;i++)
      lst[i-1] = atoi(argv[i]);
    sort(lst, argc-1);
    for(i=1;i<argc;i++)
      printf("%d ", lst[i-1]);
    printf("\n");
  }
#+end_src

One final code block can be used to combine these functions into a
short script which can then be tangled out to the file =cocktail.c=.
#+source: cocktail.c
#+begin_src C :noweb tangle :tangle cocktail.c
  #include <stdio.h>

  <<cocktail-sort>>

  <<main>>
#+end_src

** Reproducible Research -- Live Climate Data
By referencing external data a work of Reproducible Research can
remain up-to-date long after its initial composition and publication.
This example demonstrates the ability of code blocks in a Babel
document to reference external data, to construct and use local stores
of data outside of the Babel document, and to maintain persistent
state in external sessions, all in an automated fashion.  This allows
each reader of the document to automatically update the document to
reflect recent data, and to propagate a full local workspace with the
data used in the document.

This example references climate change data from the US National Oceanic
and Atmospheric Administration (NOAA).

1) The first two code blocks fetch and parse up-to-date external data
   is fetched from the NOAA.

#   #+begin_src org

#+results: url-base
: ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/v2/

#+results: raw-temps-file
: v2.mean_adj.Z

#+source: raw-temps
#+headers: :var base=url-base
#+begin_src sh  :var file=raw-temps-file :cache yes 
 curl $base$file | gunzip | sed 's/-/ /g'| \
   sed 's/^\([0-9]\{3\}\)[0-9]\{9\}/\1 /'| \
   head -n 500
#+end_src

#+results[79a1cd6f66012f8ea3d505d91ec421fc490f2f87]: raw-temps
| 101 | 1856 |  106 |   89 |  115 |  141 |  184 |  198 |  227 |  232 |  202 |  169 |  108 |   89 |
| 101 | 1857 |   53 |   95 |  113 |  134 |  164 |  197 |  216 |  229 |  220 |  168 |  154 |   97 |
| 101 | 1858 |   68 |   98 |  115 |  161 |  171 |  220 |  240 |  245 |  227 |  184 |  144 |  102 |
| 101 | 1859 |   71 |   83 |  104 |  161 | 9999 |  177 |  234 |  222 |  181 |  158 |  103 |   71 |
| 101 | 1860 |   87 |   53 |   84 |  114 |  157 | 9999 |  208 |  204 |  186 |  136 |  104 |   90 |
| 101 | 1861 |   58 |   70 |  112 |  129 |  154 |  197 |  216 |  208 |  179 |  155 |  128 | 9999 |
| 101 | 1862 |   94 |   98 | 9999 |  159 | 9999 |  208 |  231 |  228 |  193 |  161 | 9999 |  119 |
| 101 | 1863 | 9999 |   75 |  105 |  149 |  172 |  226 |  234 |  226 |  189 |  151 |  100 | 9999 |
| 101 | 1864 |   55 |   81 |  128 |  141 |  186 |  227 |  257 |  241 |  208 |  174 |  111 |   76 |
| 101 | 1865 |   94 |   88 | 9999 |  158 |  185 |  208 |  234 |  241 |  214 |  173 |  120 | 9999 |
| 101 | 1866 |   81 |  110 |  112 |  144 |  157 |  203 |  232 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1878 |   75 |   92 |  108 |  159 |  184 |  209 |  234 |  256 |  210 |  177 |  110 |  102 |
| 101 | 1879 |  101 |  102 |  107 |  131 |  147 |  211 |  219 |  225 |  198 |  158 |  113 |   67 |
| 101 | 1880 |   75 |   92 |  111 |  141 |  159 |  200 |  243 |  240 |  208 |  178 |  121 |   96 |
| 101 | 1881 |  112 |  113 |  134 |  148 |  168 |  193 |  244 |  260 |  216 |  168 |  120 |   95 |
| 101 | 1882 |   77 |   97 |  105 |  149 |  182 |  202 |  224 |  226 |  185 |  157 |  127 |   97 |
| 101 | 1883 |   92 |   94 |   98 |  129 |  163 |  194 |  225 |  220 |  203 |  154 |  125 |   80 |
| 101 | 1884 |   74 |  102 |   94 |  114 |  156 |  169 |  223 |  238 |  199 |  139 |  102 |   72 |
| 101 | 1885 |   57 |  121 |  103 |  109 |  163 |  183 |  217 |  242 |  208 |  139 |  101 |   87 |
| 101 | 1886 |   64 |   74 |  109 |  129 |  163 |  184 |  215 |  209 |  200 |  155 |  104 |   77 |
| 101 | 1887 |   62 |   67 |  102 |  119 |  156 |  202 |  233 |  230 |  204 |  121 |  111 |   71 |
| 101 | 1888 |   91 |   76 |  121 |  149 |  168 |  208 |  228 |  220 |  206 |  166 |  133 |  113 |
| 101 | 1889 |   75 |   90 |  105 |  132 |  167 |  199 |  232 |  225 |  202 |  144 |  121 |   78 |
| 101 | 1890 |   92 |   90 |  101 |  129 |  154 |  201 |  207 |  230 |  200 |  157 |  112 |   85 |
| 101 | 1891 |   58 |   79 |  116 |  141 |  170 |  201 |  241 |  230 |  209 |  176 |  137 |  105 |
| 101 | 1892 |   97 |  108 |  121 |  136 |  176 |  219 |  249 |  234 |  215 |  177 |  135 |   97 |
| 101 | 1893 |   78 |  109 |  131 |  156 |  185 |  218 |  237 |  230 |  229 |  180 |  127 |   95 |
| 101 | 1894 |   86 |  102 |  110 |  142 |  160 |  208 |  240 |  250 |  212 |  189 |  149 |   99 |
| 101 | 1895 |   82 |  118 |  113 |  147 |  156 |  202 |  245 |  221 |  223 |  193 |  157 |  118 |
| 101 | 1896 |   93 |  100 |  123 |  121 |  150 |  202 |  252 |  223 |  215 |  152 |  105 |   98 |
| 101 | 1897 |   96 |  106 |  141 |  150 |  168 |  211 |  252 |  248 |  208 |  164 |  147 |  100 |
| 101 | 1898 |  107 |   96 |  109 |  128 |  164 |  202 |  239 |  241 |  211 |  173 |  130 |   90 |
| 101 | 1899 |  109 |  126 |  121 |  152 |  175 |  200 |  232 |  240 |  228 |  204 |  150 |  104 |
| 101 | 1900 |   96 |  135 |  106 |  128 |  161 |  211 |  213 |  225 |  218 |  183 |  113 |   98 |
| 101 | 1901 |   91 |   76 |  111 |  149 |  151 |  230 |  240 |  230 |  211 |  146 |  120 |   85 |
| 101 | 1902 |   86 |  111 |  120 |  150 |  146 |  194 |  244 |  251 |  206 |  155 |  133 |   98 |
| 101 | 1903 |  102 |   98 |  118 |  127 |  156 |  182 |  225 |  235 |  201 |  175 |  116 |   87 |
| 101 | 1904 |   77 |  101 |  105 |  133 |  175 |  205 |  244 |  251 |  194 |  165 |  118 |  106 |
| 101 | 1905 |   75 |   75 |  130 |  150 |  151 |  206 |  225 |  240 |  207 |  154 |  119 |   89 |
| 101 | 1906 |   93 |   77 |  110 |  120 |  155 |  200 |  218 |  231 |  209 |  168 |  123 |   89 |
| 101 | 1907 |   79 |   72 |   99 |  121 |  156 |  208 |  211 |  241 |  199 |  155 |  136 |  114 |
| 101 | 1908 |  100 |   85 |   95 |  114 |  184 |  189 |  226 |  241 |  215 |  171 |  142 |  103 |
| 101 | 1909 |   68 |   77 |  105 |  130 |  145 |  182 |  210 |  229 |  192 |  171 |  125 |  116 |
| 101 | 1910 |   85 |   98 |   98 |  123 |  135 |  191 |  218 |  220 |  185 |  176 |  129 |  104 |
| 101 | 1911 |   68 |   96 |  102 |  116 |  141 |  192 |  233 |  243 |  220 |  171 |  125 |  126 |
| 101 | 1912 |   97 |  129 |  131 |  112 |  174 |  198 |  211 |  221 |  172 |  154 |   97 |   93 |
| 101 | 1913 |  102 |   90 |  115 |  121 |  159 |  194 |  223 |  238 |  199 |  176 |  144 |   97 |
| 101 | 1914 |   74 |  103 |  115 |  151 |  153 |  172 |  214 |  212 |  200 |  156 |  119 |  100 |
| 101 | 1915 |   83 |   89 |  118 |  104 |  161 |  195 |  239 |  236 |  194 |  148 |  125 |  114 |
| 101 | 1916 |   88 |   94 |  108 |  122 |  156 |  184 |  221 |  232 |  186 |  168 |  128 |  109 |
| 101 | 1917 |   82 |   95 |   91 |  108 |  159 |  188 |  222 |  236 |  219 |  157 |  103 |   64 |
| 101 | 1918 |  102 |   85 |   91 |  113 |  152 |  190 |  227 |  225 |  226 |  135 |  116 |  101 |
| 101 | 1919 |   82 |  111 |  112 |  118 |  161 |  184 |  204 |  230 |  201 |  141 |  126 |   92 |
| 101 | 1920 |   94 |  105 |  111 |  143 |  171 |  200 |  237 |  226 |  205 |  159 |  113 |  102 |
| 101 | 1921 |   93 |   99 |  100 |  110 |  150 |  188 |  227 |  222 |  223 |  182 |  117 |   87 |
| 101 | 1922 |   94 |  101 |  114 |  143 |  166 |  190 |  213 |  237 |  183 |  173 |  114 |   88 |
| 101 | 1923 |   64 |  102 |  107 |  120 |  158 |  159 |  236 |  245 |  186 |  186 |  126 |   80 |
| 101 | 1924 |   90 |   83 |  113 |  140 |  195 |  201 |  234 |  221 |  201 |  164 |  131 |   95 |
| 101 | 1925 |   88 |   97 |   79 |  123 |  146 |  194 |  209 |  237 |  190 |  154 |  111 |  109 |
| 101 | 1926 |  103 |  126 |  120 |  132 |  154 |  188 |  225 |  217 |  211 |  203 |  125 |   84 |
| 101 | 1927 |   89 |   95 |  113 |  141 |  163 |  196 |  219 |  238 |  210 |  164 |  129 |  109 |
| 101 | 1928 |   88 |  100 |  118 |  134 |  144 |  200 |  235 |  251 |  215 |  166 |  115 |   88 |
| 101 | 1929 |   77 |   92 |  104 |  137 |  155 |  201 |  221 |  214 |  210 |  160 |  120 |  110 |
| 101 | 1930 |   98 |   79 |  119 |  119 |  155 |  187 |  216 |  224 |  202 |  177 |  148 |  107 |
| 101 | 1931 |   91 |   72 |  128 |  124 |  162 |  222 |  224 |  224 |  183 |  156 |  128 |   80 |
| 101 | 1932 |   89 |   74 |  105 |  120 |  154 | 9999 |  198 |  226 |  205 |  160 |  128 |  110 |
| 101 | 1933 |   84 |   94 |  105 |  140 |  171 |  189 |  216 |  233 |  216 |  186 |  106 |   77 |
| 101 | 1934 |   68 |   81 |   86 |  121 |  152 |  193 |  224 |  214 |  195 |  153 |  112 |  115 |
| 101 | 1935 |   63 |   87 |   95 |  136 |  136 |  201 |  231 |  227 |  209 |  147 |  123 |  103 |
| 101 | 1936 |  116 |  118 |  108 |  132 |  149 |  179 |  219 |  207 |  213 |  138 |  116 |   80 |
| 101 | 1937 |  101 |  110 |  108 |  128 |  150 |  191 |  218 |  223 |  191 |  156 |  144 |   84 |
| 101 | 1938 |   81 |   68 |   93 |  104 |  137 |  215 |  221 |  216 |  189 |  160 |  125 |   87 |
| 101 | 1939 |  102 |   84 |   87 |  110 |  128 |  176 |  212 |  205 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1941 |   88 |  104 |  108 |  119 |  135 |  185 |  213 |  222 |  183 |  149 |  117 |   87 |
| 101 | 1942 |   74 |   66 |  118 |  130 |  173 |  199 |  223 |  212 |  199 | 9999 | 9999 | 9999 |
| 101 | 1943 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  216 |  215 |  204 | 9999 | 9999 |   98 |
| 101 | 1944 |   91 |   66 |   95 |  133 |  167 |  182 |  216 |  229 |  203 |  143 |  125 | 9999 |
| 101 | 1945 |   64 |  100 |  105 |  160 |  192 |  206 |  225 |  214 |  213 |  163 |  135 |  108 |
| 101 | 1946 |   81 |   99 |  108 |  131 |  147 |  182 |  217 |  232 |  206 |  184 |  130 |   79 |
| 101 | 1947 |   91 |  109 |  147 |  137 |  156 |  206 |  224 |  231 |  208 |  166 |  138 |   90 |
| 101 | 1948 |  109 |  111 |  119 |  131 |  157 |  190 |  197 |  246 |  194 |  171 |  129 |  109 |
| 101 | 1949 |   96 |   87 |   97 |  144 |  154 |  204 |  236 |  236 |  238 |  176 | 9999 |  109 |
| 101 | 1950 |   91 |  107 |  108 |  124 |  162 |  201 |  247 |  243 |  207 |  167 |  142 |   85 |
| 101 | 1951 |   96 |  108 |  130 |  137 |  161 |  211 |  227 |  241 |  218 |  156 |  142 |  114 |
| 101 | 1952 |   91 |   94 |  143 |  148 |  168 |  237 |  250 |  253 |  215 |  190 |  136 |  112 |
| 101 | 1953 |   72 |   84 |  106 |  145 |  179 |  204 |  232 |  229 |  218 |  174 |  140 |  138 |
| 101 | 1954 |   82 |   91 |  124 |  133 |  168 |  211 |  220 |  227 |  217 |  165 |  151 |  113 |
| 101 | 1955 |  129 |  122 |  122 |  134 |  187 |  216 |  252 |  248 |  207 |  173 |  137 |  127 |
| 101 | 1956 |  109 |   65 |  113 |  132 |  155 |  182 |  219 |  245 |  217 |  166 |  110 |   92 |
| 101 | 1957 |   74 |  114 |  131 |  128 |  153 |  188 |  222 |  229 |  210 |  171 |  124 |   96 |
| 101 | 1958 |   98 |  121 |  120 |  125 |  183 |  210 |  217 |  237 |  222 |  170 |  126 |  124 |
| 101 | 1959 |  101 |   95 |  139 |  142 |  165 |  200 |  231 |  229 |  220 |  167 |  130 |  108 |
| 101 | 1960 |   92 |  122 |  128 |  132 |  170 |  208 |  224 |  238 |  196 |  171 |  139 |   91 |
| 101 | 1961 |  101 |  120 |  121 |  172 |  197 |  224 |  247 |  234 |  240 |  181 |  155 |  120 |
| 101 | 1962 |  117 |  100 |  129 |  148 |  188 |  202 |  243 |  242 |  239 |  195 |  128 |  103 |
| 101 | 1963 |  110 |  109 |  123 |  150 |  165 |  211 |  249 |  252 |  221 |  171 |  163 |  133 |
| 101 | 1964 |   98 |  121 |  139 |  145 |  193 |  218 |  242 |  244 |  237 |  179 |  127 |  107 |
| 101 | 1965 |  103 |   91 |  130 |  135 |  183 |  220 |  253 |  242 |  209 |  209 |  158 |  126 |
| 101 | 1966 |  124 |  143 |  108 |  159 |  178 |  215 |  236 |  245 |  223 |  186 |  122 |   98 |
| 101 | 1967 |   99 |  116 |  127 |  135 |  185 |  201 |  252 |  260 |  226 |  211 |  165 |   99 |
| 101 | 1968 |  102 |  124 |  131 |  154 |  178 |  211 |  253 |  247 |  223 |  192 |  154 |  120 |
| 101 | 1969 |  117 |  109 |  134 |  147 |  184 |  201 |  229 |  245 |  215 |  183 |  153 |  102 |
| 101 | 1970 |  127 |  107 |  122 |  139 |  168 |  211 |  237 |  254 |  231 |  174 |  145 |  112 |
| 101 | 1971 |  106 |   98 |  106 |  150 |  178 |  202 |  241 |  274 |  228 |  190 |  130 |  114 |
| 101 | 1972 |  108 |  128 |  129 | 9999 |  158 |  199 | 9999 |  228 |  205 |  183 |  159 |  107 |
| 101 | 1973 |  106 |   96 |  101 |  133 |  179 |  211 |  239 |  246 |  230 |  178 |  139 |  108 |
| 101 | 1974 |  112 |  108 |  128 |  135 |  187 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1980 | 9999 | 9999 |  130 |  129 |  169 |  212 |  228 |  250 |  230 |  176 |  152 |   96 |
| 101 | 1981 | 9999 |  103 | 9999 | 9999 |  175 |  210 |  225 |  236 |  228 |  202 |  142 |  141 |
| 101 | 1982 | 9999 |  110 |  125 |  145 | 9999 | 9999 | 9999 | 9999 | 9999 |  179 |  144 |  106 |
| 101 | 1983 | 9999 |   97 | 9999 |  153 |  176 | 9999 | 9999 |  246 |  235 |  199 |  170 |  117 |
| 101 | 1984 |  107 |  102 |  110 |  152 |  160 | 9999 |  192 |  236 |  158 |  177 |  121 |  116 |
| 101 | 1985 |   90 |  135 |  115 | 9999 |  174 | 9999 |  251 |  249 |  228 |  198 | 9999 |  124 |
| 101 | 1986 | 9999 |  118 |  123 |  140 | 9999 |  217 |  241 | 9999 | 9999 |  202 |  147 | 9999 |
| 101 | 1987 |  103 |  116 |  130 |  164 |  176 |  220 |  253 |  267 |  254 |  224 |  153 |  136 |
| 101 | 1988 |  129 |  108 |  122 |  153 |  186 |  219 |  251 |  266 |  223 |  212 |  158 | 9999 |
| 101 | 1989 |  101 |  118 |  136 |  150 |  184 |  223 |  264 | 9999 |  236 |  198 |  171 |  156 |
| 101 | 1990 | 9999 | 9999 | 9999 | 9999 |  189 |  234 | 9999 |  256 |  263 |  208 |  149 |  105 |
| 101 | 1991 |   99 |  103 |  140 |  134 |  156 | 9999 |  254 |  268 |  249 |  191 |  137 |  101 |
| 101 | 1878 |  104 |  125 |  132 |  170 |  188 |  211 |  241 |  267 |  228 |  199 |  132 |  124 |
| 101 | 1879 |  130 |  125 |  129 | 9999 |  144 |  214 |  229 |  242 |  216 |  182 |  159 |   97 |
| 101 | 1880 |  109 |  130 |  137 |  150 |  160 |  199 |  250 |  251 |  226 |  198 |  141 |  121 |
| 101 | 1881 |  139 |  141 |  157 |  155 |  164 |  189 |  239 |  259 |  223 |  174 |  139 |  111 |
| 101 | 1882 |  108 |  122 |  128 |  153 |  175 |  205 |  228 |  229 |  193 |  157 |  128 |  102 |
| 101 | 1883 |  102 |  130 |  122 |  140 |  169 |  195 |  234 |  232 |  220 |  172 |  144 |  103 |
| 101 | 1884 |  119 | 9999 |  135 |  143 |  171 |  184 |  239 |  248 |  224 |  164 |  135 |  109 |
| 101 | 1885 |  102 |  155 |  143 |  136 |  177 |  201 |  240 |  259 |  231 |  168 |  144 |  131 |
| 101 | 1886 |  106 |  113 |  142 |  154 |  172 |  196 |  231 |  228 |  225 |  184 |  134 |  106 |
| 101 | 1887 |   99 |  110 |  121 |  134 |  165 |  210 |  243 |  248 |  229 |  148 |  138 |  104 |
| 101 | 1888 |  124 |  112 |  141 |  161 |  176 |  206 |  235 |  233 |  230 |  189 |  157 |  146 |
| 101 | 1889 |  112 |  129 |  132 |  144 |  171 |  202 |  241 |  239 |  225 |  196 |  151 |  109 |
| 101 | 1890 |  131 |  128 |  133 |  144 |  163 |  206 |  217 |  248 |  213 |  183 |  139 |  113 |
| 101 | 1891 |   96 |  114 |  145 |  150 |  170 |  199 |  245 |  242 |  227 |  201 |  165 |  134 |
| 101 | 1892 |  130 | 9999 |  149 |  149 |  179 |  215 |  252 |  245 |  234 |  202 |  160 |  126 |
| 101 | 1893 |  113 | 9999 |  155 |  165 |  185 |  216 |  237 |  239 |  246 |  201 |  147 |  120 |
| 101 | 1894 |  118 |  134 |  135 |  158 |  172 |  198 |  242 |  250 |  234 |  208 | 9999 |  126 |
| 101 | 1895 |  114 |  152 |  144 |  161 |  169 |  207 |  254 |  242 |  247 |  222 |  183 | 9999 |
| 101 | 1896 |  127 |  138 |  152 |  139 |  160 |  208 |  253 |  234 |  237 |  180 |  133 |  125 |
| 101 | 1897 |  130 |  140 | 9999 |  173 |  178 |  211 |  252 |  256 |  227 |  188 | 9999 |  130 |
| 101 | 1898 | 9999 |  133 |  142 |  151 |  181 |  208 | 9999 |  248 |  231 |  203 |  160 |  125 |
| 101 | 1899 | 9999 |  165 |  151 | 9999 |  183 |  210 |  238 |  257 | 9999 |  229 | 9999 |  134 |
| 101 | 1900 |  131 |  170 |  141 |  148 |  178 |  211 |  230 |  241 |  237 |  210 |  147 |  131 |
| 101 | 1901 |  131 |  118 |  150 |  175 |  175 |  240 |  251 |  247 |  239 |  185 |  159 |  122 |
| 101 | 1902 |  127 | 9999 | 9999 | 9999 |  169 |  210 |  249 |  265 |  234 |  192 |  169 |  138 |
| 101 | 1905 |  115 |  118 | 9999 |  178 |  175 |  223 |  244 |  260 |  240 |  188 |  159 |  126 |
| 101 | 1906 |  130 |  115 |  148 |  152 |  178 |  217 |  235 |  252 |  236 |  201 |  162 |  121 |
| 101 | 1907 |  117 |  110 |  134 |  153 |  179 |  224 |  227 |  252 |  232 |  194 |  171 |  151 |
| 101 | 1908 | 9999 |  122 |  131 |  146 |  197 |  207 |  239 |  259 |  242 |  203 |  172 |  136 |
| 101 | 1909 |  114 |  120 |  148 |  162 |  177 |  210 |  223 |  248 |  227 |  205 |  162 |  149 |
| 101 | 1910 |  122 |  135 |  136 |  158 |  164 |  210 |  236 |  241 |  216 |  208 |  163 |  138 |
| 101 | 1911 |  108 |  136 |  145 |  153 |  171 |  209 |  247 |  260 |  247 |  204 |  161 |  152 |
| 101 | 1913 | 9999 |  134 |  145 |  151 |  181 |  210 |  241 |  260 |  232 |  201 |  170 |  124 |
| 101 | 1914 |  103 |  135 |  148 |  178 |  178 |  197 |  235 |  240 |  222 |  183 |  144 |  126 |
| 101 | 1921 |  129 |  136 |  139 |  147 |  193 |  221 |  258 |  259 |  256 |  211 |  155 |  124 |
| 101 | 1922 | 9999 |  139 | 9999 | 9999 |  202 |  230 |  248 |  264 |  227 |  211 |  157 |  126 |
| 101 | 1923 |  105 |  141 |  148 |  163 |  193 |  195 |  260 |  272 |  228 | 9999 |  166 |  119 |
| 101 | 1924 |  125 |  124 |  155 | 9999 |  222 |  234 |  264 |  256 |  241 |  209 |  167 |  133 |
| 101 | 1925 |  122 |  134 |  118 |  170 |  186 |  232 |  244 |  264 |  226 |  194 |  152 |  144 |
| 101 | 1926 | 9999 |  156 | 9999 |  170 |  190 |  225 |  256 |  245 |  248 |  234 |  165 |  118 |
| 101 | 1927 | 9999 |  129 |  154 |  171 |  202 |  234 |  255 |  271 |  241 |  205 |  167 | 9999 |
| 101 | 1928 |  120 |  134 | 9999 |  173 |  182 |  228 |  260 | 9999 |  249 | 9999 | 9999 | 9999 |
| 101 | 1929 |  112 |  129 |  142 | 9999 |  190 |  233 |  251 |  248 |  246 |  203 |  157 |  144 |
| 101 | 1930 |  132 |  119 | 9999 |  164 |  194 |  228 |  254 |  260 |  244 |  221 | 9999 |  147 |
| 101 | 1931 |  131 |  114 |  172 |  167 |  201 |  252 |  262 |  266 |  228 |  206 |  170 |  116 |
| 101 | 1932 |  126 |  118 | 9999 |  165 |  194 |  221 |  237 |  259 |  251 |  208 |  169 | 9999 |
| 101 | 1933 |  123 |  132 |  149 | 9999 |  206 |  226 |  254 |  265 | 9999 |  233 |  148 |  114 |
| 101 | 1934 |  111 |  114 |  124 |  158 |  185 |  226 |  257 |  250 |  234 |  192 |  154 |  150 |
| 101 | 1935 |  100 |  120 |  134 |  170 |  172 |  227 |  256 |  266 |  246 |  192 |  161 |  142 |
| 101 | 1936 |  148 |  153 | 9999 |  169 |  165 |  209 |  244 |  240 |  251 |  179 |  158 |  120 |
| 101 | 1937 | 9999 | 9999 |  151 |  167 |  186 |  228 |  250 |  259 |  235 |  203 | 9999 |  126 |
| 101 | 1938 |  123 |  141 |  139 |  155 |  190 |  247 |  266 |  267 |  243 |  216 | 9999 |  134 |
| 101 | 1939 | 9999 |  132 |  137 |  163 |  183 |  225 |  257 |  255 |  245 | 9999 | 9999 | 9999 |
| 101 | 1940 |  126 | 9999 |  174 | 9999 |  202 |  220 |  254 |  257 |  242 |  213 |  160 |  117 |
| 101 | 1941 |  128 |  142 |  151 |  173 |  178 |  221 |  254 |  253 |  229 |  196 |  162 |  126 |
| 101 | 1942 |  119 |  113 |  162 |  175 |  208 |  230 |  247 |  251 |  244 | 9999 |  173 |  142 |
| 101 | 1943 |  142 |  132 |  151 | 9999 | 9999 |  231 |  254 |  255 |  246 |  200 |  144 |  135 |
| 101 | 1944 |  124 |  103 |  133 | 9999 |  205 |  220 |  248 |  266 |  247 |  193 | 9999 |  129 |
| 101 | 1945 |  124 |  136 |  148 |  197 |  229 |  246 |  265 |  259 | 9999 |  187 | 9999 | 9999 |
| 101 | 1946 |  122 |  119 |  153 |  179 |  195 |  222 |  252 |  270 | 9999 |  218 | 9999 |  127 |
| 101 | 1947 |  134 |  155 |  188 |  173 |  199 |  243 |  263 |  274 | 9999 | 9999 | 9999 |  137 |
| 101 | 1948 |  149 | 9999 | 9999 | 9999 |  201 |  229 |  239 |  273 |  241 | 9999 | 9999 | 9999 |
| 101 | 1949 | 9999 |  129 |  146 |  184 |  194 |  241 |  268 |  271 | 9999 | 9999 |  168 | 9999 |
| 101 | 1950 |  133 | 9999 |  147 |  166 |  202 |  239 | 9999 | 9999 |  251 |  215 | 9999 |  131 |
| 101 | 1894 |  102 |  117 |  123 |  151 |  166 |  211 |  245 |  259 |  224 |  203 |  164 |  115 |
| 101 | 1895 |   98 |  133 |  126 |  156 |  162 |  206 |  250 |  230 |  235 |  207 |  172 |  134 |
| 101 | 1896 |  109 |  115 |  136 |  130 |  156 |  206 |  257 |  231 |  227 |  166 |  120 |  114 |
| 101 | 1897 |  112 |  121 |  154 |  159 |  174 |  215 |  257 |  256 |  220 |  178 |  162 |  116 |
| 101 | 1898 |  123 |  111 |  122 |  137 |  170 |  206 |  244 |  250 |  223 |  187 |  145 |  106 |
| 101 | 1899 |  125 |  142 |  135 |  161 |  181 |  205 |  240 |  255 |  247 |  225 |  169 |  121 |
| 101 | 1900 |  112 |  151 |  120 |  137 |  167 |  216 |  221 |  240 |  237 |  204 |  132 |  115 |
| 101 | 1901 |  107 |   92 |  125 |  158 |  157 |  235 |  248 |  245 |  230 |  166 |  139 |  102 |
| 101 | 1902 |  102 |  127 |  134 |  159 |  152 |  198 |  252 |  265 |  225 |  175 |  152 |  115 |
| 101 | 1903 |  118 |  114 |  132 |  136 |  162 |  187 |  233 |  250 |  220 |  195 |  135 |  104 |
| 101 | 1904 |   93 |  117 |  119 |  142 |  181 |  209 |  252 |  265 |  213 |  185 |  137 |  123 |
| 101 | 1905 |   91 |   91 |  144 |  159 |  157 |  211 |  233 |  255 |  226 |  175 |  138 |  106 |
| 101 | 1906 |  109 |   93 |  124 |  129 |  161 |  204 |  226 |  245 |  228 |  189 |  142 |  106 |
| 101 | 1907 |   95 |   88 |  113 |  130 |  162 |  212 |  219 |  255 |  218 |  175 |  155 |  131 |
| 101 | 1908 |  113 |   95 |   99 |  110 |  177 |  182 |  223 |  244 |  224 |  183 |  156 |  117 |
| 101 | 1909 |   86 |   94 |  119 |  138 |  149 |  186 |  217 |  242 |  210 |  192 |  146 |  135 |
| 101 | 1910 |  103 |  115 |  112 |  131 |  139 |  195 |  225 |  233 |  204 |  197 |  150 |  123 |
| 101 | 1911 |   86 |  113 |  116 |  124 |  145 |  196 |  240 |  256 |  239 |  192 |  146 |  145 |
| 101 | 1912 |  115 |  146 |  145 |  120 |  178 |  201 |  218 |  234 |  190 |  175 |  118 |  112 |
| 101 | 1913 |  120 |  107 |  129 |  129 |  163 |  197 |  230 |  251 |  218 |  197 |  165 |  116 |
| 101 | 1914 |   92 |  120 |  129 |  159 |  157 |  176 |  221 |  225 |  219 |  177 |  140 |  119 |
| 101 | 1915 |  101 |  106 |  132 |  112 |  165 |  198 |  246 |  249 |  212 |  169 |  146 |  133 |
| 101 | 1916 |  106 |  111 |  122 |  130 |  160 |  187 |  228 |  245 |  205 |  189 |  149 |  128 |
| 101 | 1917 |  100 |  112 |  105 |  116 |  163 |  191 |  229 |  249 |  238 |  178 |  124 |   83 |
| 101 | 1918 |  120 |  102 |  105 |  121 |  156 |  193 |  234 |  238 |  245 |  156 |  137 |  120 |
| 101 | 1919 |  100 |  128 |  126 |  126 |  165 |  187 |  211 |  243 |  220 |  162 |  147 |  111 |
| 101 | 1920 |  112 |  122 |  125 |  151 |  175 |  204 |  244 |  239 |  224 |  180 |  134 |  121 |
| 101 | 1921 |  111 |  116 |  114 |  118 |  154 |  191 |  234 |  235 |  241 |  203 |  138 |  106 |
| 101 | 1922 |  112 |  118 |  128 |  151 |  170 |  194 |  220 |  250 |  201 |  194 |  135 |  107 |
| 101 | 1923 |   73 |  111 |  116 |  130 |  168 |  168 |  246 |  257 |  201 |  203 |  142 |   92 |
| 101 | 1924 |   99 |   92 |  122 |  150 |  205 |  211 |  244 |  233 |  216 |  181 |  147 |  107 |
| 101 | 1925 |   97 |  106 |   89 |  133 |  156 |  203 |  219 |  249 |  205 |  171 |  127 |  121 |
| 101 | 1926 |  112 |  135 |  129 |  142 |  164 |  197 |  235 |  229 |  226 |  220 |  141 |   96 |
| 101 | 1927 |   98 |  104 |  122 |  151 |  172 |  206 |  229 |  250 |  225 |  181 |  145 |  121 |
| 101 | 1928 |   97 |  109 |  128 |  144 |  154 |  210 |  245 |  263 |  230 |  183 |  131 |  100 |
| 101 | 1929 |   86 |  101 |  114 |  147 |  165 |  211 |  231 |  226 |  225 |  177 |  136 |  122 |
| 101 | 1930 |  102 |   84 |  126 |  127 |  162 |  194 |  224 |  234 |  214 |  190 |  158 |  114 |
| 101 | 1931 |   95 |   77 |  135 |  132 |  169 |  229 |  231 |  234 |  195 |  169 |  138 |   87 |
| 101 | 1932 |   93 |   79 |  112 |  128 |  161 |  170 |  205 |  236 |  217 |  173 |  138 |  117 |
| 101 | 1933 |   88 |   99 |  112 |  148 |  178 |  195 |  224 |  243 |  228 |  199 |  116 |   84 |
| 101 | 1934 |   73 |   86 |   93 |  129 |  159 |  200 |  231 |  224 |  207 |  166 |  122 |  122 |
| 101 | 1935 |   68 |   92 |  102 |  144 |  143 |  208 |  239 |  237 |  221 |  160 |  133 |  110 |
| 101 | 1936 |  120 |  123 |  115 |  140 |  156 |  185 |  226 |  217 |  225 |  151 |  126 |   87 |
| 101 | 1937 |  113 |  122 |  121 |  142 |  163 |  203 |  231 |  239 |  210 |  176 |  162 |   99 |
| 101 | 1938 |   94 |   80 |  106 |  118 |  150 |  227 |  234 |  232 |  208 |  180 |  143 |  102 |
| 101 | 1939 |  115 |   96 |  100 |  124 |  141 |  188 |  225 |  221 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1941 |  100 |  116 |  121 |  133 |  148 |  197 |  226 |  238 |  202 |  169 |  135 |  102 |
| 101 | 1942 |   87 |   78 |  131 |  144 |  186 |  211 |  236 |  228 |  218 | 9999 | 9999 | 9999 |
| 101 | 1943 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  229 |  231 |  223 | 9999 | 9999 |  113 |
| 101 | 1944 |  103 |   78 |  108 |  147 |  180 |  194 |  229 |  245 |  222 |  163 |  143 | 9999 |
| 101 | 1945 |   77 |  112 |  118 |  174 |  205 |  218 |  238 |  230 |  232 |  183 |  153 |  123 |
| 101 | 1946 |   93 |  111 |  121 |  145 |  160 |  194 |  230 |  248 |  225 |  204 |  148 |   94 |
| 101 | 1947 |  104 |  121 |  160 |  151 |  169 |  218 |  237 |  247 |  227 |  186 |  156 |  105 |
| 101 | 1948 |  121 |  123 |  132 |  145 |  170 |  202 |  210 |  262 |  213 |  191 |  147 |  124 |
| 101 | 1949 |  108 |   99 |  110 |  158 |  167 |  216 |  249 |  252 |  257 |  196 | 9999 |  124 |
| 101 | 1950 |  104 |  119 |  121 |  138 |  175 |  213 |  260 |  259 |  226 |  187 |  160 |  100 |
| 101 | 1949 |  109 |  101 |  122 |  164 |  178 |  226 | 9999 | 9999 |  259 |  199 |  149 |  114 |
| 101 | 1950 |  103 |  113 |  123 |  141 |  188 |  225 |  254 |  258 |  226 |  183 |  144 |  100 |
| 101 | 1951 |   95 |  107 |  131 |  143 |  167 |  215 |  233 |  245 |  222 |  162 |  146 |  117 |
| 101 | 1952 |  102 |   95 |  143 |  153 |  176 |  238 |  252 |  258 |  219 |  195 |  134 |  114 |
| 101 | 1953 |   72 |   86 |  108 |  152 |  187 |  208 |  238 |  235 |  224 |  179 |  141 |  139 |
| 101 | 1954 |   85 |   94 |  128 |  138 |  175 |  217 |  228 |  233 |  222 |  171 |  154 |  112 |
| 101 | 1955 |  130 |  123 |  124 |  142 |  192 |  218 |  254 |  252 |  213 |  175 |  139 |  126 |
| 101 | 1956 |  112 |   67 |  117 |  139 |  167 |  191 |  227 |  251 |  225 |  174 |  114 |   90 |
| 101 | 1957 |   73 |  114 |  136 |  136 |  165 |  196 |  230 |  237 |  217 |  177 |  129 |   98 |
| 101 | 1958 |  105 |  127 |  130 |  138 |  199 |  220 |  232 |  251 |  236 |  186 |  138 |  134 |
| 101 | 1959 |  108 |  103 |  149 |  154 |  178 |  211 |  240 |  242 |  232 |  184 |  144 |  118 |
| 101 | 1960 |   98 |  128 |  135 |  144 |  183 |  221 |  237 |  251 |  214 |  186 |  153 |  106 |
| 101 | 1961 |  101 |  120 |  121 |  172 |  197 |  224 |  247 |  234 |  240 |  181 |  155 |  120 |
| 101 | 1962 |  117 |  100 |  129 |  148 |  188 |  202 |  243 |  242 |  239 |  195 |  128 |  103 |
| 101 | 1963 |  110 |  109 |  123 |  150 |  165 |  211 |  249 |  252 |  221 |  171 |  163 |  133 |
| 101 | 1964 |   98 |  121 |  139 |  145 |  193 |  218 |  242 |  244 |  237 |  179 |  127 |  107 |
| 101 | 1965 |  103 |   91 |  130 |  139 |  183 |  220 |  253 |  242 |  209 |  209 |  158 |  126 |
| 101 | 1966 |  142 |  143 |  108 |  159 |  178 |  215 |  236 |  245 |  223 |  186 |  122 |   98 |
| 101 | 1967 |   99 |  116 |  127 |  139 |  185 |  201 |  252 |  260 |  226 |  211 |  165 |   92 |
| 101 | 1968 |  102 |  124 |  131 |  154 |  178 |  211 |  253 |  247 |  223 |  192 |  154 |  120 |
| 101 | 1969 |  117 |  109 |  134 |  147 |  184 |  201 |  229 |  245 |  215 |  183 |  153 |  102 |
| 101 | 1970 |  127 |  107 |  122 |  139 |  168 |  211 |  237 |  254 |  231 |  170 |  145 |  112 |
| 101 | 1971 |  106 |   98 |  106 |  150 |  178 |  202 |  241 |  274 |  228 |  190 |  130 |  114 |
| 101 | 1972 |  108 |  128 |  129 |  131 |  158 |  199 |  228 |  228 | 9999 |  183 |  159 |  107 |
| 101 | 1973 |  106 |   96 |  101 | 9999 | 9999 |  211 |  239 |  246 |  230 |  178 |  139 |  108 |
| 101 | 1974 |  112 |  108 |  122 |  131 |  182 | 9999 |  234 |  241 | 9999 |  161 |  134 | 9999 |
| 101 | 1975 |  105 |  107 |  117 |  138 | 9999 |  200 |  249 | 9999 |  226 |  177 |  134 |  116 |
| 101 | 1976 |   88 |  110 |  144 |  139 |  173 |  210 |  239 | 9999 |  229 |  176 |  123 |  128 |
| 101 | 1977 |  116 |  125 |  126 |  143 |  168 |  203 |  229 |  227 |  227 |  208 | 9999 |  131 |
| 101 | 1978 |   98 |  135 |  124 |  137 |  165 |  201 |  233 |  242 |  218 |  164 |  125 |  138 |
| 101 | 1979 |  132 |  126 |  124 |  132 |  172 |  219 |  241 |  246 |  212 |  188 |  122 |  110 |
| 101 | 1980 |  103 |  119 |  130 |  129 |  169 |  212 |  228 |  250 |  230 |  176 |  152 |   96 |
| 101 | 1981 |   91 |  103 |  142 |  148 |  175 |  210 |  225 |  236 |  228 |  202 |  142 |  141 |
| 101 | 1982 |  118 |  110 |  125 |  145 |  176 |  230 |  267 |  250 |  225 |  179 |  144 |  106 |
| 101 | 1983 |   86 |   97 |  126 |  153 |  176 |  217 |  261 |  246 |  235 |  199 |  170 |  117 |
| 101 | 1984 |  107 |  102 |  110 |  152 |  160 | 9999 |  242 |  236 |  228 |  177 | 9999 |  116 |
| 101 | 1985 |   90 |  135 |  115 |  153 |  174 |  226 |  251 |  249 |  228 |  198 |  162 |  124 |
| 101 | 1986 |  106 |  118 |  123 |  140 |  189 |  217 |  241 |  266 |  239 |  202 |  147 |  110 |
| 101 | 1987 |  103 |  116 |  125 |  164 |  176 |  220 |  243 |  267 |  254 |  224 |  153 |  136 |
| 101 | 1988 |  129 |  108 |  122 |  153 |  186 |  219 |  251 |  266 |  223 |  212 |  158 | 9999 |
| 101 | 1989 |  101 |  118 |  136 |  150 |  184 |  223 |  264 | 9999 |  236 |  198 |  171 |  156 |
| 101 | 1990 | 9999 | 9999 | 9999 | 9999 |  189 |  234 |  250 |  256 |  263 |  208 |  149 |  105 |
| 101 | 1879 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  183 |  156 |  127 |   51 |
| 101 | 1883 |   83 |   90 |   86 |  116 |  165 |  199 |  255 |  250 |  215 |  155 |  117 |   69 |
| 101 | 1888 |   73 |   63 |   98 |  133 |  161 |  211 |  249 |  232 |  214 |  145 |  116 |  104 |
| 101 | 1889 |   58 |   71 |   79 |  110 |  159 |  194 |  263 |  274 |  219 |  159 |  107 |   59 |
| 101 | 1891 |   44 |   63 |  103 |  126 |  149 |  211 |  268 |  248 |  222 |  175 |  123 |   89 |
| 101 | 1892 |   81 |   99 |  121 |  116 |  163 |  226 |  265 |  256 |  237 |  164 |  122 | 9999 |
| 101 | 1893 |   59 |   91 |  135 |  154 |  178 |  224 |  255 |  264 |  246 |  180 |  112 |   72 |
| 101 | 1894 |   63 |   82 |   97 |  122 |  144 |  209 |  257 |  267 |  224 |  184 |  134 |   71 |
| 101 | 1895 |   61 |  107 |  107 |  151 |  152 |  203 |  271 |  246 |  239 |  194 |  155 |   99 |
| 101 | 1896 |   75 |   90 |  114 |  105 |  131 |  205 |  276 |  225 |  232 |  140 |   86 |   79 |
| 101 | 1898 |  100 |   70 |   96 |  116 |  152 |  208 |  263 |  254 |  221 |  167 |  123 |   70 |
| 101 | 1899 |   94 |  115 |  107 |  147 |  177 |  197 |  243 |  254 |  230 |  207 |  138 |   91 |
| 101 | 1900 | 9999 |  128 |   96 |  114 |  150 |  214 |  242 |  238 |  238 |  185 |   98 |   83 |
| 101 | 1901 |   79 |   63 |   98 |  155 |  135 |  232 |  247 |  244 |  208 |  136 |  108 |   71 |
| 101 | 1902 |   76 |  101 |  115 |  148 |  133 |  202 |  291 |  277 |  226 |  147 |  121 |   86 |
| 101 | 1903 |   95 |   93 |  106 |  112 |  154 |  176 |  236 |  268 |  215 |  181 |   98 |   72 |
| 101 | 1904 |   58 |   91 |   98 |  129 |  196 |  225 |  264 |  281 |  209 |  156 |  104 |   89 |
| 101 | 1905 |   57 |   56 |  121 |  153 |  139 |  203 |  267 |  280 |  220 |  143 |  116 |   70 |
| 101 | 1906 |   81 |   50 |  103 |  122 |  153 |  206 |  249 |  266 |  234 |  169 |  110 |   66 |
| 101 | 1907 |   60 |   53 |   91 |  120 |  178 |  226 |  240 |  272 |  202 |  152 |  140 |  106 |
| 101 | 1908 |   90 |   70 |   81 |  105 |  198 | 9999 |  242 |  257 |  234 |  178 |  133 |   85 |
| 101 | 1909 |   53 |   66 |  100 |  145 |  147 |  182 |  219 |  250 |  202 |  174 |  117 |  102 |
| 101 | 1910 |   63 |   75 |   98 |  122 |  125 |  199 |  250 |  249 |  184 |  192 |  121 |   89 |
| 101 | 1911 |   46 |   89 |  100 |  115 |  138 |  210 |  251 |  264 |  224 |  179 |  118 |  114 |
| 101 | 1913 |   94 |   82 |  118 |  124 |  160 |  211 |  252 |  264 |  229 |  178 |  138 |   85 |
| 101 | 1914 |   59 |   91 |  115 |  165 |  158 |  187 |  240 |  251 |  224 |  164 |  111 |   85 |
| 101 | 1921 |   89 |  100 |   98 |  104 |  151 |  203 |  266 |  249 |  256 |  199 |  115 |   74 |
| 101 | 1922 |   59 |   78 |  109 |  134 |  178 |  204 |  246 |  277 |  189 |  171 |   93 |   62 |
| 101 | 1923 |   26 |   71 |   86 |  108 |  156 |  158 |  261 |  259 |  188 | 9999 |  113 |   50 |
| 101 | 1924 |   61 |   54 |   98 |  131 |  209 |  219 |  261 |  252 |  237 |  163 |  112 |   67 |
| 101 | 1925 |   67 |   70 |   53 |  117 |  139 |  205 | 9999 |  253 |  201 |  142 |   96 |   92 |
| 101 | 1926 |   82 |  110 |  107 | 9999 |  143 |  199 |  239 |  251 |  222 | 9999 | 9999 |   59 |
| 101 | 1927 | 9999 |   69 | 9999 |  133 |  171 |  223 |  247 |  269 |  224 |  164 |  113 |   84 |
| 101 | 1928 |   53 |   83 |   94 |  129 |  146 | 9999 |  259 |  276 |  224 |  163 |  102 |   85 |
| 101 | 1929 |   50 |   60 |   89 |  129 |  152 |  208 |  255 |  227 |  209 | 9999 |  106 |   92 |
| 101 | 1930 |   80 |   51 |  112 |  110 |  157 |  203 | 9999 |  262 |  223 |  183 |  139 |   85 |
| 101 | 1931 |   67 |   38 |  121 |  128 |  173 |  253 |  263 |  263 |  195 |  155 |  115 | 9999 |
| 101 | 1932 |   66 |   54 |  106 |  118 |  167 |  190 |  220 |  264 | 9999 |  154 |  113 |   94 |
| 101 | 1933 |   56 |   80 |   93 |  137 |  180 |  189 |  254 |  263 |  233 |  195 |   89 |   52 |
| 101 | 1934 |   47 |   63 |   60 |  119 |  156 |  217 |  259 |  236 |  208 |  152 |   97 | 9999 |
| 101 | 1935 |   30 |   69 |   84 |  132 |  131 |  237 |  256 |  263 |  230 |  140 |  115 |   80 |
| 101 | 1936 |  109 |  103 |   97 |  121 |  118 |  181 |  250 |  242 |  199 |  124 |  103 |   65 |
| 101 | 1937 |   91 |   95 |   99 | 9999 | 9999 |  204 |  253 |  267 |  214 |  156 |  138 |   58 |
| 101 | 1938 |   62 |   52 |  102 |  116 |  151 | 9999 | 9999 |  244 | 9999 |  174 |  119 |   69 |
| 101 | 1939 |   88 |   77 |   83 |  108 |  134 |  198 |  270 |  245 |  204 |  187 |  117 |   82 |
| 101 | 1940 |   70 |  109 |  136 |  126 |  165 |  183 |  255 |  246 |  232 |  166 |  109 | 9999 |
| 101 | 1941 |   71 |   91 |  110 | 9999 |  149 |  215 |  256 |  266 |  210 | 9999 |  109 | 9999 |
| 101 | 1942 | 9999 |   39 |   77 |  133 |  175 | 9999 |  253 |  254 | 9999 |  147 | 9999 |   81 |
| 101 | 1943 | 9999 | 9999 |   84 | 9999 | 9999 |  219 |  247 | 9999 |  229 | 9999 | 9999 | 9999 |
| 101 | 1944 |   51 | 9999 |   69 |  127 |  184 |  209 |  249 |  264 |  212 |  130 |  111 |   58 |
| 101 | 1945 |   34 |   92 |  105 | 9999 | 9999 | 9999 | 9999 | 9999 |  240 |  153 |  115 |   84 |
| 101 | 1946 | 9999 | 9999 | 9999 | 9999 |  145 |  209 |  246 |  266 |  229 | 9999 | 9999 | 9999 |
| 101 | 1947 |   76 |   84 | 9999 | 9999 |  173 | 9999 | 9999 |  244 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1948 |   71 |   87 | 9999 | 9999 |  152 |  219 |  250 | 9999 |  206 |  170 | 9999 |   85 |
| 101 | 1949 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  173 |  100 |   86 |
| 101 | 1950 |   62 | 9999 | 9999 | 9999 | 9999 | 9999 |  278 |  266 | 9999 | 9999 |  124 |   55 |
| 101 | 1882 |   57 |   69 |   87 |  123 |  184 |  225 |  245 |  241 |  202 |  163 |  107 |   80 |
| 101 | 1883 |   72 |   73 |   87 |  119 |  174 |  215 |  266 |  236 |  211 |  145 |  100 |   62 |
| 101 | 1884 |   57 |   88 |  100 |  124 |  168 |  170 |  258 |  270 |  235 |  147 |  111 |   72 |
| 101 | 1885 |   53 |  115 |  109 |  108 |  179 |  208 |  260 |  281 |  220 |  141 |  102 |   70 |
| 101 | 1886 |   46 |   69 |  114 |  131 |  168 |  206 |  261 |  238 |  214 |  182 |  111 |   75 |
| 101 | 1887 |   46 |   58 |  116 |  115 |  172 |  219 |  254 |  255 |  234 |  136 |  121 |   74 |
| 101 | 1888 |   62 |   60 |   99 |  130 |  163 |  203 |  233 |  230 |  231 |  136 |  118 |   95 |
| 101 | 1889 |   54 |   65 |   75 |  110 |  161 |  206 |  260 |  263 |  216 |  179 |  109 |   58 |
| 101 | 1890 |   83 |   80 |   87 |  120 |  168 |  209 |  245 |  274 |  196 |  146 |   92 |   61 |
| 101 | 1891 |   34 |   45 |   90 |  123 |  153 |  211 |  265 |  245 |  228 |  178 |  125 |   81 |
| 101 | 1892 |   74 |   86 |  115 |  117 |  156 |  219 |  257 |  249 |  218 |  176 |  121 |   86 |
| 101 | 1893 |   51 |   76 |  125 |  151 |  188 |  229 | 9999 | 9999 | 9999 | 9999 | 9999 |   68 |
| 101 | 1894 |   57 |   68 |   89 |  114 |  148 |  205 | 9999 |  245 |  239 |  185 |  126 |   68 |
| 101 | 1895 |   48 |   91 |   93 | 9999 |  150 | 9999 |  266 |  253 |  227 |  182 |  136 |   91 |
| 101 | 1897 |   64 |   84 |  111 |  131 |  164 |  213 |  250 |  244 |  203 |  144 |  129 |   77 |
| 101 | 1898 |   85 |   66 |   93 |  122 |  158 |  222 |  245 |  232 |  205 |  162 |  124 |   69 |
| 101 | 1899 |   78 |  100 |   96 |  136 |  175 |  203 |  232 |  254 |  223 |  196 |  124 |   82 |
| 101 | 1900 |   49 |  112 |   91 |  109 |  158 |  209 |  228 |  233 |  228 |  186 |  105 |   69 |
| 101 | 1901 |   62 |   51 |  102 |  149 |  146 |  228 |  250 |  247 |  220 |  149 |  104 |   69 |
| 101 | 1902 |   51 |   96 |   94 |  141 |  132 |  208 |  275 |  258 |  210 |  153 |  109 |   75 |
| 101 | 1903 |   77 |   69 |   94 |  104 |  156 | 9999 | 9999 | 9999 | 9999 |  171 |   98 |   74 |
| 101 | 1905 |   44 |   43 |   98 |  136 |  142 |  201 | 9999 | 9999 | 9999 |  145 |  124 |   73 |
| 101 | 1907 |   48 |   40 |   80 |  110 |  172 |  211 | 9999 | 9999 | 9999 |  157 |  130 |   94 |
| 101 | 1910 |   58 |   64 |   91 |  119 |  138 |  194 |  250 |  243 |  186 |  198 |  124 |   88 |
| 101 | 1911 |   45 |   73 |  100 |  111 |  148 |  222 |  251 |  261 |  220 |  188 |  117 |  107 |
| 101 | 1913 |   78 |   71 |  104 |  110 |  159 |  199 |  230 |  249 |  221 |  175 |  127 |   77 |
| 101 | 1914 |   51 |   79 |  113 |  166 |  174 |  219 |  248 |  245 |  210 |  157 |  118 |   83 |
| 101 | 1938 |   70 |   54 |   86 |  107 |  152 |  227 |  257 |  254 |  222 |  180 |  128 | 9999 |
| 101 | 1939 |   89 |   83 |   82 |  119 |  123 |  198 |  232 |  247 |  203 |  187 |  121 |   85 |
| 101 | 1940 |   79 |  104 |  122 |  124 |  165 |  186 |  253 |  240 |  220 |  174 |  113 |   59 |
| 101 | 1941 |   80 |  102 |  119 |  134 |  147 |  213 |  247 |  262 |  203 |  153 |  107 |   68 |
| 101 | 1942 | 9999 | 9999 |  131 |  154 |  193 |  218 |  255 |  245 |  219 |  188 |  126 |   90 |
| 101 | 1943 |   92 |   80 |  106 |  150 |  174 |  217 |  264 |  244 |  243 |  170 |  106 |   88 |
| 101 | 1944 | 9999 |   53 |   77 |  140 |  187 |  218 | 9999 | 9999 |  224 |  162 |  121 |   71 |
| 101 | 1945 |   40 |   82 |  101 | 9999 | 9999 |  254 |  272 |  263 |  229 |  159 |  128 |   88 |
| 101 | 1946 |   73 |   80 |  107 |  155 |  172 |  227 |  240 | 9999 |  241 |  192 |  129 |   65 |
| 101 | 1947 |   75 |  108 |  149 |  135 |  182 |  241 |  258 |  252 |  231 |  178 |   97 |   74 |
| 101 | 1948 |   88 |  105 |  113 |  143 |  177 |  214 |  238 |  259 |  214 |  182 |  113 |   85 |
| 101 | 1949 |   73 |   67 |   90 |  159 |  156 |  222 | 9999 | 9999 | 9999 |  176 |  118 |   96 |
| 101 | 1950 |   77 |   87 |   97 |  116 |  179 |  239 |  271 |  265 |  234 |  170 |  128 |   73 |
| 101 | 1951 |   67 |   93 |  118 |  148 |  166 |  229 | 9999 | 9999 | 9999 |  150 |  127 |   59 |
| 101 | 1968 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |   78 |
| 101 | 1969 |   79 |   74 |  103 |  128 |  184 |  196 |  224 |  235 |  194 |  149 |  120 |   58 |
| 101 | 1970 |   86 |   74 |   89 |  105 |  146 |  215 |  235 |  264 |  213 |  151 |  119 |   71 |
| 101 | 1971 |   66 |   59 |   70 |  139 |  158 |  202 |  246 |  277 |  194 |  146 |   86 |   73 |
| 101 | 1972 |   63 |   83 |  105 | 9999 |  139 |  202 | 9999 |  230 |  190 |  148 |  121 |   69 |
| 101 | 1973 |   63 |   52 |   64 |  105 |  192 |  220 |  259 |  242 |  223 |  159 |  102 |   71 |
| 101 | 1974 |   74 |   71 |  104 |  104 |  181 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1980 | 9999 | 9999 |   90 |  100 |  136 |  206 |  212 |  253 |  211 |  143 |  112 |   51 |
| 101 | 1879 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  303 |  314 |  238 |  208 |  153 |   87 |
| 101 | 1880 |   80 |  117 |  145 |  152 |  187 |  239 |  309 |  286 |  258 |  206 |  130 | 9999 |
| 101 | 1881 |  110 |  118 |  161 |  162 |  185 |  222 |  318 |  312 |  260 |  184 |  133 |   94 |
| 101 | 1884 | 9999 | 9999 | 9999 | 9999 |  193 |  215 | 9999 |  282 |  241 |  170 |  133 |   89 |
| 101 | 1885 |   79 |  126 |  127 |  134 |  199 |  238 | 9999 |  289 | 9999 | 9999 | 9999 |   74 |
| 101 | 1887 |   81 |   82 |  127 |  142 |  199 |  272 | 9999 | 9999 | 9999 | 9999 |  140 | 9999 |
| 101 | 1888 |   86 |   88 |  123 |  157 |  204 |  249 |  280 |  261 | 9999 |  190 |  136 |  124 |
| 101 | 1890 |   87 |  100 |  123 |  146 |  177 |  246 |  277 |  299 |  245 |  193 |  127 |   95 |
| 101 | 1891 |   68 |   92 |  126 |  165 |  201 |  252 |  306 |  286 |  265 |  213 |  151 |  104 |
| 101 | 1892 |  108 | 9999 |  150 |  158 |  204 |  268 |  305 |  289 |  266 |  196 |  145 |  104 |
| 101 | 1893 |   83 |  110 |  164 |  183 |  222 |  266 |  284 | 9999 |  266 |  197 |  142 |   93 |
| 101 | 1894 |   86 |  100 |  134 |  159 |  190 |  252 |  291 | 9999 |  255 |  201 |  150 |  100 |
| 101 | 1895 |   87 |  137 |  138 |  179 |  193 |  246 |  302 | 9999 |  270 |  221 |  159 |  111 |
| 101 | 1896 |   94 |  104 |  137 |  150 |  181 |  247 |  301 |  266 |  262 |  173 |  108 |   93 |
| 101 | 1897 |   97 |  110 |  154 |  174 |  207 | 9999 |  295 |  296 | 9999 |  194 |  156 |  100 |
| 101 | 1898 |  107 |   98 |  126 |  155 |  198 |  256 |  305 |  290 |  255 |  201 |  145 |   93 |
| 101 | 1899 |  101 |  135 |  139 |  183 |  219 |  240 |  290 |  297 |  264 |  233 |  157 |  104 |
| 101 | 1900 |   96 |  143 |  128 |  156 |  188 |  251 |  279 |  278 |  257 |  202 |  130 |   94 |
| 101 | 1901 |   92 |   89 |  124 |  175 |  189 |  280 |  294 |  289 |  242 |  174 |  136 |   96 |
| 101 | 1902 |   85 |  115 |  140 |  177 |  178 |  247 |  317 |  303 |  254 |  177 |  148 |  104 |
| 101 | 1903 |  106 |  101 |  144 |  164 |  199 |  236 |  289 |  301 |  243 |  209 |  140 |  101 |
| 101 | 1904 |   92 |  113 |  125 |  165 |  228 |  262 |  298 |  307 |  249 |  199 |  136 |  115 |
| 101 | 1905 |   84 |   83 |  148 |  190 |  199 |  252 |  295 |  303 |  246 |  186 |  149 |   96 |
| 101 | 1906 |  103 |   94 |  131 |  154 |  195 |  259 |  282 |  295 |  263 |  196 |  135 |   98 |
| 101 | 1907 |   86 |  105 |  149 |  197 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  133 |
| 101 | 1908 |  106 |  100 |  114 |  138 |  225 |  235 |  284 |  292 |  263 |  199 |  157 |  114 |
| 101 | 1909 |   77 |   88 |  137 |  181 |  204 |  232 |  279 |  290 | 9999 |  199 |  150 |  118 |
| 101 | 1910 |   86 |  114 |  127 |  160 |  180 |  256 |  296 |  280 |  230 |  209 |  138 |  117 |
| 101 | 1911 |   79 |  114 |  127 |  155 |  190 |  252 |  295 |  299 |  263 |  202 |  140 |  119 |
| 101 | 1912 |  106 |  143 |  154 |  154 |  223 |  254 |  272 |  267 |  218 |  190 |  118 |   88 |
| 101 | 1913 |  107 |  108 |  134 |  156 |  202 |  265 |  284 |  288 |  239 |  203 |  155 |  104 |
| 101 | 1914 |   88 |  117 |  144 |  194 |  208 |  236 |  281 | 9999 |  257 |  188 |  139 |  101 |
| 101 | 1921 |   92 |  124 |  126 |  144 |  191 |  250 | 9999 | 9999 | 9999 |  216 |  131 |   90 |
| 101 | 1922 |   97 |  112 |  129 |  167 |  219 |  245 | 9999 | 9999 | 9999 |  199 |  138 |   91 |
| 101 | 1923 |   75 |  114 |  138 |  151 |  200 |  227 | 9999 | 9999 | 9999 |  214 |  140 |   83 |
| 101 | 1924 |  102 |  101 |  144 |  170 |  245 |  265 | 9999 | 9999 | 9999 |  198 |  145 | 9999 |
| 101 | 1925 | 9999 |  107 |  138 |  159 |  191 | 9999 |  271 |  301 |  245 |  180 |  134 | 9999 |
| 101 | 1926 |  105 |  136 |  142 |  172 |  195 | 9999 |  296 | 9999 | 9999 |  230 |  137 | 9999 |
| 101 | 1927 | 9999 |  110 |  147 |  175 |  226 | 9999 | 9999 | 9999 | 9999 |  201 |  144 |  118 |
| 101 | 1928 |   99 |  117 |  141 |  172 |  189 |  276 | 9999 | 9999 | 9999 |  198 |  131 |   94 |
| 101 | 1929 |   89 |  115 |  142 |  179 |  202 |  255 |  296 |  282 |  252 |  184 |  132 |  114 |
| 101 | 1930 |  109 |   97 |  143 |  150 |  205 |  241 |  279 |  299 |  252 |  216 |  156 |  123 |
| 101 | 1931 |  101 |   94 |  158 |  175 |  214 |  288 | 9999 | 9999 | 9999 |  201 |  150 |   85 |
| 101 | 1932 |   94 |   95 |  141 |  156 |  208 |  246 |  272 |  294 | 9999 | 9999 |  143 | 9999 |
| 101 | 1933 | 9999 |  113 |  136 |  177 |  230 |  240 |  300 |  307 |  267 |  215 |  126 | 9999 |
| 101 | 1934 |   91 |   92 |  111 |  156 |  200 |  264 |  310 |  277 |  256 |  187 |  145 |  123 |
| 101 | 1935 |   76 |  101 |  134 |  170 |  185 |  279 |  307 |  300 |  271 |  179 |  139 |  120 |
| 101 | 1936 |  123 |  131 |  136 | 9999 |  177 |  234 |  298 |  289 |  264 |  172 |  131 |   88 |
| 101 | 1937 |  106 |  124 |  138 |  177 |  208 |  254 |  304 |  305 |  242 |  194 |  163 |   95 |
| 101 | 1938 |   95 |   94 |  131 |  157 |  193 |  288 |  300 |  290 |  242 | 9999 |  147 |  108 |
| 101 | 1939 |  113 |  110 |  116 |  145 |  173 |  236 |  296 |  280 |  250 |  204 |  145 |  109 |
| 101 | 1940 |  102 |  134 |  168 |  179 |  208 |  229 |  288 |  287 |  257 |  189 |  150 |   86 |
| 101 | 1941 | 9999 |  125 |  138 |  164 |  180 |  251 |  287 |  299 |  250 |  192 |  131 |   96 |
| 101 | 1942 |   92 |   89 |  152 |  177 |  224 |  260 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1944 |   83 | 9999 | 9999 | 9999 |  205 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1945 | 9999 |  116 | 9999 | 9999 | 9999 | 9999 | 9999 |  281 |  262 |  190 | 9999 | 9999 |
| 101 | 1946 | 9999 |   76 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1947 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  296 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1948 |  124 |  131 | 9999 | 9999 | 9999 |  257 |  276 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1880 | 9999 | 9999 | 9999 |  165 |  186 |  232 |  267 |  262 |  240 |  205 |  153 |  119 |
| 101 | 1881 |  140 |  143 |  165 |  180 |  199 |  223 |  257 |  267 |  241 |  190 |  153 |  114 |
| 101 | 1882 |  111 |  115 |  130 |  169 |  194 |  228 |  245 | 9999 |  221 |  185 |  151 |  122 |
| 101 | 1883 |  121 |  115 |  127 |  158 |  195 |  225 |  254 |  248 |  228 |  184 |  155 |  112 |
| 101 | 1884 |  100 |  125 |  126 |  150 |  176 |  202 |  223 |  249 |  225 |  183 |  155 |  125 |
| 101 | 1885 | 9999 |  154 |  146 |  159 |  201 |  226 |  251 |  264 |  234 |  179 |  152 | 9999 |
| 101 | 1886 | 9999 | 9999 |  159 |  172 |  202 |  228 |  250 |  248 |  235 |  196 |  157 | 9999 |
| 101 | 1887 | 9999 | 9999 |  151 |  158 |  196 |  238 |  260 |  267 |  240 |  175 |  168 |  131 |
| 101 | 1888 | 9999 | 9999 |  144 |  168 |  195 |  230 |  250 |  231 |  218 |  195 |  152 |  143 |
| 101 | 1889 |  110 |  127 |  132 |  151 |  177 |  202 |  246 |  249 |  223 |  190 |  156 |  105 |
| 101 | 1890 |  118 |  118 |  125 |  156 |  170 |  220 |  233 |  243 |  213 |  190 |  143 |  116 |
| 101 | 1891 |   96 |  104 |  139 |  167 |  187 |  206 |  249 |  248 |  239 |  210 |  171 |  125 |
| 101 | 1892 |  123 |  136 |  157 |  156 |  186 |  226 |  251 |  243 |  231 |  189 |  160 |  129 |
| 101 | 1893 |  109 |  124 |  155 |  175 |  203 |  235 |  244 |  251 |  245 |  199 |  163 |  126 |
| 101 | 1894 |  118 |  115 |  139 |  159 |  179 |  202 |  239 |  248 |  220 |  198 |  162 |  128 |
| 101 | 1895 |  128 |  160 |  161 |  176 |  209 |  237 | 9999 |  270 |  244 |  222 |  174 |  150 |
| 101 | 1896 |  126 |  122 |  143 |  147 |  177 |  215 |  249 |  230 |  232 |  175 |  132 |  124 |
| 101 | 1897 |  115 |  122 |  159 |  172 |  184 |  219 |  252 |  256 |  227 |  198 |  172 |  134 |
| 101 | 1898 |  131 |  120 |  136 |  153 |  181 |  213 |  232 |  245 |  231 |  200 |  153 |  122 |
| 101 | 1899 |  126 |  150 |  148 |  183 |  204 |  220 |  233 |  252 |  243 |  228 |  177 |  135 |
| 101 | 1900 |  130 |  166 |  137 |  161 |  185 |  222 |  233 |  250 |  236 |  205 |  151 |  124 |
| 101 | 1901 |  125 |  118 |  145 |  170 |  184 |  237 |  250 |  251 |  235 |  183 |  157 |  121 |
| 101 | 1902 |  101 |  145 |  146 |  179 |  177 |  207 |  250 |  260 |  230 |  184 |  161 |  123 |
| 101 | 1903 |  127 |  117 |  146 |  156 |  178 |  208 |  230 |  246 |  221 |  200 |  154 |  120 |
| 101 | 1904 |  119 |  130 |  133 |  156 |  187 |  216 |  255 |  259 |  225 |  197 |  154 |  140 |
| 101 | 1905 |  113 |  101 |  158 |  175 |  180 |  218 |  240 |  249 |  224 |  188 |  153 |  115 |
| 101 | 1906 |  121 |  116 |  141 |  150 |  181 |  212 | 9999 |  245 |  227 |  195 |  143 |  114 |
| 101 | 1907 |   99 |  106 |  125 |  156 |  168 |  216 |  222 |  231 |  221 |  180 |  164 |  135 |
| 101 | 1908 |  110 |  106 | 9999 |  140 |  176 |  199 |  230 |  241 |  234 |  186 |  164 |  130 |
| 101 | 1909 |  106 |  113 |  137 |  148 |  176 |  210 |  225 |  244 |  208 |  190 |  161 |  140 |
| 101 | 1910 |  118 |  132 |  125 |  151 |  175 |  211 |  239 |  241 |  219 |  200 | 9999 | 9999 |
| 101 | 1911 | 9999 |  122 |  132 |  151 |  175 |  207 |  234 |  250 |  241 |  196 | 9999 | 9999 |
| 101 | 1912 |  132 |  156 |  161 | 9999 |  200 |  218 |  233 |  243 |  208 |  185 |  138 |  113 |
| 101 | 1913 |  131 |  120 |  136 |  153 |  186 |  212 |  239 |  241 |  217 |  194 |  163 |  126 |
| 101 | 1914 |  109 |  135 |  147 |  166 |  190 |  204 |  233 |  236 |  226 |  188 |  152 |  127 |
| 101 | 1924 |  127 |  124 |  152 |  165 |  204 |  220 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1927 | 9999 |  132 |  153 |  164 |  200 |  228 |  242 | 9999 | 9999 |  204 |  167 |  148 |
| 101 | 1928 |  123 |  138 |  158 |  168 |  177 |  220 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |
| 101 | 1929 |  123 |  144 |  145 |  176 |  186 |  222 | 9999 |  252 |  241 |  196 |  156 |  146 |
| 101 | 1930 |  134 |  119 |  154 |  157 |  192 |  211 |  238 |  252 |  237 |  212 |  175 |  146 |
| 101 | 1852 |   97 | 9999 |  121 |  146 |  171 |  212 |  234 |  237 |  216 |  184 |  160 |  118 |
| 101 | 1853 |  112 |   94 |  111 |  158 |  179 |  203 |  236 |  250 |  214 |  169 |  131 |  102 |
| 101 | 1854 |   98 | 9999 |  108 |  151 |  175 |  207 |  229 |  238 |  217 |  166 |  123 | 9999 |
| 101 | 1855 | 9999 |  131 |  122 |  146 |  176 |  178 |  239 |  237 |  213 | 9999 |  130 |  106 |
| 101 | 1856 |  122 |  109 |  135 |  144 |  188 |  210 |  229 |  236 |  212 |  156 |  117 |  122 |
| 101 | 1857 |   81 |   99 |  117 |  146 |  159 |  205 |  226 |  229 |  217 |  171 |  132 |  103 |
| 101 | 1858 |   80 |  106 |  120 |  154 |  171 |  217 |  219 |  241 |  225 |  182 |  171 |  111 |
| 101 | 1859 |   82 |   94 |  111 |  161 |  171 |  200 |  231 |  238 |  219 |  159 |  135 |  103 |
| 101 | 1860 |  116 |   79 |  117 |  141 |  175 |  211 |  223 |  230 |  200 |  163 |  151 |  128 |
| 101 | 1861 |   72 |  111 |  122 |  142 |  171 |  210 |  225 |  229 |  209 |  191 |  153 |  116 |
| 101 | 1862 |   98 |  131 |  138 |  160 |  192 |  212 |  229 |  238 |  198 |  176 |  125 |   98 |
| 101 | 1863 |  107 |   92 |  115 |  139 |  164 |  202 |  237 |  235 |  204 |  176 |  158 | 9999 |
| 101 | 1864 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 | 9999 |  101 |
| 101 | 1865 |  107 |  111 |  110 |  149 |  170 |  209 |  243 |  245 |  227 |  187 |  146 |  100 |
| 101 | 1866 |   98 |  121 |  124 |  150 |  175 |  208 |  242 |  247 |  225 |  183 |  152 | 9999 |
     
#   #+end_src

   and country code data

#   #+begin_src org

#+results: country-code-file
: v2.slp.country.codes

#+source: country-codes
#+headers: :var base=url-base
#+begin_src sh :var file=country-code-file :cache yes
  curl $base$file |sed 's/ *$//' \
      |sed 's/ \(.*\)$/,"\1"/'
#+end_src

#+results[3e6fa3b5256c91da4d7fc66a8088d29280778cbd]: country-codes
| 101 | ALGERIA                                 |
| 102 | ANGOLA                                  |
| 103 | BENIN                                   |
| 104 | BOTSWANA                                |
| 105 | BURKINA FASO                            |
| 106 | BURUNDI                                 |
| 107 | CAMEROON                                |
| 108 | CAPE VERDE                              |
| 109 | CENTRAL AFRICAN REPUBLIC                |
| 110 | CHAD                                    |
| 111 | COMOROS                                 |
| 112 | CONGO                                   |
| 113 | COTE D'IVOIRE                           |
| 114 | DJIBOUTI                                |
| 115 | EGYPT                                   |
| 116 | ERITREA                                 |
| 117 | ETHIOPIA                                |
| 118 | GABON                                   |
| 119 | GHANA                                   |
| 120 | GUINEA                                  |
| 121 | GUINEA-BISSAU                           |
| 122 | KENYA                                   |
| 123 | LIBERIA                                 |
| 124 | LIBYA                                   |
| 125 | MADAGASCAR                              |
| 126 | MALAWI                                  |
| 127 | MALI                                    |
| 128 | MAURITANIA                              |
| 129 | MAURITIUS                               |
| 130 | MOROCCO                                 |
| 131 | MOZAMBIQUE                              |
| 132 | NAMIBIA                                 |
| 133 | NIGER                                   |
| 134 | NIGERIA                                 |
| 136 | SAO TOME AND PRINCIPE                   |
| 137 | SENEGAL                                 |
| 138 | SEYCHELLES                              |
| 139 | SIERRA LEONE                            |
| 140 | SOMALIA                                 |
| 141 | SOUTH AFRICA                            |
| 148 | SUDAN                                   |
| 149 | TANZANIA                                |
| 150 | THE GAMBIA                              |
| 151 | TOGO                                    |
| 152 | TUNISIA                                 |
| 153 | UGANDA                                  |
| 154 | ZAIRE                                   |
| 155 | ZAMBIA                                  |
| 156 | ZIMBABWE                                |
| 157 | AMSTERDAM ISLAND (FRANCE)               |
| 158 | ASCENSION ISLAND (U.K.)                 |
| 159 | CANARY ISLANDS (SPAIN)                  |
| 160 | CEUTA (SPAIN)                           |
| 161 | CHAGOS ARCHIPELAGO (U.K.)               |
| 162 | LESOTHO                                 |
| 163 | MAYOTTE (FRANCE)                        |
| 164 | MELILLA (SPAIN)                         |
| 165 | REUNION ISLAND (FRANCE)                 |
| 166 | RWANDA                                  |
| 167 | SWAZILAND                               |
| 168 | TROMELIN ISLAND (FRANCE)                |
| 169 | WESTERN SAHARA (MOROCCO)                |
| 201 | AFGHANISTAN                             |
| 202 | BAHRAIN                                 |
| 203 | BANGLADESH                              |
| 204 | CAMBODIA                                |
| 205 | CHINA                                   |
| 206 | DEMOCRATIC PEOPLE'S REPUBLIC OF KOREA   |
| 207 | INDIA                                   |
| 208 | IRAN                                    |
| 209 | IRAQ                                    |
| 210 | JAPAN                                   |
| 211 | KAZAKHSTAN                              |
| 212 | KUWAIT                                  |
| 213 | KYRGYZSTAN                              |
| 214 | LAOS                                    |
| 215 | MONGOLIA                                |
| 216 | MYANMAR                                 |
| 217 | NEPAL                                   |
| 218 | OMAN                                    |
| 219 | PAKISTAN                                |
| 220 | QATAR                                   |
| 221 | REPUBLIC OF KOREA                       |
| 222 | RUSSIAN FEDERATION (ASIAN SECTOR)       |
| 223 | SAUDI ARABIA                            |
| 224 | SRI LANKA                               |
| 227 | TAJIKISTAN                              |
| 228 | THAILAND                                |
| 229 | TURKMENISTAN                            |
| 230 | UNITED ARAB EMIRATES                    |
| 231 | UZBEKISTAN                              |
| 232 | VIETNAM                                 |
| 233 | YEMEN                                   |
| 234 | MACAU (PORTUGAL)                        |
| 235 | MALDIVES                                |
| 236 | TAIWAN                                  |
| 301 | ARGENTINA                               |
| 302 | BOLIVIA                                 |
| 303 | BRAZIL                                  |
| 304 | CHILE                                   |
| 305 | COLOMBIA                                |
| 306 | ECUADOR                                 |
| 307 | GUYANA                                  |
| 308 | PARAGUAY                                |
| 309 | PERU                                    |
| 312 | SURINAME                                |
| 313 | URUGUAY                                 |
| 314 | VENEZUELA                               |
| 315 | FRENCH GUIANA (FRANCE)                  |
| 316 | FALKLAND ISLANDS (U.K.)                 |
| 317 | SOUTH GEORGIA (U.K.)                    |
| 401 | BARBADOS                                |
| 402 | BELIZE                                  |
| 403 | CANADA                                  |
| 405 | COSTA RICA                              |
| 406 | CUBA                                    |
| 407 | DOMINICAN REPUBLIC                      |
| 408 | EL SALVADOR                             |
| 409 | GRENADA                                 |
| 410 | GUATEMALA                               |
| 411 | HAITI                                   |
| 412 | HONDURAS                                |
| 413 | JAMAICA                                 |
| 414 | MEXICO                                  |
| 415 | NICARAGUA                               |
| 416 | PANAMA                                  |
| 417 | SAINT KITTS AND NEVIS                   |
| 423 | THE BAHAMAS                             |
| 424 | TRINIDAD AND TOBAGO                     |
| 425 | UNITED STATES OF AMERICA                |
| 426 | ANTIGUA AND BARBUDA                     |
| 427 | BERMUDA (U.K.)                          |
| 428 | BRITISH VIRGIN ISLANDS (U.K.)           |
| 429 | CAYMAN ISLANDS (U.K.)                   |
| 430 | DOMINICA                                |
| 431 | GREENLAND (DENMARK)                     |
| 432 | GUADELOUPE (FRANCE)                     |
| 433 | MARTINIQUE (FRANCE)                     |
| 434 | NETHERLANDS ANTILLES (NETHERLANDS)      |
| 435 | PUERTO RICO (U.S.A.)                    |
| 436 | SAINT LUCIA                             |
| 437 | SAINT VINCENT AND THE GRENADINES        |
| 438 | SAINT PIERRE & MIQUELON ISLAND (FRANCE) |
| 439 | TURKS AND CAICOS ISLANDS                |
| 440 | VIRGIN ISLANDS (U.S.A.)                 |
| 501 | AUSTRALIA                               |
| 502 | FIJI                                    |
| 503 | INDONESIA                               |
| 504 | KIRIBATI                                |
| 505 | MALAYSIA                                |
| 506 | NAURU                                   |
| 507 | NEW ZEALAND                             |
| 508 | PAPUA NEW GUINEA                        |
| 509 | PHILIPPINES                             |
| 511 | SINGAPORE                               |
| 512 | SOLOMON ISLANDS                         |
| 517 | TONGA                                   |
| 518 | TUVALU                                  |
| 520 | VANUATU                                 |
| 521 | AMERICAN SAMOA (U.S.A.)                 |
| 522 | BRUNEI                                  |
| 523 | CHRISTMAS ISLAND (AUSTRALIA)            |
| 524 | COCOS ISLANDS (AUSTRALIA)               |
| 525 | COOK ISLANDS (NEW ZEALAND)              |
| 526 | CORAL SEA ISLANDS (AUSTRALIA)           |
| 527 | FEDERATED STATES OF MICRONESIA          |
| 528 | FRENCH POLYNESIA (FRANCE)               |
| 529 | GUAM (U.S.A.)                           |
| 530 | JOHNSTON ATOLL (U.S.A.)                 |
| 531 | MARSHALL ISLANDS                        |
| 532 | NEW CALEDONIA (FRANCE)                  |
| 533 | NIUE (NEW ZEALAND)                      |
| 534 | NORFOLK ISLAND (AUSTRALIA)              |
| 535 | NORTHERN MARIANA ISLANDS (U.S.A.)       |
| 536 | BELAU                                   |
| 537 | PITCAIRN ISLAND (U.K.)                  |
| 538 | TOKELAU                                 |
| 539 | WAKE ISLAND (U.S.A.)                    |
| 540 | WALLIS AND FUTUNA (FRANCE)              |
| 541 | SAMOA                                   |
| 601 | ALBANIA                                 |
| 602 | ARMENIA                                 |
| 603 | AUSTRIA                                 |
| 604 | AZERBAIJAN                              |
| 605 | BELARUS                                 |
| 606 | BELGIUM                                 |
| 607 | BOSNIA AND HERZEGOVINA                  |
| 608 | BULGARIA                                |
| 609 | CROATIA                                 |
| 610 | CYPRUS                                  |
| 611 | CZECH REPUBLIC                          |
| 612 | DENMARK                                 |
| 613 | ESTONIA                                 |
| 614 | FINLAND                                 |
| 615 | FRANCE                                  |
| 616 | GEORGIA                                 |
| 617 | GERMANY                                 |
| 618 | GREECE                                  |
| 619 | HUNGARY                                 |
| 620 | ICELAND                                 |
| 621 | IRELAND                                 |
| 622 | ISRAEL                                  |
| 623 | ITALY                                   |
| 624 | JORDAN                                  |
| 625 | KAZAKHSTAN                              |
| 626 | LATVIA                                  |
| 627 | LEBANON                                 |
| 628 | LITHUANIA                               |
| 629 | LUXEMBOURG                              |
| 630 | MALTA                                   |
| 631 | MOLDOVA                                 |
| 632 | MONTENEGRO                              |
| 633 | NETHERLANDS                             |
| 634 | NORWAY                                  |
| 635 | POLAND                                  |
| 636 | PORTUGAL                                |
| 637 | ROMANIA                                 |
| 638 | RUSSIAN FEDERATION (EUROPEAN SECTOR)    |
| 639 | SERBIA                                  |
| 641 | SLOVAKIA                                |
| 642 | SLOVENIA                                |
| 643 | SPAIN                                   |
| 645 | SWEDEN                                  |
| 646 | SWITZERLAND                             |
| 647 | SYRIA                                   |
| 648 | MACEDONIA                               |
| 649 | TURKEY                                  |
| 650 | UKRAINE                                 |
| 651 | UNITED KINGDOM                          |
| 652 | FAROE ISLANDS (DENMARK)                 |
| 653 | GIBRALTAR (U.K.)                        |
| 654 | MADEIRA ISLANDS (PORTUGAL)              |
| 700 | ANTARCTICA                              |
| 800 | SHIP STATIONS                           |

#   #+end_src

   from the web.

2) Next the output of the first two blocks is cross referenced and
   used to create a local sqlite database of the data.

# #+begin_src org

#+headers: :var temps=raw-temps
#+headers: :var countries=country-codes[1:-1,0:1]
#+begin_src sqlite :db climate.sqlite
  create table temps (country,year,jan,feb,
         mar,apr,may,jun,jul,aug,sep,oct,nov,dec);
  create table countries (code, name);
  .separator ","
  .import $temps temps
  .import $countries countries
#+end_src

#+results:

# #+end_src

3) Data from this new database is then called from R to initialize
   local variables inside of a /session/.  Creating these variables in
   a persistent session allows the variables to be persisted and used
   by later code blocks.

#   #+begin_src org

#+headers: :var temps=raw-temps
#+headers: :var countries=country-codes
#+begin_src R :session *R*
NULL
#+end_src

#+results:

#   #+end_src

4) Finally the persistent variables in the R session are used to
   generate figures of the climate data.
#   #+begin_src org
 
#+begin_src R :session *R* :file temp-plot.png
  names(countries) <- c("Code","Country")
  colnames(temps) <- c("CountryCode","Year",
                       "Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")
  temps[temps == 9999] <- NA
  temps$Country <- countries$Country[match(temps$CountryCode, countries$Code)]
  country.temps <- split(temps[-1], factor(temps$Country))
  
  plot(Jul ~ Year, data=country.temps$ALGERIA)
#+end_src

#+results:
[[file:temp-plot.png]]

#   #+end_src

* Discussion
  :PROPERTIES:
  :CUSTOM_ID: conclusion
  :END:
** Strengths
   :PROPERTIES:
   :CUSTOM_ID: points-for
   :END:

Babel has several features that make it a productive tool for composing
combined natural and computational language documents.

- Open source :: Babel is /open source/, which means its inner
     workings are publicly visible, and its copyright is
     owned by the Free Software Foundation \cite{fsf}, which means that
     Babel, and any work deriving from Babel, will always be fully open
     to public scrutiny and modification.  These are *essential*
     qualities for software tools used for reproducible research.

- Friendly active community :: The Org-mode community is extremely
     friendly, which makes it easy for novices to get help on how to
     use Babel, and for developers to discuss ideas on how to improve
     and extend it.  Without this community the Babel project would
     never have reached a useable state.

- General :: A leading drive in the design of Babel was pursuit of
     generality.  As a result, it displays no reproducible research or
     literate programming bias.  Babel supports arbitrary programming
     languages, and through Org-mode it exports to a wide variety of
     file types, including ASCII, LaTeX, HTML, and DocBook.

- Integration :: Babel leverages the sophisticated editing modes
     available in Emacs for both natural and computational languages.

** Directions for Future Development
   :PROPERTIES:
   :CUSTOM_ID: future-work
   :END:

These items indicate a number of paths for future work, either for
further development of Babel, or for a future tool of this type.

- editor agnostic :: Babel was developed within the rich framework of
     Emacs and Org-mode, which made the idea of Babel possible in the
     first place.  Now that Babel is developed, however, the tie to a single
     editing environment, even one as completely configurable as
     Emacs, means that Babel is less general than it might be.
     It seems that it would be possible for future tools of this
     nature to provide code evaluation and exportation as a service
     which could be called from any number of editors.  Such a
     structure would raise a number of challenging implementation
     issues.

- virtual machine :: Babel allows heterogeneous programming
     environments to share data by dropping all shared values to the
     common denominator of Emacs Lisp.  This works well for Babel as
     it allows for re-use of many pre-existing Emacs tools for
     evaluation of code in a variety of language, often making the
     addition of support for new languages trivial.  There are however
     properties of Emacs Lisp which make it less than ideal as a
     medium of data exchange and as a shepherd of evaluation.  Most
     importantly the Emacs Lisp interpreter is /single threaded/,
     which makes the asynchronous evaluation of code blocks needlessly
     complex (in fact this feature does not yet exist in Babel).

This leaves dangling the question of whether and why asynchronous
evaluation is useful.  TD

** Conclusion
Babel simultaneously satisfies the software requirements of
reproducible research and literate programming; it is in effect both a
/compendium/ and a /web/.  The Babel environment, used in combination
with a suitable version control tool, satisfies the requirements for
authoring, auxiliary, transformation, quality control and distribution
software set out by Gentleman and Temple Lang in their formulation of
a compendium.  In addition, Babel already accomplishes three of the
four goals of their "future work", namely support for /multiple
languages/, /conditional chunks/ (where "chunks" are blocks of text or
code), and /interactivity/, which refers to Babel's ability to execute
code from within the authoring environment.

What is the fourth goal that Babel doesn't accomplish?  TD

Babel is a full featured /web/ tool.  It supports both /tangling/ and
/weaving/ of code, as well as a sophisticated code block reference
system along the lines of =noweb=.  Additionally the executability of
code blocks in Babel allows for interactive development, and
integration of test suites in a manner not supported in previous
literate programming systems.

Perhaps here we should discuss the kinds of projects that Babel has
been used to accomplish instead of the following two paragraphs?  I'm
a bit concerned that "ease of use" contradicts the "complex
configuration" problems discussed above.  TD

Through making it possible to adopt literate programming and
reproducible research practices while retaining a familiar editing
environment, Babel significantly lowers the barrier of entry for both
of these techniques.  Through encouraging all stages of the research
and development cycle to take place within a single document Babel
ensures that the code, data, and text relevant to a project will be
collocated, reducing the burden on the author of compiling such pieces
after the fact.  Difficulty of use and adoption has served as a major
barrier to previous literate programming and reproducible research
systems.  We believe that with its ease of adoption, familiar
environment, and universal applicability across programming languages,
Babel represents a significant, qualitative advance in literate
programming and reproducible research tools.

As such we believe Babel has the potential to significantly increase
the widespread expectation that all computational projects include
/both/ code and prose; code should be accompanied by explanatory
prose, and any discussion of computational experimental results should
include the relevant code and data.  It is the authors hope that this
work will ultimately help both software developers and scientists to
communicate and to make their work more accessible.

#+begin_LaTeX
  \bibliographystyle{abbrv}
  \small
  \bibliography{babel}
#+end_LaTeX

* COMMENT Tasks
** TODO include Author information
The following looks like little much on the title page, I guess leave
this until there's an actual template for us to use.
#+begin_src latex
  \author{Eric Schulte\\
  \small Department of Computer Science\\
  \small University of New Mexico\\
  \small 1 University of New Mexico\\
  \small Albuquerque, NM 87131\\
  \small United States of America\\
  \small eschulte@cs.unm.edu
  \and
  Dan Davison\\
  \small Mathematical Genetics and Bioinformatics Group\\
  \small Department of Statistics\\
  \small University of Oxford\\
  \small 1 South Parks Road\\
  \small Oxford OX1 3TG\\
  \small United Kingdom\\
  \small dandavison7@gmail.com
  \and
  Carsten Dominik\\
  \small Sterrenkundig Instituut "Anton Pannekoek"\\
  \small University of Amsterdam,\\
  \small Science Park 904\\
  \small 1098 XH Amsterdam\\
  \small The Netherlands\\
  \small Department of Astrophysics\\
  \small Radboud University Nijmegen, P.O. Box\\
  \small 9010, NL-6500 GL Nijmegen\\
  \small The Netherlands\\
  \small email: dominik@uva.nl
  \and
  Thomas S. Dye\\
  \small T. S. Dye \& Colleagues, Archaeologists, Inc.\\
  \small tsd@tsdye.com
  }
#+end_src

** TODO URL for Org source of the document
The document (and anything else needed to recreate the pdf) should be
made available on the web, and the URL should be published in the
paper.
** TODO Implement R examples in RR example
** TODO Enclose all blocks and results in org blocks
** TODO Is this indexing correct?
#+headers: :var countries=country-codes[1:-1,0:1]
* COMMENT publish
turn on the listings package, and define the =twocolumn= latex class
#+begin_src emacs-lisp :results silent
  (require 'org-latex)
  
  ;; use latex listings for fontified code blocks
  (set-default 'org-export-latex-listings t)
  
  ;; two column export
  (add-to-list 'org-export-latex-classes
               '("twocolumn" "\\documentclass[10pt, twocolumn]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  
  ;; replace nasty single-quotes returned by R
  (add-hook 'org-export-latex-final-hook
            (lambda ()
              (replace-regexp "’" "'")))
  
  ;; export the bodies of org-mode blocks
  (setq org-babel-default-header-args:org
        '((:results . "raw silent")))
#+end_src

* Footnotes

[fn:1] These confirmation requests can be stifled by customizing the
=org-confirm-babel-evaluate= variable.

[fn:2] This implementation of Cocktail Sort is adapted from
http://rosettacode.org/.

