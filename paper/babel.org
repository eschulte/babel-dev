# -*- mode: org, org-export-latex-listings: t org-export-latex-image-default-option: "width=0.4\\textwidth" -*-
#+TITLE: A Computing Environment for Mixed Natural and Computer Language Documents /DRAFT/
#+AUTHOR: Eric Schulte \and Dan Davison \and Carsten Dominik \and Thomas Dye
#+OPTIONS: ^:nil toc:nil H:4
#+STARTUP: oddeven
#+STYLE: <link rel="stylesheet" href="http://cs.unm.edu/~eschulte/classes/emacs.css" type="text/css"/>  
#+LATEX_HEADER: \usepackage{attrib}
#+LATEX_HEADER: \usepackage{mathpazo}
#+LATEX_HEADER: \usepackage{listings}
#+LATEX_HEADER: \usepackage{thumbpdf}
#+LaTeX_CLASS: twocolumn
#+begin_latex
  \lstdefinelanguage{org}
  {
    morekeywords={:results, :session, :var, :noweb, :exports},
    sensitive=false,
    morecomment=[l]{\#},
    morestring=[b]",
  }
  \lstdefinelanguage{dot}
  {
    morekeywords={graph},
    sensitive=false,
  }
  \hypersetup{
    linkcolor=blue,
    pdfborder={0 0 0 0}
  }
  \renewcommand\t[1]{{\tt #1}}
  \newcommand\ATCES{{\sf atce/r}}
  \newcommand\lt[1]{{\lstinline+#1+}}
  \definecolor{dkgreen}{rgb}{0,0.5,0}
  \definecolor{dkred}{rgb}{0.5,0,0}
  \definecolor{gray}{rgb}{0.5,0.5,0.5}
  \lstset{basicstyle=\ttfamily\bfseries\scriptsize,
    morekeywords={virtualinvoke,fucompp,fnstsw,fldl,fstpl,movl},
    keywordstyle=\color{blue},
    ndkeywordstyle=\color{red},
    commentstyle=\color{dkred},
    stringstyle=\color{dkgreen},
    numbers=left,
    numberstyle=\ttfamily\footnotesize\color{gray},
    stepnumber=1,
    numbersep=10pt,
    backgroundcolor=\color{white},
    tabsize=4,
    showspaces=false,
    showstringspaces=false,
    xleftmargin=.23in
  }
#+end_latex

#+LaTeX: \begin{abstract}
We present a new computing environment for authoring mixed natural and
computer language documents. In this environment a single
hierarchically-organized plain text source file may contain a variety
of elements such as code in arbitrary programming languages, raw data,
links to external resources, project management data, working notes,
and text for publication. Code fragments may be executed in situ with
graphical, numerical and text output captured in, or linked to, the
file. Export to LaTeX, HTML, LaTeX Beamer, DocBook and other formats
permits working reports, presentations and manuscripts for publication
to be generated from the file. In addition, code extraction (tangling)
permits functioning pure code files to be extracted from the
file. This environment is implemented as an extension to the Emacs
text editor and provides a rich set of features for authoring both
prose and code, as well as sophisticated project management
capabilities.
#+LaTeX: \end{abstract}

* Introduction
There are a variety of settings in which it is desirable to mix prose
and code in a single container.
- /Scientific research/ increasingly involves the use of computational
  tools. Successful communication and verification of research results
  requires that this code is distributed together with results and
  explanatory prose.
- In /software development/ the exchange of ideas is accomplished
  through both shared code and prose; code provides concrete and
  succinct description and prose provides higher level explanation.
  Without proper documentation the usability and future extensibility
  of computational tools are severely compromised.
- In /pedagogical/ environments it is important for descriptions of
  algorithms or techniques to go hand-in-hand with concrete
  implementations.  These environments range from in-class
  presentations with accompanying algorithmic implementations, to
  online tutorials or experiential blogs with accompanying
  instructions.

In each of the situations described above, prose alone in the absence
of code is typically insufficient.  Similarly, distribution of code
without expository prose is a less than ideal medium for communication
between people. In this paper we describe the plain text markup
language Org-mode, with a focus on its provision of a unified
environment supporting many different approaches to composition and
application of combined prose and code (Table \ref{grid}). Org-mode is
designed for ease of use and adoption, and aims to be a general
solution for authoring projects with mixed computational and natural
languages.  It supports multiple languages, export targets, and work
flows.

#+LaTeX: \begin{table*}
#+ATTR_LaTeX: align=r|c|c|
|             | prose                   | code                            |
|-------------+-------------------------+---------------------------------|
|             | natural document        | natural code authoring          |
| composition | authoring environment   | through Emacs                   |
|             | through Org-mode        | major modes                     |
|-------------+-------------------------+---------------------------------|
|             | automated publishing to | in-situ interactive execution   |
| application | a variety of document   | as well as the tangling of code |
|             | and slideshow formats   | for external use                |
|-------------+-------------------------+---------------------------------|
#+LaTeX: \caption{Org-mode enables both the application and composition of code and prose.}
#+LaTeX: \label{grid}
#+LaTeX: \end{table*}

With Org-mode the entire life cycle of a research or development
project can take place within a single document.  With the data,
code and text of a project stored in a single location which can be
exported to a variety of formats, the future reproducibility of the
work is ensured. Org-mode encourages the practices of Reproducible Research and
Literate Programming by greatly reducing the burden
on the author.

We start by reviewing existing approaches to the combined authoring of prose
and code, including software tools designed to address one or more of
the use cases for mixed natural and computer language documents
(Section \ref{background}).  We then describe the design of Org-mode
(Section \ref{design}), and demonstrate its usage through three
short examples (Section \ref{examples}).  We conclude with a
discussion of why we believe Org-mode constitutes a uniquely
productive environment for authoring mixed prose and code projects
(Section \ref{points-for}), as well as some limits of the current
implementation and directions for future work (Section
\ref{future-work}).

* Background
  :PROPERTIES:
  :CUSTOM_ID: background
  :END:
The combined authoring of prose and code has historically been
approached from two different standpoints.

- Literate Programming :: enhances traditional software development by
     embedding code in explanatory essays and encourages treating the
     act of development as one of communication with future
     maintainers.

- Reproducible Research :: embeds executable code in publications of
     scholarly work, with the aim of allowing the analysis described
     in the paper to be re-run by readers.

We discuss each of these approaches in turn including a review of
existing software tools that support each technique.

** Literate Programming
#+begin_quote
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.

\attrib{Donald E. Knuth}
#+end_quote

The technique of /literate programming/ was introduced by Donald Knuth
\cite{web} in the early 1980's, not long after he created the TeX
typesetting software.  The goals of literate programming are to
encourage the author of a computational work to approach the project
"as an essayist, whose main concern is with exposition and excellence
of style."
# need citation with page number

Accordingly, the input files for literate programming tools mix
sections of computer code with sections of natural language typically
marked up in TeX or LaTeX.  The literate programming tool provides
methods to create two types of /view/ into the document; articles of
typset prose and marked-up code blocks intended for human consumption,
and computer readable documents of pure source code.  The literate
programming terms for generating these views are /weaving/ and
/tangling/, respectively.  A common feature of literate programming
tools is the ability to organize code blocks differently when
/tangling/ and /weaving/, thereby allowing the programmer to introduce
material to humans in a different order than code is introduced to the
computer.

The original literate programming tool, developed by Knuth, was =WEB=,
which consists of two primary programs, =TANGLE= and =WEAVE=
\cite{web}.  This system supported the Pascal programming language and
produced documents typeset with TeX.  Somewhat later, Knuth and Silvio
Levy produced a C language version, =cWeb=
\cite{knuth94:_cweb_system_struc_docum}.  A modern descendent of these
tools is =noweb= \cite{noweb} which is designed to be language
independent.  Its primary programs, =notangle= and =noweave=, are both
written in =C=.  Documents produced by =noweave= can be typeset with
=TeX=, =LaTeX=, and =troff= or displayed in a web browser as =HTML=.
Software tools such as =WEB=, =cWeb=, and =noweb= enable the
/authoring/ of both prose and code, but do not provide facilities for
the execution of code from within documents.  Instead, code intended
for execution is tangled and the resulting source code files are sent
to a compiler or interpreter.

** Reproducible Research
#+begin_quote
An article about computational science in a scientific publication is
*not* the scholarship itself, it is merely *advertising* of the
scholarship.  The actual scholarship is the complete software
development environment and complete set of instructions which
generated the figures.

\attrib{David L. Donoho}
#+end_quote

A research project typically produces one or more documents that
describe or rely upon:
  - a data collection
  - computations and code used in data analysis or simulation
  - methodological conventions and assumptions
  - decisions among alternate analytic paths

The documents produced by a research project typically stand apart
from the things they describe and rely upon, which makes it difficult
for other researchers to understand fully or to reproduce the results
of the research project.
 
A software solution to this problem was proposed by Gentleman and
Temple Lang \cite{compendium}, who "introduce the concept of a
/compendium/ as both a container for the different elements that make
up the document and its computations (i.e. text, code, data, ...), and
as a means for distributing, managing and updating the collection."

They summarize the uses and implications of a compendium:

  - it encapsulates the actual work of the author, not just an
    abridged version suitable for publication; 

  - it can display different levels of detail in /derived documents/; 

  - the computations included in it can be re-run by an interested
    reader, potentially with different inputs;

  - it contains explicit computational details that make it easier for
    an interested reader to adapt and extend the methods;

  - it enables programmatic construction of plots and tables; 

  - its components can be treated as data or inputs to software and
    manipulated programmatically in ways perhaps not envisioned by
    the author.

/Reproducible research/ thus approaches mixed natural and
computational language documents from a different direction than
literate programming.  Rather than adding prose to computational
projects, reproducible research seeks to augment publications of
scientific research with the computer code used during conduct of the
research.  Where literate programming tangles embedded code into an
external file used as input to a compiler or an interpreter, code
embedded in reproducible research is intended to be executed as part
of the document generation process.  In this way the data, analysis,
and figures supporting a publication can be generated from the
publication itself.

# The requirements of a tool supporting reproducible research are
# thoroughly explored by Gentleman and Temple Lang, and presented in the
# concept of a /compendium/ \cite{compendium}.  In their formulation a
# compendium is a container that holds the text, code, and raw data
# constituting a scholarly work.  Compendia are intended to facilitate
# the distribution, management, re-creation, and extension of such
# works.

# A compendium would also support a variety of different /views/, where
# /views/ are static documents automatically generated by /running/ the
# compendium.  Examples of views would be an article submitted for
# publication, or a presentation or lecture based on the work.

Gentleman and Temple Lang propose the adoption of compendia as the
new unit of peer review and distribution of scientific work.

#+begin_quote
The compendium concept, and that of reproducible research, has the
potential to improve the state of publication about computational
science. The tools we have proposed and discussed will allow us to
move from an era of advertisement to one where our scholarship itself
is published. This exposes the computations themselves to the
scientific method and enhances the potential for iterative refinement
and extension.

\attrib{Gentleman and Temple Lang}
#+end_quote

=Sweave= \cite{sweave} is a modern software tool, written in the =R=
statistical programming language \cite{r-software}, that can be used
for reproducible research.  =Sweave= (and the =R= community at large)
inspired the work that led to the /compendium/ idea.  The recent
resurgence in reproducible research owes much to the success of both
=R= and =Sweave=.  =Sweave= documents consist of code blocks of the
=R= statistical programming language embedded into LaTeX documents.
The =R= functions that make up =Sweave= execute the embedded =R= code
and produce a LaTeX document that includes the resulting tables,
graphical figures, and inline results.  If the =Sweave= document is
accompanied by the data files used in the statistical computations
along with any =R= language files that are sourced, then the reader
can trace a result back to the relevant =R= computations and through
to the original data.

# It might be useful to start this section with Lisp and how bottom-up
# programming changes the language to suit the problem.  So emacs
# turned lisp into a language for writing editors, org-mode turned it
# into a language for parsing hierarchical documents, etc., and babel
# turned it into a language for literate programming and reproducible
# research. (no attempt to be precise or exhaustive here).
* Design
  :PROPERTIES:
  :CUSTOM_ID: design
  :END:
At the core of Org-mode is the Emacs text editor \cite{emacs} and
Emacs Lisp \cite{lewis10:_gnu_emacs_lisp_refer_manual}, a dialect of
Lisp that supports editing text documents.  The Emacs editor has been
under development since the mid 1970s and is currently at version 23.
Org-mode extends Emacs with a simple, yet powerful markup language
that turns it into a language for creating and parsing
hierarchically-organized text documents.  It was originally designed
for keeping notes, maintaining task lists, and planning projects.  Its
rich feature set includes text structuring, project management, and a
publishing system that can export to a variety of formats.  Source
code and data are located in active blocks, distinct from text
sections.  Activation means that code and data blocks can be
/evaluated/ to return their contents or their computational results.
The results of code block evaluation can be written to a named data
block in the document, where it can be referred to by other code
blocks, any one of which can be written in a different computing
language.  In this way, an Org-mode buffer becomes a place where
different computer languages communicate with one another.  Like
Emacs, Org-mode is extensible: support for new languages can be added
by the user in a modular fashion through the definition of a small
number of Emacs Lisp functions.  Additionaly, generally useful code or
data blocks can be added to a "Library of Babel", from which they can
be called by any Org-mode document.

In the remainder of this section, we first describe Org-mode, focusing
on those features that support literate programming and reproducible
research (Section \ref{org-mode}).  We then describe the syntax of
code and data blocks (Section \ref{syntax}), evaluation of code blocks
(Section \ref{code-blocks}), weaving and tangling Org-mode documents
(Section \ref{export}), and language support facilities (Section
\ref{languages}).

** Org-mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:

Org-mode is an Emacs extension that organizes note taking, task
management, project planning, documentation and authoring.  Its name
comes from its organizing function and the fact that extensions to
Emacs are often implemented as /modes/.  A mode in Emacs defines the way a
user can edit and interact with certain documents.  Org-mode documents
are plain text files, usually with the file name extension /.org/.
Because Emacs has been ported to a large number of operating systems
Org-mode can be run on a wide variety of devices and its plain text
documents are compatible between arbitrary platforms.

*** Document Structure

The fundamental structure of Org-mode documents is the outline,
comprising a hierarchically arranged collection of nodes.  A
document can have a section of text before the first node, which 
is often used for defining general properties of the document
such as a title, and for technical setup.  Following this initial 
section is a sequence of top-level nodes, each of which is the root 
of a subtree of arbitrary depth.
Nodes in the outline are single line headings identified by one or
more asterisks at the beginning of the line.  The number of asterisks
indicates the hierarchical level of the node, e.g.,

#+begin_src org
  ,* First heading
  ,    Some arbitrary text
  ,* Second heading
  ,** A subsection of the second heading
  ,* Third heading
#+end_src

Each heading line can be followed by arbitrary text,
giving the document the logical structure of a book or article.  The
hierarchical outline structure can be folded at every node, making it
possible to expose selected sections for quick access or to provide a
structural overview of the document.

*** Metadata on Nodes

One of the primary design goals of Org-mode was to define a system
that combines efficient note-taking and brainstorming with a task
management and project planning system.  A single Org-mode document
can hold both notes and all data necessary to keep track of tasks and
projects associated with the notes.  This is accomplished by assigning
metadata to outline nodes using a special syntax.  Metadata for a node
can include a task state, like =TODO= or =DONE=, a priority, and one
or more tags, dates, and arbitrary key-value pairs called properties.
In the following example a top-level node is a task with a "to do"
state, a priority of A, and tagged for urgent attention at work.  The
task has been scheduled for 18 August 2010 and a property indicates
that it was delegated to Peter.

#+begin_src org :exports code
  ,* TODO [#A] Some task         :@work:urgent:
  ,  SCHEDULED: <2010-08-18 Wed>
  ,  :PROPERTIES:
  ,    :delegated_to: Peter 
  ,  :END:
#+end_src

The task and project management functionality of Org-mode is centered
around the metadata associated with nodes.  Org-mode provides
facilities to create and modify metadata quickly and efficiently.  It
also provides facilities to search, sort, and filter headlines, to
display tabular views of selected headlines, to clock in and out of
headlines defined as tasks, and many other tools.

The outline structure of documents also defines a hierarchy of
metadata.  Tags and properties of a node are inherited by its
sub-nodes and views of the document can be designed that sum or
average the properties inherited by a node.  Code blocks live in this
hierarchy of content and metadata, all of which is accessible to and
can be modified by the code.

*** Special Document Content

The text following a headline in an Org-mode document can be
structured to represent various types of information, including
vectors, matrices, source code, and arbitrary pieces of text.  Vector
and matrix data are represented as tables where the columns are marked
by vertical bars and rows are optionally separated by dashed lines as
shown in the following example.  The Emacs calculator, /calc/ ([[David
Gillespie 1990, http://www.gnu.org/software/emacs/calc.html]]), can be
used to carry out computations in tables.  This feature is similar to
spreadsheet applications, but Org-mode uses plain text to represent
both data and formulas.

#+begin_src org
  ,| Name 1 | Name 2 | ... | Name N |
  ,|--------+--------+-----+--------|
  ,| Value  | ...    | ... | ...    |
  ,| ...    | ...    | ... | ...    |
#+end_src

In this paper we focus on the ways in which Org-mode supports working
with source code. Source code in arbitrary languages can be included
in an Org-mode document inside a =#+BEGIN_SRC <LANGUAGE>... #+END_SRC=
pair.  Such source code blocks were originally added to Org-mode in
order to set verbatim, mono-spaced type when publishing to PDF or
HTML, as an aid to creating technical documentation. Org-mode code
blocks leverage existing Emacs source code editing modes for
indentation, coloured syntax highlighting and other language-specific
functionality.

Additional markup is provided with wiki-like syntax, which can be
applied to any piece of text.

[What are examples of this?]

** Code and Data Block Extensions
    :PROPERTIES:
    :CUSTOM_ID: code-blocks
    :END:
Seubsequently, Org-mode gained a naming convention that identifies
code or data blocks making them remotely callable.  In addition, the
syntax of Org-mode code blocks was extended to facilitate evaluation.
The results of source code evaluation are written to the document as
Org-mode constructs, allowing for code and data blocks to interact
through a simple but powerful variable passing system. Historically,
this extension of Org-mode was named Babel.

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax
    :END:

# TODO: And #TBLNAME

Data blocks that are preceded by a line that begins with =#+results:=,
followed by a name unique within the document can be accessed by code
blocks. These can be /tables/, /example blocks/, or /links/.
#+begin_src org
  ,#+results: tabular-data
  ,| 1 |  2 |
  ,| 2 |  3 |
  ,| 3 |  5 |
  ,| 4 |  7 |
  ,| 5 | 11 |
  
  ,#+results: scalar-data
  ,: 9
  
  ,#+results: linked-data
  ,[[http://external-data.org]]
#+end_src

Active code blocks are marked with a =#+srcname:= line, followed by a
name unique within the document.  Such blocks are augmented by header
aguments that control the way Org-mode handles evaluation and export.
#+begin_src org
  ,#+srcname: <name>
  ,#+begin_src <language> <header arguments>
  ,  <body>
  ,#+end_src
#+end_src

*** Evaluation

When a code block is evaluated, the captured output appears by default
in the Org-mode buffer immediately following the code block, e.g.,
#+begin_src org
  ,#+begin_src ruby
  ,  require 'date'
  ,  "This was last evaluated on #{Date.today}"
  ,#+end_src
  
  ,#+results:
  ,: This was last evaluated on 2010-06-25
#+end_src

By default, a code block is evaluated in a dedicated system process
which does not persist after evaluation is complete. In addition, for
several languages, evaluation may be performed in an interactive
"session" which persists indefinitely. A good example is session-based
evaluation of R code which uses R sessions provided by the Emacs
Speaks Statistics (ESS) project \cite{ess}.  Thus, both the Org buffer
and the language-specific session buffers may be used for sharing of
functions and data structures between blocks. ESS successfully
provides a feature-rich environment for development of R code;
Org-mode complements rather than replaces ESS in that code editing and
session-based evaluation in Org-mode is implemented using ESS.

Adding a =:session= /header argument/ to a block causes Org-mode to
1) start a persistent process associated with a new Emacs
   buffer;
2) pass the code body to that process; and
3) capture the last value returned by that process.

Session-based evaluation is similar to the approach to evaluation
taken by =Sweave=, in which every code block is evaluated in the same
persistent session.  In Org-mode, the =:session= header argument takes
an optional name, making it possible to maintain multiple disjoint
sessions.

*** Results
Org-mode returns the results of code block evaluation as strings,
scalars, tables, or links.  By default, these are
inserted in the Org-mode buffer as protected text immediately after
the code block.  In practice, the user has extensive control over how
evaluation results are handled using header arguments.  

At the most basic level, results can be collected from code blocks by
value or as output.  This behavior is controlled by the =:results=
header argument.

- =:results value= :: Specifies that the code block should be treated
     as a function, and the results should be equal to the value of
     the last expression in the block, like the return value of a
     function.  This is the default setting.

- =:results output= :: Specifies that the results should be collected
     from =STDOUT= incrementally, as they are written by the
     application responsible for code execution.

These differences can be demonstrated with the following bit of =perl=
code that yields different results depending on the value of the
=:results= header argument.  Note that the first example uses the
default, =:results value=, and returns a scalar.  In contrast, the
same code yields a string when output is returned.

#+begin_src org
       ,#+begin_src perl
       ,  $x = 8;
       ,  $x = $x + 1;
       ,  print "shouting into the dark!\n";
       ,  $x
       ,#+end_src
       
       ,#+results:
       ,: 9


       ,#+begin_src perl :results output
       ,$x = 8;
       ,$x = $x + 1;
       ,print "shouting into the dark!\n";
       ,$x
       ,#+end_src

       ,#+results:
       ,: shouting into the dark!

#+end_src org

In addition to scalar results, Org-mode recognizes vector results and
inserts them as tables into the buffer as demonstrated in the
following two blocks of Haskell code.

#+begin_src org
  ,#+begin_src haskell
  ,  [1, 2, 3, 4, 5]
  ,#+end_src
  
  ,#+results:
  ,| 1 | 2 | 3 | 4 | 5 |
  
  ,#+begin_src haskell
  ,  zip [1..] (map (\ x -> x + 1) [1, 2, 3])
  ,#+end_src
  
  ,#+results:
  ,| 1 | 2 |
  ,| 2 | 3 |
  ,| 3 | 4 |
#+end_src

When the result of evaluating a code block is a file, such as an
image, the =:file= header argument can be used to provide a path and
name for the file.  Org-mode saves the results to the named file and
places a link to it in the document.  These links are handled by
Org-mode in the usual ways and can be opened from within the document
and included in exports.

Much more information about controlling the evaluation of code and the
handling of code results is available in the Org-mode documentation.

# TODO: provide links to the website/manual/Worg
# TODO: link to Org source for this paper and emphasise the fact

*** Variables
Org-mode implements a simple system of passing arguments to code
blocks.  The =:var= header argument takes a variable name and a value
and assigns the value to the named variable inside the code block.
Values can be literal values, such as scalars or strings, references
to named data blocks, links, or references to named code blocks.  In
addition, arguments can be passed to referenced code blocks using a
traditional function syntax with named arguments.

All values passed to variables are served by the Emacs Lisp
interpreter that is at the core of Emacs.  This argument passing
syntax allows for complex chaining of raw values in a document, and
the results of computations in one computer language can be used as
input to blocks of code in another language, as shown in Section
\ref{examples}.

** Export
    :PROPERTIES:
    :CUSTOM_ID: export
    :END:

Borrowing terms from the Literate Programming community, Org-mode
supports both /weaving/---the exportation of a mixed code/prose
document to a prose format suitable for reading by a human---and
/tangling/---the exportation of a mixed code/prose document to a pure
code file suitable for execution by a computer.

- weaving :: Org-mode provides a sophisticated and full-featured
     system to export to HTML, LaTeX, and a number of other target
     formats, with support for pre-processing code blocks as part of
     the export process.  Using the =:exports= header argument, the
     code of the code block, the results of executing the code block,
     both code and results, or neither can be included in the export.

- tangling :: Source code in an Org-mode document can be re-arranged
     on export.  Often, the order in which a computer needs to be
     presented with code differs from the order in which the code may
     be best organized in a document.  Literate programming systems
     like =noweb= solve this problem using code-block references that
     are expanded as part of the tangle process \cite{noweb}.
     Org-mode implements the =noweb= reference system using an
     identical syntax and functionality.

** Language Support
    :PROPERTIES:
    :CUSTOM_ID: languages
    :END:

The core functions of Org-mode related to source code are language
agnostic.  The tangling, source code edit, and export features can be
used for any computer language, even those that are not specifically
supported; only code evaluation and interaction with live sessions
require language-specific functions.  Support for new languages can be
added by defining a small number of Emacs Lisp functions named
according to language, following some simple conventions.  Currently,
Org-mode has support for more than 30 languages.  The ease with which
support for new languages can be added is evidenced by the fact that
new language support is increasingly implemented by Org-mode users,
rather than the original authors.

** Safety Considerations
A reproducible research document, by definition, includes code that
can be evaluated.  This potentially gives malicious hackers direct
access to the reader's computer.  The primary defense in this instance
is for the reader to recognize malicious code and to choose not to run
it.  This can be a difficult task in a reproducible research document
written in a single computer language, such as one written with
Sweave, but the difficulty increases if the document is written in
several computer languages, one or more of which is not understood by
the reader.

Org-mode has been designed with security measures to protect users
from the accidental or uninformed execution of code.  By default
/every/ execution of a code block requires explicit confirmation from
the user.[fn:1] In addition, it is possible to remove code block
evaluation from the default =C-c C-c= key binding.  This key binding
is ubiquitous in Org-mode, and is typically bound to the function most
likely to be called from a particular context.  An alternative key
binding is present for code block evaluation, namely =C-c C-v e=.  The
three key strokes required for this binding, and the fact that it is
not used elsewhere in Org-mode, provides some degree of protection
against unintended evaluation of code blocks.

* Examples
   :PROPERTIES:
   :CUSTOM_ID: examples
   :END:

TODO: Make it so that all code and results are typeset verbatim, along
with their header arguments and #+begin_src / #+results elements, as
they appear in the Emacs buffer. Show the file link as well as the
graphical output. This TODO applies to the Pascal's Triangle and
Literate Programming examples (the RR example satisfies this
already). (DD)

The following section demonstrates a number of common Org-mode usage
patterns through short examples.  The first example highlights how
Org-mode allows data to flow between tables, code blocks of multiple
languages, and graphical figures.  The second demonstrates the use of
traditional literate programming techniques.  The final example
demonstrates interaction with external data sources, including the
automated creation and use of local databases from within Org-mode
documents for long-term persistence of potentially large amounts of
data, and the use of session-based evaluation for short term
persistence of smaller amounts of data.

** Data Flow -- Pascal's Triangle
# I think this is a terrific example (TD)
Pascal's triangle is one name for a geometric arrangement of the
binomial coefficients in a triangle.  The triangle has several
interesting and useful mathematical properties.  This example
constructs and manipulates a Pascal's triangle to illustrate potential
data flows in Org-mode.  Data are passed from a code block to an
Org-mode table, from an Org-mode table to a code block, from one code
block to another, and from a code block to a graphic figure.  Finally,
the example uses a property of the triangle to test the correctness of
the implementation, using Emacs Lisp code blocks embedded in a tabular
view of the triangle to test whether the property is satisfied.

*** Calculating Pascal's Triangle
The following Emacs Lisp source block calculates and returns the first
five rows of Pascal's triangle.  Org-mode inserts the value returned
by the Emacs Lisp function into the Org-mode document as a table named
=pascals-triangle=.  This table can be referenced by other code
blocks.
#+source: pascals-triangle
#+begin_src emacs-lisp :var n=5 :exports both
  (defun pascals-triangle (n)
    (if (= n 0)
        (list (list 1))
      (let* ((prev-triangle (pascals-triangle
                             (- n 1)))
             (prev-row (car (reverse
                             prev-triangle))))
        (append
         prev-triangle
         (list (map 'list #'+
                    (append prev-row '(0))
                    (append '(0) prev-row)))))))
  
  (pascals-triangle n)
#+end_src

#+Caption: Pascal's Triangle \label{pascals-triangle-tab}
#+results: pascals-triangle
| 1 |   |    |    |   |   |
| 1 | 1 |    |    |   |   |
| 1 | 2 |  1 |    |   |   |
| 1 | 3 |  3 |  1 |   |   |
| 1 | 4 |  6 |  4 | 1 |   |
| 1 | 5 | 10 | 10 | 5 | 1 |

*** Drawing Pascal's Triangle
# I feel like python is more popular than ruby, and would thus be a
# more motivating code for this example block, however I don't know
# *any* python, and after a brief attempted python implementation I
# switched to ruby.

The tabular view of Pascal's triangle can be illustrated using the
=dot= graphing language.  In the following code block the
=pascals-triangle= table (Table \ref{pascals-triangle-tab}) is passed
to a block of code in the =ruby= language through the variable =ps=.
Org-mode transforms the table into a =ruby= array, which the code
block uses to construct strings of =dot= commands.  The strings of
=dot= commands are returned without being inserted into the Org-mode
buffer, as indicated by the =:exports code= header argument.

#+source: ps-to-dot
#+begin_src ruby :var ps=pascals-triangle :exports code
  r_cnt = 0
  c_cnt = 0
  ps.map do |r|
    r_cnt += 1
    c_cnt = 0
    r.select{|x| x.size > 0}.map do |x|
      c_cnt += 1
      # node
      r = ("\t\"#{r_cnt}_#{c_cnt}\" "+
           "[label=\"#{x}\"];")
      # edges
      if (c_cnt > 1)
        r = r+("\"#{r_cnt-1}_#{c_cnt-1}\""+
               "--\"#{r_cnt}_#{c_cnt}\";")
      end
      unless (c_cnt == r_cnt)
        r = r+(" \"#{r_cnt-1}_#{c_cnt}\""+
               "--\"#{r_cnt}_#{c_cnt}\";")
      end
      r
    end.join("\n")
  end.join("\n")
#+end_src

Instead, the value of the output is passed directly into a block of
=dot= code by assigning the name of the =ruby= code block to the
variable =ps-vals=.  Passing the results of one code block to another
in this way is called /chaining/; Org-mode places no limit on the
number of code blocks that can be chained together.  Evaluation
propagates backwards through chained code blocks.  In this example,
the =:file= header argument causes the code block to save the image
resulting from it's evaluation into a file named
=pascals-triangle.pdf=, and inserts a link to this image into the
Org-mode buffer.  This link will then expand to include the contents
of the image upon export -- it is also possible to view linked images
from within an Org-mode buffer.

# This doesn't run for me, I get an empty pdf file (TD)
#
# Fixed I had removed the required :cmdline -Tpdf header argument (Eric)
# Yes, works here, too.  Dot does a nice job.

#+source: ps-to-fig
#+headers: :file pascals-triangle.pdf :cmdline -Tpdf
#+begin_src dot :var ps-vals=ps-to-dot :exports none
  graph {
    $ps-vals
  }
#+end_src

#+results: ps-to-fig
[[file:pascals-triangle.pdf]]

#+begin_src org
  ,#+source: ps-to-fig
  ,#+headers: :file pascals-triangle.pdf :exports none
  ,#+begin_src dot :var ps-vals=ps-to-dot :cmdline -Tpdf
  ,  graph {
  ,    $ps-vals
  ,  }
  ,#+end_src
#+end_src
#+LaTeX: %$

#+Caption: Pascal's Triangle
[[file:pascals-triangle.pdf]]

*** Testing for correctness
Now that Pascal's triangle has been constructed and a graphic
representation prepared, it is worth asking whether the triangle
itself is correct.  Because the sum of successive diagonals of the
triangle yields the Fibonacci series, it is possible to verify that
the triangle is correct.  This can be done in many ways; here, it is
done with a short block of Emacs Lisp code that takes a row of numbers
and a number =n= and returns =pass= if the sum of the numbers in the
row is equal the nth Fibonacci number and returns =fail= otherwise.
With Org-mode, calls to this code block can be embedded into the
tabular view of Pascal's triangle using spreadsheet style formulas.
When the spreadsheet is calculated, it returns =pass= for each of the
five diagonals, confirming that the implementation of Pascal's
triangle is correct.

#+source: ps-check
#+begin_src emacs-lisp :var row='(1 2 1) :var n=0
  (defun fib (n)
    (if (<= n 2)
        1
      (+ (fib (- n 1)) (fib (- n 2)))))
  
  (let ((row (if (listp row) row (list row))))
    (if (= (fib n) (reduce #'+ row))
        "pass"
      "fail"))
#+end_src

#+begin_src org
  ,#+Caption: Pascal's Triangle (verified)
  ,#+results: pascals-triangle
  ,| 0 |    1 |    2 |    3 |    4 |    5 |
  ,|---+------+------+------+------+------|
  ,|   | pass | pass | pass | pass | pass |
  ,| 1 |      |      |      |      |      |
  ,| 1 |    1 |      |      |      |      |
  ,| 1 |    2 |    1 |      |      |      |
  ,| 1 |    3 |    3 |    1 |      |      |
  ,| 1 |    4 |    6 |    4 |    1 |      |
  ,| 1 |    5 |   10 |   10 |    5 |    1 |
  ,#+TBLFM: @2$2='(sbe ps-check (row @3$1)...
#+end_src

# I still get these results (TD), not sure why cols 3-5 fail
# I'm running this by placing point in the table and selecting
# Recalculate All from the Tbl/Calculate menu.

# #+Caption: Pascal's Triangle (verified)
#+results: pascals-triangle
| 0 |    1 |    2 |    3 |    4 |    5 |
|---+------+------+------+------+------|
|   | pass | pass | fail | fail | fail |
| 1 |      |      |      |      |      |
| 1 |    1 |      |      |      |      |
| 1 |    2 |    1 |      |      |      |
| 1 |    3 |    3 |    1 |      |      |
| 1 |    4 |    6 |    4 |    1 |      |
| 1 |    5 |   10 |   10 |    5 |    1 |
#+TBLFM: @2$2='(sbe ps-check (row @3$1) (n @-1))::@2$3='(sbe ps-check (row @4$1) (n @-1))::@2$4='(sbe ps-check (row @5$1 @5$3) (n @-1))::@2$5='(sbe ps-check (row @6$1 @5$2) (n @-1))::@2$6='(sbe ps-check (row @7$1 @6$2 @5$3) (n @-1))

** Literate Programming -- Cocktail Sort
Cocktail Sort [fn:2] is a variation of Bubble Sort in which the
direction of array traversal is alternated with each pass.  As a
result of this difference Cocktail Sort is more efficient than bubble
sort for arrays with small elements located at the end of the array.

The example produces a command line executable, =cocktail=, that will
print out the sorted results.  This code block combines the three
parts of the program: the standard C header for input/output; the
implementation of the cocktail sort algorithm; and the command-line
mechanism to accept input and return results.  These parts are tangled
out to the file =cocktail.c=, as indicated by the =:tangle= header
argument.

#+source: cocktail.c
#+begin_src C :noweb tangle :tangle cocktail.c
  #include <stdio.h>

  <<cocktail-sort>>

  <<main>>
#+end_src

The =main= method is used to call the sorting algorithm from the
command line and print the results.
# TODO: Need to indicate what the arguments to main are about  TD

#+source: main
#+begin_src C
  int main(int argc, char *argv[]) {
    int lst[argc-1];
    int i;
    for(i=1;i<argc;i++)
      lst[i-1] = atoi(argv[i]);
    sort(lst, argc-1);
    for(i=1;i<argc;i++)
      printf("%d ", lst[i-1]);
    printf("\n");
  }
#+end_src

The array is repeatedly traversed in alternating directions, swapping
out-of-order elements.  The actual swapping of elements is handled by
a =bubble= method, which sets the =swapped= flag when it swaps
elements, but leaves the flag alone if the elements are already in
sorted order.  This process continues until no more swaps have been
made and the array is sorted.
#+source: cocktail-sort
#+begin_src C :noweb tangle
  void sort(int *a, unsigned int l)
  {
    int swapped = 0;
    int i;
   
    do {
      for(i=0; i < (l-1); i++) {
        <<bubble>>
      }
      if ( swapped == 0 ) break;
      swapped = 0;
      for(i= l - 2; i >= 0; i--) {
        <<bubble>>
      }
    } while(swapped > 0);
  }  
#+end_src

The =bubble= method performs conditional swapping of adjacent array
elements that are not in sorted order.  It sets the =swapped= flag if
it performs a swap.

#+source: bubble
#+begin_src C
  if ( a[i] > a[i+1] ) {
    int temp = a[i];
    a[i] = a[i+1];
    a[i+1] = temp;
    swapped = 1;
  }
#+end_src


** Reproducible Research -- Live Climate Data
By referencing external data, a work of Reproducible Research can
remain up-to-date long after its initial composition and publication.
This example demonstrates the ability of code blocks in an Org-mode
document to reference external data, to construct and use local stores
of data outside the document, and to maintain persistent state in
external sessions, all in an automated fashion.  This allows each
reader of the document to update the document with recent data, and to
propagate a full local workspace with the data used in the document.

This example references climate change data from the US National
Oceanic and Atmospheric Administration (NOAA).

# TODO Two code blocks or one?  TD
The first two code blocks fetch and parse data from NOAA then write
the data to file using shell scripts that call a variety of *nix
tools.  In this instance the base URL for the NOAA data and the name
of the output file are specified in named =#+results= blocks.  These
blocks are passed to the shell scripts.

#+begin_src org
  ,#+results: url-base
  ,: ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/v2/
  
  ,#+results: raw-temps-file
  ,: v2.mean_adj.Z
  
  ,#+source: raw-temps
  ,#+headers: :var base=url-base
  ,#+begin_src sh  :var file=raw-temps-file :cache yes 
  ,  curl $base$file | gunzip | \
  ,    sed 's/-9999/ -9999/g'| \
  ,    sed 's,^\([0-9]\{3\}\)\([0-9]\{9\}\),\1 \2 ,' \
  ,    > $file
  ,#+end_src
#+end_src

# #+results: country-code-file
# : v2.slp.country.codes

# #+source: country-codes
# #+headers: :var base=url-base
# #+begin_src sh :var file=country-code-file :cache yes
#   curl $base$file |sed 's/ *$//' \
#       |sed 's/ \(.*\)$/,"\1"/'
# #+end_src


Next, the output of the first two blocks is cross referenced and used
to create a local sqlite database of the data.  The choice to store
the data in the sqlite database, instead of the Org-mode buffer, was
made because the data are potentially very large, which could make the
Org-mode buffer unwieldy.

# TODO: Check TD's explanation of why sqlite was used, above.
# TODO: I haven't plugged this into the pipeline yet.

#+begin_src org
  ,#+headers: :var temps=raw-temps
  ,#+headers: :var countries=country-codes[1:-1,0:1]
  ,#+begin_src sqlite :db climate.sqlite
  ,  create table temps (country,year,jan,feb,
  ,         mar,apr,may,jun,jul,aug,sep,oct,nov,dec);
  ,  create table countries (code, name);
  ,  .separator ","
  ,  .import $temps temps
  ,  .import $countries countries
  ,#+end_src
#+end_src


# TODO It might be useful to name the session something like =foo= to
# get across the point that session naming is arbitrary TD

Data from the sqlite database are read into R where they are used to
initialize local variables inside of a /session/ named =*R*=.  Note
that in Org-mode the session can take an arbitrary name.  The
variables persist in the =*R*= session after the code block exits, so
they can be manipulated by other code blocks that refer to the =*R*=
session. 

#+begin_src org
  ,#+headers: :var temps=raw-temps
  ,#+headers: :var countries=country-codes
  ,#+begin_src R :session *R*
  ,  temps <- read.table(datafile, as.is=TRUE)
  ,  months <- c("Jan","Feb","Mar","Apr",
  ,              "May","Jun","Jul","Aug",
  ,              "Sep","Oct","Nov","Dec")
  ,  colnames(temps) <- c("CountryCode","Station",
  ,                       "Year", months)
  ,  temps.split <- split(temps,
  ,                       temps[c("CountryCode", "Station")],
  ,                       drop=TRUE)
  ,#+end_src
#+end_src


Finally the persistent variables in the =*R*= session are used to generate
figures from the climate data. Here we fit a straight line to the July
temperatures at each station which has data throughout the period
1880-1980, and plot a histogram of the fitted slopes parameters.  The
figures are written to a pdf file for subsequent use.

#+begin_src org
  ,#+begin_src R :session *R* :file mean-temps.pdf
  ,  retain <- function(t)
  ,      t$Year[1] <= 1880 && t$Year[nrow(t)] >= 1980
  ,  fit.july.slope <- function(t)
  ,      with(t, coefficients(lm(Jul ~ Year))["Year"])
  ,  filtered <- temps.split[sapply(temps.split, retain)]
  ,  slopes <- sapply(filtered, fit.july.slope)
  ,  hist(slopes)
  ,#+end_src
#+end_src

[[file:mean-temps.pdf]]

The following LaTeX code block summarizes the analysis and presents
the figures.  The code block is set up to tangle with other source
code blocks to a LaTeX file that can be processed in the usual way.
 
#+source: latex-eg
#+begin_src latex :tangle temperature.tex
  There is a pronounced trend in the climate data (fig.~\ref{fig:climate-trend}).
  
  \begin{figure}[htb!]
    \includegraphic{mean-temps}
    \caption[Temperature trends]{Temperature trends for the century 1880--1980.}
    \label{fig:climate-trend}
  \end{figure}
#+end_src

* Discussion
  :PROPERTIES:
  :CUSTOM_ID: conclusion
  :END:
** Strengths
   :PROPERTIES:
   :CUSTOM_ID: points-for
   :END:

Org-mode has several features that make it a productive tool for composing
combined natural and computational language documents.

- Open source :: Org-mode is /open source/, which means its inner
     workings are publicly visible, and its copyright is owned by the
     Free Software Foundation \cite{fsf}, which means that Org-mode,
     and any work deriving from Org-mode, will always be fully open to
     public scrutiny and modification.  These are *essential*
     qualities for software tools used for reproducible research.

- Friendly active community :: The Org-mode community is extremely
     friendly, which makes it easy for novices to get help on how to
     use Org-mode, and for developers to discuss ideas on how to
     improve and extend it.  Without this community the Babel project
     (the part of Org-mode concerning literate programming and
     evaluation of source code) would never have reached a useable
     state.

- General :: A leading drive in the design of Babel was pursuit of
     generality.  As a result, it displays no reproducible research or
     literate programming bias.  Babel supports arbitrary programming
     languages, and Org-mode exports to a wide variety of file types,
     including ASCII, LaTeX, HTML, and DocBook.

- Integration :: Org-mode leverages the sophisticated editing modes
     available in Emacs for both natural and computational languages.

** Directions for Future Development
   :PROPERTIES:
   :CUSTOM_ID: future-work
   :END:

These items indicate a number of paths for future work, either for
further development of Org-mode, or for a future tool of this type.

- editor agnostic :: Babel was developed within the rich framework of
     Emacs and Org-mode, which made the idea of Babel possible in the
     first place.  Now that Babel is developed, however, the tie to a
     single editing environment, even one as completely configurable
     as Emacs, means that Babel is less general than it might be.  It
     seems that it would be possible for future tools of this nature
     to provide code evaluation and exportation as a service which
     could be called from any number of editors.  Such a structure
     would raise a number of challenging implementation issues.

- virtual machine :: Org-mode allows heterogeneous programming
     environments to share data by dropping all shared values to the
     common denominator of Emacs Lisp.  This works well for Org-mode
     as it allows for re-use of many pre-existing Emacs tools for
     evaluation of code in a variety of languages, often making the
     addition of support for new languages trivial.  There are however
     properties of Emacs Lisp which make it less than ideal as a
     medium of data exchange and as a shepherd of evaluation.  Most
     importantly the Emacs Lisp interpreter is /single threaded/,
     which makes the asynchronous evaluation of code blocks needlessly
     complex (in fact this feature does not yet exist in Org-mode).

This leaves dangling the question of whether and why asynchronous
evaluation is useful.  TD

** Conclusion
Org-mode simultaneously satisfies the software requirements of
reproducible research and literate programming; it is in effect both a
/compendium/ and a /web/.  The Org-mode environment, used in
combination with a suitable version control tool, satisfies the
requirements for authoring, auxiliary, transformation, quality control
and distribution software set out by Gentleman and Temple Lang in
their formulation of a compendium.  In addition, Org-mode already
accomplishes three of the four goals of their "future work", namely
support for /multiple languages/, /conditional chunks/ (where "chunks"
are blocks of text or code), and /interactivity/, which refers to
Org-mode's ability to execute code from within the authoring
environment.

What is the fourth goal that Org-mode doesn't accomplish?  Here it is:

#+begin_quote
    Metadata Inclusion of programmatically accessible meta-information
    in documents facilitates both richer interactions and better
    descriptions of the content. Many scientiﬁc documents contain
    keywords as part of the text. Making these explicitly available
    to cataloging and indexing software as programmatically
    extractable elements of the dynamic document will facilitate
    richer distribution services. Since dynamic documents are
    software, licensing also becomes pertinent. One may wish to
    restrict evaluation or access to data within the compendium. This
    can be done with meta-information such as license key matching or
    explicit code within the document to verify authorization. Another
    use of meta-information is the inclusion of digital signatures
    which can be used to verify the origin and legitimacy of the
    com-pendium.
#+end_quote

I probably don't understand this fully, but it seems to me that it
would be possible to provide "programmatically accessible
meta-information."  I implemented a simple OAI interface to my web
site many years ago--that mostly involved understanding the metadata
structure known as the Dublin core used by librarians.  TD

Org-mode is a full featured /web/ tool.  It supports both /tangling/
and /weaving/ of code, as well as a sophisticated code block reference
system along the lines of =noweb=.  Additionally the executability of
code blocks in Org-mode allows for interactive development, and
integration of test suites in a manner not supported in previous
literate programming systems.

Because Org-mode is distributed with Emacs, it is installed on very
many computer systems and is widely used.  The Org-mode mailing list
has more than 1,400 subscribers, and the list receives several dozen
messages a day.  Although Org-mode is being actively developed, its
core functions are mature and stable.  Org-mode users rely on it in
production situations in diverse applications such as time tracking,
project planning, research note-taking, programming, systems
management, web site creation, technical documentation, presentation
graphics, data analysis, and manuscript preparation for publication.
A comprehensive user manual and various shorter summary documents
are available in formats for print, computer terminal, and web
browser.  The official web site, [[http://orgmode.org/]], is supplemented
by Worg ([[http://orgmode.org/worg/]]), where users jointly edit and
maintain documentation about Org-mode including the Org-mod FAQ and a
wide variety of tutorials.  The literate programming and reproducible
research facilities of Org-mode have their own section of Worg with
information on supported languages, examples of common use scenarios,
current developments.

Perhaps here we should discuss the kinds of projects that Org-mode has
been used to accomplish instead of the following two paragraphs?  I'm
a bit concerned that "ease of use" contradicts the "complex
configuration" problems discussed above.  TD

Through making it possible to adopt literate programming and
reproducible research practices while retaining a familiar editing
environment, Org-mode significantly lowers the barrier of entry for
both of these techniques.  Through encouraging all stages of the
research and development cycle to take place within a single document
Org-mode ensures that the code, data, and text relevant to a project
will be collocated, reducing the burden on the author of compiling
such pieces after the fact.  Difficulty of use and adoption has served
as a major barrier to previous literate programming and reproducible
research systems.  We believe that with its ease of adoption, familiar
environment, and universal applicability across programming languages,
Org-mode represents a significant, qualitative advance in literate
programming and reproducible research tools.

As such we believe Org-mode has the potential to significantly
increase the widespread expectation that all computational projects
include /both/ code and prose; code should be accompanied by
explanatory prose, and any discussion of computational experimental
results should include the relevant code and data.  It is the authors'
hope that this work will ultimately help both software developers and
scientists to communicate and to make their work more accessible.

#+begin_LaTeX
  \bibliographystyle{abbrv}
  \small
  \bibliography{babel}
#+end_LaTeX

* Acknowledgements
TODO
* COMMENT Tasks
** TODO include Author information
The following looks like little much on the title page, I guess leave
this until there's an actual template for us to use.
#+begin_src latex
  \author{Eric Schulte\\
  \small Department of Computer Science\\
  \small University of New Mexico\\
  \small 1 University of New Mexico\\
  \small Albuquerque, NM 87131\\
  \small United States of America\\
  \small eschulte@cs.unm.edu
  \and
  Dan Davison\\
  \small Mathematical Genetics and Bioinformatics Group\\
  \small Department of Statistics\\
  \small University of Oxford\\
  \small 1 South Parks Road\\
  \small Oxford OX1 3TG\\
  \small United Kingdom\\
  \small dandavison7@gmail.com
  \and
  Carsten Dominik\\
  \small Sterrenkundig Instituut "Anton Pannekoek"\\
  \small University of Amsterdam,\\
  \small Science Park 904\\
  \small 1098 XH Amsterdam\\
  \small The Netherlands\\
  \small Department of Astrophysics\\
  \small Radboud University Nijmegen, P.O. Box\\
  \small 9010, NL-6500 GL Nijmegen\\
  \small The Netherlands\\
  \small email: dominik@uva.nl
  \and
  Thomas S. Dye\\
  \small T. S. Dye \& Colleagues, Archaeologists, Inc.\\
  \small 735 Bishop St., Suite 315\\
  \small Honolulu, HI 96813\\
  \small United States of America\\
  \small tsd@tsdye.com
  }
#+end_src

** TODO URL for Org source of the document
The document (and anything else needed to recreate the pdf) should be
made available on the web, and the URL should be published in the
paper.
** TODO Implement R examples in RR example
** TODO Enclose all blocks and results in org blocks
** TODO Is this indexing correct?
#+headers: :var countries=country-codes[1:-1,0:1]
* COMMENT publish
turn on the listings package, and define the =twocolumn= latex class
#+begin_src emacs-lisp :results silent
  (require 'org-latex)
  
  ;; use latex listings for fontified code blocks
  (set-default 'org-export-latex-listings t)
  
  ;; two column export
  (add-to-list 'org-export-latex-classes
               '("twocolumn" "\\documentclass[10pt, twocolumn]{article}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  
  ;; replace nasty single-quotes returned by R
  (add-hook 'org-export-latex-final-hook
            (lambda ()
              (replace-regexp "’" "'")))
  
  ;; export the bodies of org-mode blocks
  (setq org-babel-default-header-args:org
        '((:results . "raw silent")))
#+end_src

** Org-mode LaTeX export to JSS
#+source: jss
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-export-latex-classes
               '("jss"
                 "\\documentclass[article]{jss}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  ;; replace nasty single-quotes returned by R
  (add-hook 'org-export-latex-final-hook
            (lambda ()
              (replace-regexp "’" "'")))
#+end_src

* Footnotes

[fn:1] These confirmation requests can be stifled by customizing the
=org-confirm-babel-evaluate= variable.

[fn:2] This implementation of Cocktail Sort is adapted from
http://rosettacode.org/.

