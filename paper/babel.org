#+TITLE: Org-babel /DRAFT/
#+OPTIONS: ^:nil toc:nil num:nil
#+STARTUP: oddeven hideblocks
#+LaTeX_CLASS: twocolumn
#+begin_latex
\definecolor{strings}{RGB}{60,179,113}
\lstset{
  keywordstyle=\color{blue},
  commentstyle=\color{red},
  stringstyle=\color{strings}
}
\hypersetup{
  linkcolor=blue,
  pdfborder={0 0 0 0}
}
#+end_latex

#+LaTeX: \begin{abstract}
We present a new computing environment for the authoring of
interspersed natural and computer languages. In this environment a
single hierarchically-organized plain text source file may contain a
variety of elements such as source code in arbitrary programming
languages, raw data, links to external resources, project management
data, working notes, and text for publication. Source code fragments
may be executed in situ with graphical and text output captured in, or
linked to from, the source file. Export to LaTeX, HTML, Beamer and
other formats permits working reports, presentations and manuscripts
for publication to be generated from the source file. In addition,
source code extraction (tangling) permits functioning pure code files
to be extracted from the file. This framework is implemented as an
extension to the Emacs text editor and provides a very rich set of
features for working with the source file, including natural
environments for authoring both prose and code, as well as
sophisticated project management capabilities.
#+LaTeX: \end{abstract}

* Introduction
There are a variety of setting in which it is desirable to mix prose
and code in a single container.
- /Scientific research/ increasingly involves the use of computational
  tools the inclusion of which is vital to successful communication
  and verification of research results.
- In /software development/ the exchange of ideas is accomplished
  through both shared code and prose, with the former providing for
  concrete succinct description, and the later providing higher level
  explanation.  Without proper documentation the usability and future
  extensibility of computational tools is severely compromised.
- In /pedagogical/ environments it is important for descriptions of
  algorithms or techniques to go hand-in-hand with concrete
  implementations.  These environments range from in-class
  presentations with accompanying algorithmic implementations, to
  online tutorials or experiential blogs with accompanying
  instructions.

In all of the situations described above prose alone in the absence of
access to code is insufficient.
#+begin_quote
[natural language is] not conducive to succinct, exact expression and
the audience is separated from the actions and details of the
algorithm and often forced to make assumptions about the precise
computational details

-- Robert Gentleman and Duncan Temple Lang
#+end_quote

Similarly distribution of code without expository prose is not a
sufficient medium for communication between people.
#+begin_quote
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.
  
-- Donald Knuth
#+end_quote

The need for combined authoring of prose and code has been previously
approached form two different standpoints.

- Literate Programming~\cite{web} :: enhances traditional software
     development with the addition of prose in an attempt to improve
     documentation quality.
- Reproducible Research~\cite{compendium} :: which adds executable
     code to publications of scholarly work, with the aim of allowing
     the analysis described in the paper to be re-run by readers.

Org-babel provides a unified environment supporting all manner of the
authoring and use of combined prose and code.

#+LaTeX: \begin{table*}
#+ATTR_LaTeX: align=l|l|l|
|             | prose                        | code                            |
|-------------+------------------------------+---------------------------------|
| composition | natural document authoring   | natural code authoring through  |
|             | environment through Org-mode | Emacs major modes               |
|-------------+------------------------------+---------------------------------|
| application | automated publishing to      | in-situ interactive execution   |
|             | a variety of document        | as well as the tangling of code |
|             | and slideshow formats        | for external use                |
|-------------+------------------------------+---------------------------------|
#+LaTeX: \end{table*}

Org-babel provides a consistent environment in which the entire life
cycle of a research or development project can take place.  With the
data, code and text of a project stored in a single location which can
be exported to a variety of formats the future reproducibility of the
work is ensured, and the practices of Reproducible Research and
Literate Programming are encouraged by greatly reducing the burden on
the author.

Org-babel takes it's name from the story of the /Tower of Babel/, in
which God set limits upon the ambitions of man through a confusion of
languages, and the /babel fish/ which later removed these limits.
#+begin_quote
The LORD said, "If as one people speaking the same language they have
begun to do this, then nothing they plan to do will be impossible for
them.  Come, let us go down and confuse their language so they will
not understand each other."

-- Genesis-11
#+end_quote
#+begin_quote
The Babel Fish is small, yellow, and simultaneously translates from
one spoken language to another

-- The Hitchhiker's Guide to the Galaxy
#+end_quote

In the remainder of this paper we will first review the idea of the
/compendium/ -- a description of the requirements of a tool for
Reproducible Research as set forth by Gentleman and Temple
Lang~\cite{compendium} (Section \ref{compendium}).  We will then
quickly review the relevant tools currently in existence which each
address some portion of the need for combined code and prose (Section
\ref{existing-tools}).

We will describe Org-mode (\ref{org-mode}) and Org-babel (Section
\ref{org-babel}) and present an argument for why we believe that they
represent a sea change in software support for authoring of combined
prose and text.  Finally we will demonstrate the application of
Org-babel to a number of common use cases (Section
\ref{applications}), and conclude with a discussion of the limits of
Org-babel and pointers for future work (Section \ref{conclusion}).

* Background
** Compendium
   :PROPERTIES:
   :CUSTOM_ID: compendium
   :END:
Gentleman and Temple Lang introduce the /compendium/~\cite{compendium}
as a means of performing reproducible research.  In their formulation
a compendium is a container holding the text, code, and data
constituting a scholarly work.  Compendiums are intended to facilitate
the distribution, management, recreation, and extension of such works.

A compendium would also supports a variety of different /views/, where
/views/ are static documents automatically generated by /running/ the
compendium.  A good example of a view would be an article submitted
for publication, or a presentation or lecture based on the work.

Gentleman and Temple Lang's propose the adoption of compendiums as the
new unit of peer review and distribution of scientific work.

#+begin_quote
  The compendium concept, and that of reproducible research, has the
  potential to improve the state of publication about computational
  science. The tools we have proposed and discussed will allow us to
  move from an era of advertisement to one where our scholarship
  itself is published. This exposes the computations themselves to the
  scientific method and enhances the potential for iterative
  refinement and extension.
#+end_quote

Under their formulation a compendium would consist of the following
elements.
1) Authoring Software
2) Auxiliary Software
3) Transformation Software
4) Quality control Software
5) Distribution Software

Org-babel (including Org-mode and Emacs) in combination with a
traditional version control tool implements all of these elements.  In
addition Org-babel satisfies three of the four points laid out in
their proposed "Future Work", namely /multiple languages/,
/conditional chunks/ (where "chunks" are text of code blocks), and
/interactivity/ meaning that the code can be executed from within the
authoring environment.

Our description of the design of Org-babel~\ref{design} will touch on
each of these points.

** Existing Tools
   :PROPERTIES:
   :CUSTOM_ID: existing-tools
   :END:
Each of the tools listed below addresses a particular view of
requirement for unified authoring and publication of code and prose.

*** Automatic Documentation (Comment Extraction)
The most commonly used tools for literate programming come in the form
of language specific comment extraction and automated documentation
systems.  Comment extraction tools can be used to extract
documentation from comments embedded in pure code documents.  Most
major modern programming languages are supported by a comment
extraction tools (e.g. Doxygen, Javadocs, Rubydocs, etc...).

Although notorious for the poor quality of the resulting documentation
automated comment extraction provides much practical benefit mainly
through the fact that by placing almost no burden on programmers,
these systems are widely used, and in practice have had more impact on
the software development community at large than any other tools which
will be discussed herein.

*** Web
Literate Programming~\cite{web} is the practice of writing computer
programs in such a way that the main objective is to explain to a
human reader what the program is intended to do.  Literate programming
consists of embedding code inside of a prose document written in the
TeX document authoring syntax.  Programs written in this manner can be
- tangled :: resulting in a code file suitable for use by a computer
- woven :: resulting in a text document suitable for use by a person

The Web family of tools enables Literate Programming.  The initial
=WEB= tool only worked with the Pascal programming language.  Newer
versions such as =Noweb= can handle arbitrary programming languages.
Web tools enable the /authoring/ of both prose and code, but provide
no facilities for the execution of code from within documents.

*** Sweave
Like Web documents Sweave documents consist of code embedded into TeX
documents~\cite{sweave}.  Sweave only supports the R statistical
programming language.  The code in Sweave documents is executed during
publishing and can be used to automatically generate tables, graphical
figures, and inline results.  As such Sweave enables the reader of a
Sweave document to trace the origins of an interesting inline value or
figure back to the relevant R computations and through to the original
data.

Sweave (and the R community at large) inspired the work which first
formulated the /compendium/ idea.  In large part the recent resurgence
in RR owes much to the success of both R and Sweave.

*** Field
Up until this point we have focused on the benefits of mixing natural
language, and programming languages, but have not addressed the
intermingling of multiple programming languages.  Support for multiple
languages is mentioned in the "Future Work" section in the description
of /compendiums/ as a feature which would greatly facilitate the
practices of reproducible research by encouraging researchers to
perform /all/ of their computation from within the environment of the
compendium.

While no RR tools currently support the intermingling of multiple
programming languages, it is a topic of growing popularity in the
software development community at large.  Many languages are being
ported to the JVM because it provides a single environment in which
multiple languages can share libraries \cite{multilang-jvm-ref}.

Field [fn:: http://openendedgroup.com/field/] is a text editor based
on research started at the MIT media lab [fn::
http://www.media.mit.edu/].  Field allows code from multiple
programming languages to be intermingled in the same document.  These
code snippets can then share data between themselves.  Currently Field
does not support exporting to human-readable documents, and Field only
supports languages which run on the JVM.

We will discuss Org-babel's multi-language support in Section
\ref{languages}.

* Org-babel
Org-babel extends Org-mode [fn:: http://orgmode.org] a Major mode of
the Emacs text editor [fn:: http://www.gnu.org/software/emacs/] with
the ability to execute and selectively export embedded source code
blocks.  The results of code execution -- text, tables and graphics --
can be used as input to other source code blocks or integrated into
the powerful publishing facilities of Org-mode.

Org-babel provides a single environment supporting
- prose document authoring -- with export to HTML, LaTeX, plain text,
  and LaTeX beamer
- the authoring of source code
- the interactive and automatic execution of source code with control
  over the flow of data into and out of the source code blocks
- the storage and analysis of raw data in both spreadsheet and
  notebook fashion
- sophisticated organizational and task management facilities

The core of Org-babel is language agnostic and can easily be extended
to provide support for new programming languages.  Org-babel currently
supports over 20 programming languages.

The majority of the features above are provided directly by the
Org-mode project which Org-babel extends.  As such the following
description of Org-babel will begin with a description of Org-mode.

** Org-mode
   :PROPERTIES:
   :CUSTOM_ID: org-mode
   :END:
Thank you Carsten!

- readable markup language
- export targets (html, latex, beamer, ascii)
- project/task management
- editable source code
- spreadsheets
- more?

** Org-babel
   :PROPERTIES:
   :CUSTOM_ID: org-babel
   :END:
*** document as execution environment
- extension of the spreadsheet idea
- activates data in
  - tables
  - blocks

*** functional code blocks
in-document blocks of code
- are callable
- accept arguments
- execute in environment of the document
- results can be inserted into document

*** block organization
- noweb references
- can call other code blocks -- chaining

*** export
- tangling
- actions on export

*** language support
    :PROPERTIES:
    :CUSTOM_ID: languages
    :END:
- currently supports over 20 languages
- number of supported languages are growing, and it's easy enough to
  add new ones that most language support at this point is user
  submitted

** Applications
   :PROPERTIES:
   :CUSTOM_ID: applications
   :END:
- simple example with multi-language block chaining and producing a
  figure
- example with tangling
- pointer to foo.Rnw and foo.org
- look at uses for some more ideas

* Conclusion
  :PROPERTIES:
  :CUSTOM_ID: conclusion
  :END:
Org-babel certainly has a number of natural limits.  While Emacs
provides a number of extremely mature and full featured environment
for authoring of code and text, and for controlling the evaluation of
text, it also brings with it a number of limiting factors.
- steep learning curve
- small community of potential users
- it's not the best execution VM or sublayer
  - single threaded
  - inefficient

Given the comfortable environment of Emacs and Org-mode, Org-babel
provides an environment for the co-mingling of code, data, and prose
in such a way that a critical mas has been reached -- "It's actually
comfortable enough for real people to want to use it for their daily
work!".

As such we believe it is a great step forward for the RR and LP camps,
and has the potential to significantly increase the widespread
acceptance of these approaches to doing scientific work and
development.  It is the authors ultimate hope that this work will
ultimately help to increase communication and help developers and
scientists to make their work more accessible.

#+begin_LaTeX
  \bibliographystyle{abbrv}
  \small
  \bibliography{babel}
#+end_LaTeX
