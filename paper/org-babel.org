#+TITLE: Org-babel
#+OPTIONS: ^:nil toc:nil
#+STARTUP: oddeven hideblocks

#+LaTeX: \begin{abstract}
We present a new computing environment for the authoring of both prose
and source code. In this environment a single hierarchically-organized
plain text source file may contain a variety of elements such as
source code in arbitrary programming languages, raw data, links to
images and other files, project management data, working notes, and
text for publication. Source code fragments may be executed in situ
with graphical and text output captured in, or linked to from, the
source file. Export to LaTeX, HTML, Beamer and other formats permits
working reports, presentations and manuscripts for publication to be
generated from the source file. In addition, source code extraction
(tangling) permits functioning pure code files to be extracted from
the file. This framework is implemented as an extension to the Emacs
text editor and provides a very rich set of features for working with
the source file, including natural environments for authoring both
prose and code, as well as sophisticated project management
capabilities.
#+LaTeX: \end{abstract}

* Introduction -- problem
** requirement -- computational communication
In this paper we present Org-babel -- a tool for *computational
communication*.  First explicit definition of some terms which will be
used below.
- code (or source code) :: will refer to the text written in a
     programming language intended for use by a computer.
- prose :: will refer to text written in a natural language
     (e.g. English) intended for use by a person.
- computational communication :: will refer to the communication in
     which the subject is computational objects or results.  This
     communication is unique in that it must consist of mutually
     supportive sections of both prose and code.  Computational
     communication takes place between people, people and computers,
     or the same person at different points in time.

There are a variety of setting in which successful computation
communication is paramount
- *Scientific research* increasingly involves the use of computational
  tools the exposition of which is vital to successful conveyance of
  the meaning of the research results.  This is true not only for
  researchers in the computational sciences but for any researchers
  who make use of computational or statistical tools or models in
  their work.
- In *software development* individual developers must communicate
  their ideas and their code for successful collaboration.
- Without proper *documentation* the utility of computational tools is
  severely compromised [fn:1].
- *Working notes* related to the use of computational tools are an
  important resource for developers/researchers, and increasingly the
  sharing of these notes through the internet in the form of blogs and
  forums can play an important role in the adoption and utility of
  computational languages and tools [fn:2].

In all of the situations described above prose alone in the absence of
access to code is insufficient as it is
#+begin_quote
not conducive to succinct, exact expression and the audience is
separated from the actions and details of the algorithm and often
forced to make assumptions about the precise computational details

--  [[gentleman-lang]]
#+end_quote

Similarly distribution of code without expository prose is not a
sufficient medium for communication between people.

Portions of the /computational communication/ problem have been
identified and addressed under a variety of names such as Literate
Programming [fn:3] which adds prose to the authoring of code, or
Reproducible Research [fn:4] which add executable code to prose
publications.  Org-babel generalizes these preceding approaches and
provides a unified environment supporting all manner of both authoring
and using prose and code.

|       | prose                        | code                           |
|-------+------------------------------+--------------------------------|
| write | natural document authoring   | natural code authoring through |
|       | environment through Org-mode | Emacs major modes              |
|-------+------------------------------+--------------------------------|
| use   | automated publishing to      | in-situ execution and          |
|       | a variety of formats         | exportation/tangling of code   |
|-------+------------------------------+--------------------------------|

As such Org-babel provides a consistent environment in which the
entire life cycle of a research or development project can take place.
With the data, code and text of a project stored in a single location
which can be exported to a variety of formats the future
reproducibility of the work is ensured, and the practices of
Reproducible Research and Literate Programming are encouraged by
greatly reducing the burden on the author.

The name "Org-babel" is a pair of literary references indicating both
the nature of the problem in the "Tower of Babel"
#+begin_quote Genesis-11
The LORD said, “If as one people speaking the same language they have
begun to do this, then nothing they plan to do will be impossible for
them.  Come, let us go down and confuse their language so they will
not understand each other.”
#+end_quote
and the solution in the "Babel Fish".
#+begin_quote The-Hitchhiker's-Guide-to-the-Galaxy
The Babel Fish is small, yellow, and simultaneously translates from
one spoken language to another
#+end_quote

Before describing the Org-babel environment in detail we will quickly
review the existing tools each of which addresses a portion of the
problem of *computational communication*.

** Existing Tools
Each of the tools listed below addresses an subset of the problem of
computational communication.
*** Web
Literate Programming [fn:5] is the practice of writing computer
programs in such a way that the main objective is to explain to a
human reader what the program is intended to do.  Literate programming
consists of embedding code inside of a prose document written in the
TeX document authoring syntax.  Programs written in this manner can be
- tangled :: resulting in a code file suitable for use by a computer
- woven :: resulting in a text document suitable for use by a person

The Web family of tool enable Literate Programming.  The initial =WEB=
tool only worked with the Pascal programming language.  Newer versions
such as =Noweb= can handle arbitrary programming languages.  Web tools
enable the *authoring* of both prose and code, but provide no
facilities for the execution of code from within documents.

*** Comment Extraction
Comment extraction tools are a lighter weight alternative to literate
programming.  Comment extraction tools can be used to extract
documentation from comments embedded in pure code documents.  Most
major modern programming languages are supported by a comment
extraction tool.

Although comment-extraction is much less flexible than literate
programming it is much more widely used.  This is largely due to the
fact that it requires no changes to the programmers editing
environment and can be used directly from inside of source code files.

*** Sweave
Like Web documents Sweave documents consist of code embedded into TeX
documents [fn:6].  Sweave only supports the R statistical programming
language.  The code in Sweave documents is executed during publishing
the output of which can be used as figures or data in the report.  As
such Sweave enables "dynamic reports" which can be updated
automatically if the data or analysis change.

*** Field
Field [fn:7] is a text editor based on research started at the MIT
media lab [fn:8].  Field allows code from multiple programming
languages to be intermingled in the same document.  These code
snippets can then share data between themselves.

Currently Field does not support exporting to human-readable
documents, and Field only supports languages which run on the JVM.

*** Notebooks
Notebooks are interactive systems for a user to interact with a
programming or statistical analysis engine.  Notebooks support the
co-mingling of code and results in a single document and some
notebooks provide for exportation of the document to various formats.

Notebooks are characterized by a single linear session consisting of a
series of commands being submitted to the engine and the engine
returning results.  While notebooks may provide features aimed at
integrating their results into published works they are not document
authoring environments.

Examples of notebook software include
- Matlab [fn:9]
- Sage Math [fn:10]
* Org-babel -- solution
Org-babel extends Org-mode [fn:12] a Major mode of the Emacs text
editor [fn:13] with the ability to execute and selectively export
embedded source code blocks.  The results of code execution -- text,
tables and graphics -- can be used as input to other source code
blocks or integrated into the powerful publishing facilities of
Org-mode.

Org-babel provides a single environment supporting
- prose document authoring -- with export to HTML, LaTeX, plain text,
  and LaTeX beamer
- the authoring of source code
- the interactive and automatic execution of source code with control
  over the flow of data into and out of the source code blocks
- the storage and analysis of raw data in both spreadsheet and
  notebook fashion
- sophisticated organizational and task management facilities

The core of Org-babel is language agnostic and can easily be extended
to provide support for new programming languages.  Org-babel currently
supports 19 programming languages [fn:11].

The majority of the features above are provided directly by the
Org-mode project which Org-babel extends.  As such the following
description of Org-babel will begin with a description of Org-mode.

** Org-mode
Thank you Carsten!

- readable markup language
- export targets (html, latex, beamer, ascii)
- project/task management
- editable source code
- spreadsheets
- more?

** Org-babel -- executable source code in Org-mode
Org-babel activates org-mode documents by adding the ability to edit
embedded source code blocks.  The results of this evaluation can be
captured by Org-babel and inserted into the document either
interactively or during publication.

*** source code blocks
Source code blocks can occur anywhere in an Org-mode file.  Source
code blocks can be entered directly into the Org-mode file, but it is
often easier to enter code using a built in function which will open a
window in the major mode of the programming language being used.  This
places the source code block in a new buffer with the appropriate mode
activated.

The basic syntax of source code blocks in Org-babel is as follows:

: #+source: name
: #+begin_src language header-arguments
: body
: #+end_src

- name :: This name is associated with the source code block.  By
     referencing the name of a source code block it is possible to
     evaluate the block from other places in the file, from other
     files, or from inside cells of Org-mode tables.
- language :: The language of the code in the source code block.
- header-arguments :: Header arguments control many facets of the
     evaluation and output of source code blocks and will be discussed
     below.
- body :: The source code to be evaluated.  Org-mode provides
     functions for opening source code blocks in edit buffers where
     they can be edited in the Emacs Major Mode appropriate to the
     language.  This means that source code under Org-babel can be
     edited in the same environment to which the programmer is already
     accustomed.

*** arguments to source code blocks
    :PROPERTIES:
    :CUSTOM_ID: header-arguments
    :END:
Org-babel supports parameterisation of source code blocks, i.e.,
arguments can be passed to source code blocks, which gives them the
status of *functions*.

As a very simple example the following source code block defines a
function, using Python, that squares it's argument.

This is how this function appears in the Org-mode document
: #+source: square(x)
: #+begin_src python
: x*x
: #+end_src
and this is how the function appears when exported
#+source: square(x)
#+begin_src python
return x*x
#+end_src

This function can be called elsewhere from any location in the
document

: #+call: square(x=8)

from other source-code blocks

in the Org-mode buffer
: #+source: unsquare(y=square(x=2))
: #+begin_src ruby :var 
:   Math.sqrt(y)
: #+end_src
and exported
#+source: unsquare(y=square(x=2))
#+begin_src ruby :var 
  Math.sqrt(y)
#+end_src

including from inside of Org-mode tables using the standard Org-mode
spreadsheet syntax.

In the Org-mode buffer
: | x | square(x) |
: |---+-----------|
: | 0 |         0 |
: | 1 |         1 |
: | 2 |         4 |
: | 3 |         9 |
: #+TBLFM: $2='(sbe square (x $1))
and exported
| x | square(x) |
|---+-----------|
| 0 |         0 |
| 1 |         1 |
| 2 |         4 |
| 3 |         9 |
#+TBLFM: $2='(sbe square (x $1))

*** evaluation of source code blocks -- session vs. external
For some languages, such as python, R, ruby and shell, it is possible
to run an interactive session as an "inferior process" within
Emacs. This means that an environment is created containing data
objects that persist between different source code blocks. Org-babel
supports evaluation of code within such sessions with the =:session=
header argument. If the header argument is given a value then that
will be used as the name of the session.  Thus, it is possible to run
separate simultaneous sessions in the same language.

With R, the session will be under the control of [[http://ess.r-project.org/][Emacs Speaks
Statistics]] as usual, and the full power of ESS is thus still
available, both in the R session, and from the Org-babel R code edit
buffer.

*** results of code evaluation
Org-babel provides two fundamentally different modes for capturing the
results of code evaluation: functional mode and scripting mode.  The
choice of mode is specified by the =:results= header argument.
**** =:results value= (functional mode)
The 'result' of code evaluation is the *value* of the last statement
in the source code block. In functional mode, the source code block is
a function with a return value. The return value of one source code
block can be used as input for another source code block, even one in
a different language.  In this way, Org-babel becomes a
[[meta-programming-language]]. This setting is the default.
     
For example, consider the following block of python code and its
output.

In the Org-mode buffer
: #+source: ret-value
: #+begin_src ruby :results value
: puts "Hello, today's date is #{Time.now}"
: puts "Two plus two is"
: 2 + 2
: #+end_src
: 
: #+results: ret-value
: : 4
and exported
#+source: ret-value
#+begin_src ruby :results value
puts "Hello, today's date is #{Time.now}"
puts "Two plus two is"
2 + 2
#+end_src

#+results: ret-value
: 4

**** =:results output= (scripting mode)
In scripting mode, Org-babel captures the text output of the source
code block and places it in the Org-mode buffer. It is called
scripting mode because the code block contains a series of commands,
and the output of each command is returned. Unlike functional mode,
the source code block itself has no return value apart from the output
of the commands it contains. (This mode will be familiar to Sweave
users).

Consider the result of evaluating this source code block with
scripting mode.

In the Org-mode buffer
: #+source: ret-output
: #+begin_src ruby :results output
: puts "Hello, today's date is #{Time.now}"
: puts "Two plus two is"
: 2 + 2
: #+end_src
: 
: #+results: ret-output
: : Hello, today's date is Tue Jan 12 20:25:28 -0700 2010
: : Two plus two is
and exported
#+source: ret-output
#+begin_src ruby :results output
puts "Hello, today's date is #{Time.now}"
puts "Two plus two is"
2 + 2
#+end_src

#+results: ret-output
: Hello, today's date is Tue Jan 12 20:25:28 -0700 2010
: Two plus two is

Here, scripting mode returned the text that Ruby sent to stdout.
Because the source code block doesn't include a =puts= statement for
the last value (2 + 2), 4 does not appear in the results.
*** weave -- integration with Org-mode export
Org-babel documents can be "woven" to any of the export targets
supported by Org-mode.  Org-babel can evaluate source code block
during export allowing for automatically generated figures, tables,
and inline references to data and results.  This makes Org-babel
documents "active" in the sense that they can be automatically updated
to reflect different data or analysis.

The =:exports= header argument specifies what actions should be taken
on a source-code block during export.  This following options are
supported.

- code :: the default.  The body of code is included into the exported
     file.  E.g., =:exports code=.
- results :: the result of evaluating the code is included in the
     exported file. E.g., =:exports results=.
- both :: both the code and results are included in the exported
     file. E.g., =:exports both=.
- none :: nothing is included in the exported file.  E.g., =:exports
     none=.

*** tangling -- export source code
Org-babel supports "tangling" which is the process of exporting the
embedded source code to a pure code file for use by a computer.

This behavior is specified through the use of the =:tangle= header
argument which accepts the following values.
- yes :: the source code block is exported to a source code file named
     after the basename (name w/o extension) of the Org-mode file.
     E.g., =:tangle yes=.
- no :: the default.  The source code block is not exported to a
     source code file.  E.g., =:tangle no=.
- other :: Any other string passed to the =:tangle= header argument is
     interpreted as a file basename to which the block will be
     exported.  E.g., =:tangle basename=.

In addition to serial tangling of source code blocks in order
Org-babel respects =NoWEB= syntax references which can be used to
tangle source-code blocks in arbitrary an orders regardless of their
placement in the Org-mode document.  =NoWeb= references also allow
source code blocks to be referenced from inside other source code
blocks permitting the full expressive power of modern WEB systems.

** Satisfying known computational communication needs
*** org-babel as compendium -- RR
*** org-babel as web -- LP
*** org-babel as active document -- Notebook
*** other prototypes for sharing code/data?
** Example Usage
The following are just suggestions, maybe something from [[http://orgmode.org/worg/org-contrib/babel/intro.php][intro]] or [[http://orgmode.org/worg/org-contrib/babel/uses.php][uses]]
would be better

*** Knuth's primes
This is the example Knuth uses in his literate programming paper.

*** Working notes
Something you would write and keep mainly for yourself but may want to
publish at some point.

*** Research Project
Maybe something that grabs the latest data from the web, analyzes and
reports.

* Conclusion -- present and future
** Initial reaction
- User reactions and testimonials?
- Hugely constrained potential user-base.  Emacs > Org-mode > Org-babel

** Future Work
*** bring outside of Emacs
** Discussion
???

* Reference
** COMMENT Bib
*** Wavelab and RR (Donoho)
- [[file:reference/wavelab.pdf][wavelab.pdf]]
- [[file:reference/wavelab-and-repor-research.pdf][wavelab-and-repor-research.pdf]]

*** Web
    - [[file:reference/knuthweb.pdf][Knuth]]
    - See pg. 14 for an interesting discussion of WEB's development
*** Sweave
[[file:reference/sweave.pdf][sweave.pdf]]
#+begin_src bibtex
  @inproceedings{lmucs-papers:Leisch:2002,
    author = {Friedrich Leisch},
    title = {Sweave: Dynamic Generation of Statistical Reports Using
                    Literate Data Analysis},
    booktitle = {Compstat 2002 --- Proceedings in Computational
                    Statistics},
    pages = {575--580},
    year = 2002,
    editor = {Wolfgang H{\"a}rdle and Bernd R{\"o}nz},
    publisher = {Physica Verlag, Heidelberg},
    note = {ISBN 3-7908-1517-9},
    url = {http://www.stat.uni-muenchen.de/~leisch/Sweave}
  }  
#+end_src

*** Literate statistical analysis (Rossini)
[[file:reference/literate-stat-analysis.pdf][literate-stat-analysis.pdf]]
#+begin_src bibtex
  @TechReport{ross:lunt:2001,
    author =       {Rossini, A.J. and Lunt, Mark},
    title =        {Literate Statistical Analysis},
    institution =  {University of Washington, Biostatistics},
    year =         2001
  }  
#+end_src

*** Emacs Speaks Statistics (Rossini)
    :PROPERTIES:
    :CUSTOM_ID: ess-paper
    :END:
    [[file:reference/ess.pdf][ess.pdf]]
    Anthony Rossini, Martin Maechler, Kurt Hornik, Richard
    M. Heiberger, and Rodney Sparapani, "Emacs Speaks Statistics: A
    Universal Interface for Statistical Analysis" (July 17,
    2001). UW Biostatistics Working Paper Series. Working Paper 173.
    http://www.bepress.com/uwbiostat/paper173

Reading this paper makes me think we could almost get away with a
straightforward description of org-babel.
*** Emacs Speaks Statistics: A Multiplatform, Multipackage etc. (Rossini)
      [[file:reference/jcgs-unblinded.pdf][jcgs-unblinded.pdf]]
      ESS is described in a peer-reviewed journal article:
      Emacs Speaks Statistics: A Multiplatform, Multipackage Development Environment for Statistical Analysis  [Abstract]
      Journal of Computational & Graphical Statistics 13(1), 247-261
      Rossini, A.J, Heiberger, R.M., Sparapani, R.A., Maechler, M., Hornik, K. (2004) 

#+begin_quote 
   We discuss how ESS enhances a statistician's daily activities by
presenting its features and showing how it facilitates statistical
computing. Next, we describe the Emacs text editor, the underlying
platform on which ESS is built. We conclude with a short history of
the development of ESS and goals for the future.
#+end_quote

*** Gentleman & Temple Lang (2004)
      :PROPERTIES:
      :CUSTOM_ID: gentleman-lang
      :END:
      [[file:reference/stat-analy-and-repro-research.pdf][stat-analy-and-repro-research.pdf]]
      Robert Gentleman and Duncan Temple Lang, "Statistical Analyses
      and Reproducible Research" (May 2004). Bioconductor Project
      Working Papers. Working Paper 2.
      http://www.bepress.com/bioconductor/paper2 

This paper introduces the idea of a "compendium" which is a collection
of data, code, and expository text which can be used to create
"dynamic documents".  This paper lays out the framework of what
compendiums should look like, and what abilities would be required of
software helping to implement a compendium.  Much of these sections
read like advertisements for Org-babel.

There are *many* nice multiline quotes in this paper that could serve
as good motivation for org-babel.

**** babel as compendium
from "General Software Architecture for Compendiums" a compendium must
have
1) Authoring Software :: org-mode
2) Auxillary Software :: org-mode attachments should satisfy this
3) Transformation Software :: org-babel, with tangle, and the org-mode
   export functions
4) Quality control Software :: the unit tests in various languages can
   fit this bill -- else where in the paper they mention unit tests
   would be appropriate
5) Distribution Software :: tools for managing the history of a
   compendium and distributing the compendium.  they seem to not know
   about distributed version control systems -- because they are the
   ideal solution to this issue and they aren't mentioned.  as in the
   ESS paper we could talk about Emacs's integration with version
   control systems

*** Gentleman (2005)
      Gentleman, Robert (2005) "Reproducible Research: A
      Bioinformatics Case Study," Statistical Applications in Genetics
      and Molecular Biology: Vol. 4 : Iss. 1, Article 2.  DOI:
      10.2202/1544-6115.1034 Available at:
      http://www.bepress.com/sagmb/vol4/iss1/art2

At a quick glance this paper attempts to reconstruct an old paper by
distributing a collection of data files, R code and latex/Sweave files
from which the text and diagrams are generated. The files are
available for download from the above link.

*** Keeping Statistics Alive in Documents 

requirements for software enable reproducible research
#+begin_quote 
- Documents have well defined contents which are maintained in a
  reliable way. Persistence must be supported. Document contents as
  well as dynamic linking must be preserved if documents are stored or
  communicated.
- Documents are structured internally and each part has a
  context. Structure and context relations must be
  supported. Components should be sensitive to their context and adapt
  to the structure and context of the embedding document, allowing
  pre-defined components to be used in an efficient and flexible way.
- Documents may be communicated. Sharing of documents and data must be
  supported.  This means taking account of problems possibly which may
  arise from duplication of information, partial or delayed access, or
  different user environments.
#+end_quote

They talk about "linking between components" where components sound
like
- raw data
- blocks of processing functionality (source code blocks) 
- results of processing
The positive effects of being able to swap out components are
discussed.

Their "documents" are build by linking components.  So documents are
sort of like the compendium views of the [[gentleman-lang]] paper -- they
are the dynamic output of processing/composing the actual persistent
content.

* COMMENT Quotes
I think it might be nice to have a grid of four quotes at the top of
the paper to motivate and set the context.

Here are some I've collected so far,

#+begin_quote
something from Novum Organum on the foundations of science

-- Francis Bacon  
#+end_quote

#+begin_quote
An article about computational science in a scientific publication is
*not* the scholarship itself, it is merely *advertising* of the
scholarship.  The actual scholarship is the complete software
development environment and complete set of instructions which
generated the figures.

-- David L. Donoho
#+end_quote

#+begin_quote 
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.

-- Knuth
#+end_quote

#+begin_quote 
You know you're brilliant, but maybe you'd like to understand what you
did 2 weeks from now.

-- Linus Torvald
#+end_quote

#+begin_quote 
Talk is cheap. Show me the code.

-- Linus Torvald
#+end_quote

* Footnotes

[fn:1] I'm sure there's a reference to back this up

[fn:2] again -- I know this to be true but should find a reference (RoR)

[fn:3] knuth

[fn:4] gentleman-lang

[fn:5] knuth

[fn:6] Sweave

[fn:7] http://openendedgroup.com/field/

[fn:8] http://www.media.mit.edu/

[fn:9] http://www.mathworks.com/

[fn:10] http://www.sagemath.org/

[fn:11] http://orgmode.org/worg/org-contrib/babel/reference.php

[fn:12] http://orgmode.org

[fn:13] http://www.gnu.org/software/emacs/
