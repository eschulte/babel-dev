#+TITLE: Org-babel
#+TODO: TODO(t!) HOLD(h!) STARTED(s!) | DONE(d!)
#+OPTIONS: ^:nil
#+STARTUP: oddeven hideblocks

* Paper
** Abstract
** Introduction -- problem
*** problem/need -- computational communities need computational collaboration
many types of computational collaboration
- scientific computational research
  - share through pdf articles published in journals
  - collaborate source code repositories / html pages
  - slide show presentations
- open source software development
  - share through html pages, email lists, and online source-code
    repositories
  - lesser extend, corporate software development
    - team-wide development reports
    - slide shows
  - published tutorials -- the best part about the Ruby programming
    language
- statistical research community -- 
  - journal publications

- all sharing code and prose -- need to share/explain code
- text about computational results if more value when combined with
  code implementing the discussed results
- code is more valuable when combined with text explaining the
  usage/purpose of the code

solutions
- literate programming
- reproducible research
- comment based documentation

all examples of /computational collaboration/ -- defined here as the
need to reuse computational tools/results between people groups or the
same person over time. org-babel satisfies this need.

*** Existing Tools
**** web
**** Sweave
**** Field
**** Notebooks
**** Comment Documentation
*** solution -- org-babel
org-babel combines text and code in a single document which follows a
computational project through every stage of it's life cycle.

- export
- tangling
- executing code
- storing data

org-babel provides a single environment in which *all* of the tasks
which could need to be performed on either prose or code can take
place

|       | prose                          | code              |
|-------+--------------------------------+-------------------|
| write | org-mode authoring environment | Emacs major modes |
| use   | publish to variety of formats  | execute / tangle  |

as such it provides a consistent environment in which the entire
life cycle of a research/development project can take place, ensuring
that
- data is not lost
- code is not lost
- can be exported/published at any time

Having now described the general need for computation collaboration we
will discuss existing tools each of which addresses some portion of
this need.  We will then...
- describe the Org-babel environment and it's implementation
- show how Org-babel can be applied to those computational
  collaboration needs which have been discussed in previous work
- provide examples of the usage of Org-babel
- discuss areas for future work
** Org-babel -- solution
*** Org-mode
Thank you Carsten!

*** Org-babel -- executable and extractable source-code in Org-mode
*** Satisfying known computational collaboration needs
**** org-babel as compendium -- RR
go through compendium requirements and show how org-babel fits all of
them

**** org-babel as web -- LP
**** org-babel as active document -- Notebook
**** other prototypes for sharing code/data?
are there other published layouts which sketch the requirements of a
tool for computational collaboration

*** Example Usage
**** Knuth's prime
**** Working Notes
**** Research Project
** Conclusion -- present and future
*** Initial reaction
both qualitative and quantitative changes in the output of it's users

testimonials?

*** Future Work
**** bring outside of Emacs
*** Discussion
** Reference
- share the org-mode source file for the paper
  - maybe keep this as a "living paper" -- in a VC system (git) tag
    the first release of the paper and then allow the paper to keep
    growing as we get more feedback and continue development.
- point to the online documentation and the org-mode community of worg
  and the mailing list
- point to Emacs
- bibliography

* COMMENT Initial Layout
** Abstract
   We present a new computing environment for reproducible research and
   literate programming. In this environment a single
   hierarchically-organised plain text source file may contain a
   variety of elements such as source code, data, links to images and
   other files, project management data, working notes, and text for
   publication. Source code fragments may be executed in situ with
   graphical and text output being captured in, or linked to from, the
   source file. Export to \LaTeX, HTML, Beamer and other formats
   permits working reports, presentations and manuscripts for
   publication to be generated from the source file. In addition,
   source code extraction (tangling) permits functioning pure code
   files to be extracted from the file. This framework is implemented
   as an extension to the Emacs text editor and additionally provides a
   very rich set of features for working with the source file,
   including natural environments for authoring both text and code, as
   well as sophisticated project management capabilities.
*** TD comments
    - Abstract needs to mention language agnosticism
** Introduction
**** The problem addressed
Research projects can be described as comprising the following stages:
1. A question or problem is identified
2. Possible approaches to an answer or solution are conceived of.
3. Initial implementations are made.
4. Testing, data collection and refinement
5. A final theory, tool, or conclusion is arrived upon
6. The results are written up and disseminated.
7. Possibly return to step 4 and repeat

Traditionally, these stages are represented by changes in several
different computer files or other records containing working notes,
computer code, test output and pre-publication manuscripts.  At each
transition there is the potential for losing data, code, or project
history.  One of the challenges in carrying out such work is simply
that of maintaining a clear picture of the current state and direction
of the project.

***** TD comments
      - The introduction talks about a research project, but the abstract
        started off with literate programming and reproducible research.
        - I like the approach of the abstract better
      - Rossini and others make it clear that Literate Programming,
        Literate Statistical Practice, Document Integration of Software
        Components, and Reproducible Research are variations on a
        theme.
        - Literate programming produces a computer program and its documentation
        - Literate statistical practice produces the code for a
          statistical analysis and its documentation
        - Document integration of software components produces a
          document within which software components can be executed
        - Reproducible research produces a research paper with software
          tools that allow the reader to reproduce the results and
          employ the methods presented in the paper, possibly as a
          compendium
      - Existing software tools such as WEB, cweb, noweb, Sweave, and others
        do one or another of these things
        - Existing document integration of software component tools are
          tied to particular languages: Sweave = LaTeX + S (and
          dialects)
        - The web family does literate programming, either tied to a
          particular language, or language agnostic such as noweb
        - Literate statistical practice can be achieved with a language
          agnostic literate programming tool like noweb and ESS, though
          I couldn't follow Rossini's description of how this might
          work
        - Are there any reproducible research tools (other than Org-babel)?
      - Org-babel does them all
        - Literate programming is org-babel-tangle + org-mode export
        - Literate statistical practice is Org-babel source code
          blocks + org-mode 
        - Document integration of software components is Org-babel's
          executable source code blocks + org-mode
        - Reproducible research is org-babel as compendium as outlined
          by Eric below.
      - Meta-structure or generalization
        - Literate programming is a meta-structure or generalization of
          program writing and documentation writing
        - Literate statistical practice is a meta-structure or
          generalization of statistical analysis and documentation writing
        - Document integration of software components is a
          meta-structure or generalization of statistical analysis and
          reporting of results
        - The reproducible research compendium is "a small step from" a
          meta-structure or generalization of statistical analysis,
          explanation of methodology, and reporting of results
        - Org-babel is a meta-structure or generalization of pretty
          much the entire research process, including a meta-structure
          or generalization of the actual writing process (using LaTeX
          source code blocks)

***** Figure
     - The figure attempts to show the relationship of Org-babel to its predecessors
     - Cylinders refer to code
     - The wavy-bottom symbols are documents
     - The round-cornered square is meta-data
     - Beige is a system that produces a source code file and documentation
     - Purple is a system that embeds executable source in a document
     - Green is a system that produces a document and metadata
#+srcname: paradigm-shifts
#+begin_src ditaa :file paradigm.png :cmdline -r

                                         +------+
                                         |      |
                                         |Babel |
                       +-----------------+ cFF8 +------------------------\  
                       |                 +--+---+                        |
                  +----+-+                  |                            |
                  | cFDA |                  |                            | 
                  | NOWEB|                  +----------------+           |
               /--+      +--\               |                |           |
               |  +------+  |               |                |           |
          +----+-+          |            +--+---+            |         +-+----+
          |      |          |            |      |            |         |      |     
          | WEB  |          |            |Sweave|            |         | Org  | 
       /--+ cFDA +--\       |         /--+ cDBF +--\         |      /--+ c9FB +--\
       |  +------+  |       |         |  +------+  |         |      |  +------+  |   
     +-+----+  +----+-+  +--+---+   +-+----+  +----+-+  +----+-+  +-+----+  +----+-\
     |{d}   |  | {s}  |  | {s}  |   | {d}  |  | {s}  |  | {s}  |  | {d}  |  | c9FB |
     | cFDA |  | cFDA |  | cFDA |   | cDBF |  | cDBF |  | cDBF |  | c9FB |  |      |
     |      |  |  1   |  |  N   |   |      |  |  1   |  |  N   |  |  N   |  |      |
     +------+  +------+  +------+   +------+  +------+  +------+  +------+  \------+
#+end_src

#+results: paradigm-shifts
[[file:paradigm.png]]

**** Emacs Org-mode
**** Org-babel
** Examples
** Conclusion
* COMMENT Related Papers
I've started collecting the actual PDFs in the [[file:reference/][reference/]] directory
*** CMU Andrew project
very similar to Org-babel, see http://www.cs.cmu.edu/~AUIS/

*** Web
    - [[file:reference/knuthweb.pdf][Knuth]]
    - See pg. 14 for an interesting discussion of WEB's development
*** Sweave
[[file:reference/sweave.pdf][sweave.pdf]]
#+begin_src bibtex
  @inproceedings{lmucs-papers:Leisch:2002,
    author = {Friedrich Leisch},
    title = {Sweave: Dynamic Generation of Statistical Reports Using
                    Literate Data Analysis},
    booktitle = {Compstat 2002 --- Proceedings in Computational
                    Statistics},
    pages = {575--580},
    year = 2002,
    editor = {Wolfgang H{\"a}rdle and Bernd R{\"o}nz},
    publisher = {Physica Verlag, Heidelberg},
    note = {ISBN 3-7908-1517-9},
    url = {http://www.stat.uni-muenchen.de/~leisch/Sweave}
  }  
#+end_src

*** Literate statistical analysis (Rossini)
[[file:reference/literate-stat-analysis.pdf][literate-stat-analysis.pdf]]
#+begin_src bibtex
  @TechReport{ross:lunt:2001,
    author =       {Rossini, A.J. and Lunt, Mark},
    title =        {Literate Statistical Analysis},
    institution =  {University of Washington, Biostatistics},
    year =         2001
  }  
#+end_src

*** Emacs Speaks Statistics (Rossini)
    :PROPERTIES:
    :CUSTOM_ID: ess-paper
    :END:
    [[file:reference/ess.pdf][ess.pdf]]
    Anthony Rossini, Martin Maechler, Kurt Hornik, Richard
    M. Heiberger, and Rodney Sparapani, "Emacs Speaks Statistics: A
    Universal Interface for Statistical Analysis" (July 17,
    2001). UW Biostatistics Working Paper Series. Working Paper 173.
    http://www.bepress.com/uwbiostat/paper173

Reading this paper makes me think we could almost get away with a
straightforward description of org-babel.
*** Emacs Speaks Statistics: A Multiplatform, Multipackage etc. (Rossini)
      [[file:reference/jcgs-unblinded.pdf][jcgs-unblinded.pdf]]
      ESS is described in a peer-reviewed journal article:
      Emacs Speaks Statistics: A Multiplatform, Multipackage Development Environment for Statistical Analysis  [Abstract]
      Journal of Computational & Graphical Statistics 13(1), 247-261
      Rossini, A.J, Heiberger, R.M., Sparapani, R.A., Maechler, M., Hornik, K. (2004) 

#+begin_quote 
   We discuss how ESS enhances a statistician's daily activities by
presenting its features and showing how it facilitates statistical
computing. Next, we describe the Emacs text editor, the underlying
platform on which ESS is built. We conclude with a short history of
the development of ESS and goals for the future.
#+end_quote

*** Gentleman & Temple Lang (2004)
      :PROPERTIES:
      :CUSTOM_ID: gentleman-lang
      :END:
      [[file:reference/stat-analy-and-repro-research.pdf][stat-analy-and-repro-research.pdf]]
      Robert Gentleman and Duncan Temple Lang, "Statistical Analyses
      and Reproducible Research" (May 2004). Bioconductor Project
      Working Papers. Working Paper 2.
      http://www.bepress.com/bioconductor/paper2 

This paper introduces the idea of a "compendium" which is a collection
of data, code, and expository text which can be used to create
"dynamic documents".  This paper lays out the framework of what
compendiums should look like, and what abilities would be required of
software helping to implement a compendium.  Much of these sections
read like advertisements for Org-babel.

There are *many* nice multiline quotes in this paper that could serve
as good motivation for org-babel.

**** babel as compendium
from "General Software Architecture for Compendiums" a compendium must
have
1) Authoring Software :: org-mode
2) Auxillary Software :: org-mode attachments should satisfy this
3) Transformation Software :: org-babel, with tangle, and the org-mode
   export functions
4) Quality control Software :: the unit tests in various languages can
   fit this bill -- else where in the paper they mention unit tests
   would be appropriate
5) Distribution Software :: tools for managing the history of a
   compendium and distributing the compendium.  they seem to not know
   about distributed version control systems -- because they are the
   ideal solution to this issue and they aren't mentioned.  as in the
   ESS paper we could talk about Emacs's integration with version
   control systems

*** Gentleman (2005)
      Gentleman, Robert (2005) "Reproducible Research: A
      Bioinformatics Case Study," Statistical Applications in Genetics
      and Molecular Biology: Vol. 4 : Iss. 1, Article 2.  DOI:
      10.2202/1544-6115.1034 Available at:
      http://www.bepress.com/sagmb/vol4/iss1/art2

At a quick glance this paper attempts to reconstruct an old paper by
distributing a collection of data files, R code and latex/Sweave files
from which the text and diagrams are generated. The files are
available for download from the above link.

*** Keeping Statistics Alive in Documents 

requirements for software enable reproducible research
#+begin_quote 
- Documents have well defined contents which are maintained in a
  reliable way. Persistence must be supported. Document contents as
  well as dynamic linking must be preserved if documents are stored or
  communicated.
- Documents are structured internally and each part has a
  context. Structure and context relations must be
  supported. Components should be sensitive to their context and adapt
  to the structure and context of the embedding document, allowing
  pre-defined components to be used in an efficient and flexible way.
- Documents may be communicated. Sharing of documents and data must be
  supported.  This means taking account of problems possibly which may
  arise from duplication of information, partial or delayed access, or
  different user environments.
#+end_quote

They talk about "linking between components" where components sound
like
- raw data
- blocks of processing functionality (source-code blocks) 
- results of processing
The positive effects of being able to swap out components are
discussed.

Their "documents" are build by linking components.  So documents are
sort of like the compendium views of the [[gentleman-lang]] paper -- they
are the dynamic output of processing/composing the actual persistent
content.

* COMMENT Notes
*** TODO hypothesis
We need a hypothesis that we can backup with something approaching a
scientifically credible or "objective" test.

It looks like [[http://www.cs.umd.edu/~basili/][Vic Basili]] and the [[http://www.cs.umd.edu/projects/SoftEng/tame/][ESEG]] have experience with this sort
of thing, and they may be good people to talk to.

*** existing similar tools
try to collect pointers to similar tools 

Reproducible Research
- [[http://en.wikipedia.org/wiki/Sweave][Sweave]]
- [[http://hal.cs.berkeley.edu/cil/][CIL's documentation]]
- the tools used in generating [[http://www.cis.upenn.edu/~bcpierce/tapl/][TAPL]]

Literate Programming
- [[http://www.cs.tufts.edu/~nr/noweb/][Noweb]]
- [[http://www-cs-faculty.stanford.edu/~knuth/cweb.html][Cweb]]
- [[http://www.lri.fr/~filliatr/ocamlweb/][OCamlWeb]]

Comment Documentation Generation
- [[http://java.sun.com/j2se/javadoc/][javadoc]]
- [[http://rdoc.sourceforge.net/][rdoc]]

Meta Functional Programming
- [[http://openendedgroup.com/field/][field]] looks to be able to move data between different programming
  languages as long as they all run on the JVM

Programmable Spreadsheet
- ?

*** Bibliography
- [[file:bib/ess-intro-graphs.bib][ess-intro-graphs.bib]] copied from [[https://svn.r-project.org/ESS/trunk/doc/ess-intro-graphs.bib][r-project]]

*** TODO Select a journal
   The following notes are biased towards statistics-oriented
   journals because ESS and Sweave are written by people associated
   with / in statistics departments. But I am sure there are suitable
   journals out there for an article on using org mode for
   reproducible research (and literate programming etc).

   - [[http://www.amstat.org/publications/jcgs.cfm][Journal of Computational and Graphical Statistics]] published a
     paper on ESS

   - Also [[http://www.amstat.org/publications/jss.cfm][Journal of Statistical Software]] Established in 1996, the
     Journal of Statistical Software publishes articles, book reviews,
     code snippets, and software reviews. The contents are freely
     available online. For both articles and code snippets, the source
     code is published along with the paper.

   [[http://journal.r-project.org/][The R Journal]] publishes papers on tools which can be used with R.

   Sweave has a paper: 

   Friedrich Leisch and Anthony J. Rossini. Reproducible statistical
   research. Chance, 16(2):46-50, 2003. [ bib ]

   also

   Friedrich Leisch. Sweave: Dynamic generation of statistical reports
   using literate data analysis. In Wolfgang Härdle and Bernd Rönz,
   editors, Compstat 2002 - Proceedings in Computational Statistics,
   pages 575-580. Physica Verlag, Heidelberg, 2002. ISBN 3-7908-1517-9.

   also

   We could also look at the Journals publishing [[http://www.reproducibleresearch.net/index.php/RR_links#Articles_about_RR_.28chronologically.29][these]] Reproducible
   Research Articles.

*** HOLD Carsten to write Org-mode introduction
    - State "HOLD"       from "TODO"       [2010-01-09 Sat 10:14] \\

No point bothering him until we have a good first draft, and it's
clear where his section would fit

*** HOLD Share with RR authors
    - State "HOLD"       from ""           [2010-01-09 Sat 10:43]

After reading some of the above papers, especially the [[gentleman-lang]]
paper and the [[ess-paper]], it seems like the authors would be interested
to hear about Org-babel.  And (as Dan has mentioned before) the would
probably have some interesting insights if we shared initial drafts of
this paper with them before publication.

    - TD agrees with this.  The Gentleman and Lang paper was
      the most interesting of the bunch.

*** TODO Share with RR.net
    - State "TODO"       from ""           [2010-01-09 Sat 10:46]

There is a collection of RR tools at
http://reproducibleresearch.net/index.php/RR_links and I think they
Org-babel is mature enough to deserve a place on that list.
