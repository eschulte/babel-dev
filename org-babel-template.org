#+TITLE Org-babel-template--- org-babel functions for template evaluation

* Commentary

  - If you have questions please look to existing language support for guidance.

  - If you are planning on adding a language to org-babel we would ask
    that if possible you fill out the FSF copyright assignment form
    available at http://orgmode.org/request-assign-future.txt as this
    will simplify the eventual inclusion of your addition into
    org-babel and possibly at some point into org-mode and Emacs
    proper.



* User Defined Code
  - This section contains all of the source code blocks that need to
    be defined by the user.  It is divided into single value strings
    that are expanded in other source code blocks, simple Emacs Lisp
    expressions, and function definitions.
** Single Values
*** Language name
  - Enter the name of the language in the following source code block,
    as you'd like it to appear in the Emacs Lisp program.
#+srcname: new-lang
#+begin_src emacs-lisp
template
#+end_src

*** Language file extension
  - The default file extension for source code files.
#+srcname: new-lang-ext
#+begin_src emacs-lisp
tpl
#+end_src

*** Shebang line
    - Change the path if the expansion of =<<new-lang>>= doesn't work
      for you.
#+srcname: new-lang-shebang
#+begin_src emacs-lisp :noweb
#!/usr/bin/env <<new-lang>>
#+end_src

*** Your name
  - Your name as it should appear in the copyright and author lines.
#+srcname: your-name
#+begin_src emacs-lisp
Eric Schulte
#+end_src

*** Code version
#+srcname: code-version
#+begin_src emacs-lisp
0.01
#+end_src

** Simple Expressions
*** Emacs modes required to edit source code
  - Use this section to list the requirements of this language.  Most
    languages will require that at least the language be installed on
    the user's system, and the Emacs major mode relevant to the
    language be installed as well.

  - Enter the Emacs Lisp expressions requiring the modes needed to
    edit the language.
#+srcname: template-require-modes
#+begin_src emacs-lisp
;; ('require template-mode)
#+end_src

** Function Definitions

*** Main function
 - This is the main function which is called to evaluate a code
   block.  It should setup the source code block according to all of
   the header arguments packaged into params, including...
   - defining variables
   - optionally starting up a session (depending on the value of the
     :session) header argument

 - This function will then evaluate the body of the source code and
   return the results as emacs-lisp depending on the value of the
   :results header argument
   - output means that the output to STDOUT will be captured and
     returned
   - value means that the value of the last statement in the
     source code block will be returned

 - The most common first step in this function is the expansion of the
   PARAMS argument using `org-babel-process-params'.

 - Please feel free to not implement options which aren't appropriate
   for your language (e.g. not all languages support interactive
   "session" evaluation).  Also you are free to define any new header
   arguments which you feel may be useful -- all header arguments
   specified by the user will be available in the PARAMS variable.

#+srcname: template-main
#+begin_src emacs-lisp :noweb
;; This is the main function which is called to evaluate a code
;; block.  It should setup the source code block according to all of
;; the header arguments packaged into params, including...
;; - defining variables
;; - optionally starting up a session (depending on the value of the
;;   :session) header argument
;;
;; This function will then evaluate the body of the source code and
;; return the results as emacs-lisp depending on the value of the
;; :results header argument
;; - output means that the output to STDOUT will be captured and
;;   returned
;; - value means that the value of the last statement in the
;;   source code block will be returned
;;
;; The most common first step in this function is the expansion of the
;; PARAMS argument using `org-babel-process-params'.
;;
;; Please feel free to not implement options which aren't appropriate
;; for your language (e.g. not all languages support interactive
;; "session" evaluation).  Also you are free to define any new header
;; arguments which you feel may be useful -- all header arguments
;; specified by the user will be available in the PARAMS variable.
(defun org-babel-execute:<<new-lang>> (body params)
  "Execute a block of <<new-lang>> code with org-babel.  This function is
called by `org-babel-execute-src-block' via multiple-value-bind."
  (message "executing <<new-lang>> source code block")
  (let* ((processed-params (org-babel-process-params params))
         ;; set the session if the session variable is non-nil
         (session (org-babel-<<new-lang>>-initiate-session (first processed-params)))
         ;; variables assigned for use in the block
         (vars (second processed-params))
         (result-params (third processed-params))
         ;; either OUTPUT or VALUE which should behave as described above
         (result-type (fourth processed-params))
         (full-body (concat
                     ;; prepend code to define all arguments passed to the code block
                     ;; (may not be appropriate for all languages)
                     (mapconcat
                      (lambda (pair)
                        (format "%s=%s"
                                (car pair)
                                (org-babel-<<new-lang>>-var-to-<<new-lang>> (cdr pair))))
                      vars "\n") "\n" body "\n")))
    ;; actually execute the source-code block either in a session or
    ;; possibly by dropping it to a temporary file and evaluating the
    ;; file.
    ;; 
    ;; for session based evaluation the helpers defined in
    ;; `org-babel-comint' will probably be helpful.
    ))
#+end_src

*** Prepare session
   - This function should be used to assign any variables in params in
     the context of the session environment.

#+srcname: template-prep-session
#+begin_src emacs-lisp :noweb
;; This function should be used to assign any variables in params in
;; the context of the session environment.
(defun org-babel-prep-session:<<new-lang>> (session params)
  "Prepare SESSION according to the header arguments specified in PARAMS."
  )
#+end_src

*** Translate variables

#+srcname: template-translate-var
#+begin_src emacs-lisp :noweb
(defun org-babel-<<new-lang>>-var-to-<<new-lang>> (var)
  "Convert an elisp var into a string of <<new-lang>> source code
specifying a var of the same value."
  )
#+end_src

*** Translate tables

#+srcname: template-translate-table
#+begin_src emacs-lisp :noweb
(defun org-babel-<<new-lang>>-table-or-string (results)
  "If the results look like a table, then convert them into an
Emacs-lisp table, otherwise return the results as a string."
  )
#+end_src

*** Initiate session
#+srcname: template-initiate-session
#+begin_src emacs-lisp :noweb
(defun org-babel-<<new-lang>>-initiate-session (&optional session)
  "If there is not a current inferior-process-buffer in SESSION
then create.  Return the initialized session."
  (unless (string= session "none")
    ))
#+end_src



* Boilerplate
** Main
  - This source code block puts all the pieces together and directs
    the tangle of the source file.  Change the :tangle argument to a
    file name that makes sense, unless my-org-bable-template.el makes
    sense in your context.
#+begin_src emacs-lisp :noweb :tangle org-babel-generated-template.el
<<template-preamble>>
<<template-requirements>>
<<template-support>>
<<template-main>>
<<template-prep-session>>
<<template-translate-var>>
<<template-translate-table>>
<<template-initiate-session>>
<<template-close>>
#+end_src


** Stand-alone Source Code Blocks
   - These source code blocks typically do not need to be modified.
*** Preamble
   - Create a standard preamble by expanding single values provided by
     the template user.

#+srcname: template-preamble
#+begin_src emacs-lisp :noweb
  ;;; org-babel-<<new-lang>>.el --- org-babel functions for <<new-lang>> evaluation
  
  ;; Copyright (C) <<your-name>>
  
  ;; Author: <<your name>>
  ;; Keywords: literate programming, reproducible research
  ;; Homepage: http://orgmode.org
  ;; Version: <<code-version>>
  
  ;;; License:
  
  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation; either version 3, or (at your option)
  ;; any later version.
  ;;
  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.
  ;;
  ;; You should have received a copy of the GNU General Public License
  ;; along with GNU Emacs; see the file COPYING.  If not, write to the
  ;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  ;; Boston, MA 02110-1301, USA.
#+end_src

*** Requirements
   - This stand-along source code blocks contains all the requirements
     of Org-babel and expands the requirements of the new language
     provided by the template user.

#+srcname template-requirements
#+begin_src emacs-lisp :noweb
;;; Code:
(require 'org-babel)
;; possibly require modes required for your language
<<template-require-modes>>

#+end_src




*** Supported languages
   - Uses template user supplied single values to set up the supported
     language requirements.
#+srcname: template-support
#+begin_src emacs-lisp :noweb
;; Add this language to the list of supported languages.  Org-babel
;; will match the string below against the declared language of the
;; source-code block.
(org-babel-add-interpreter "<<new-lang>>")

;; specify the name, file extension, and shebang line for this language
(add-to-list 'org-babel-tangle-langs '("<<new-lang>>" "<<new-lang-ext>>" "<<new-lang-shebang>>"))

#+end_src

*** Close up source code
#+srcname: template-close
#+begin_src emacs-lisp
(provide 'org-babel-<<new-lang>>)
;;; org-babel-<<new-lang>>.el ends here
#+end_src

